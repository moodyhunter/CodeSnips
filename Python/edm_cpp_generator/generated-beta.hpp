#include <chrono>
#include <memory>
#include <QString>
#include <QByteArray>
#include <QDateTime>
#include <QList>
#include <QUuid>

// clang-format off
namespace microsoft::graph {
    struct calendar;
    struct calendarGroup;
    struct event;
    struct group;
    struct drive;
    struct site;
    struct accessReviewInstance;
    struct managedDevice;
    struct onenote;
    struct userActivity;
    struct team;
    struct user;
    struct baseItem;
    struct itemActivityOLD;
    struct driveItem;
    struct list;
    struct itemAnalytics;
    struct sitePage;
} // namespace microsoft::graph

namespace microsoft::graph::termStore {
    struct store;
} // namespace microsoft::graph::termStore

namespace microsoft::graph {
    struct accessReviewScheduleDefinition;
    struct detectedApp;
    struct notebook;
    struct onenotePage;
    struct sectionGroup;
    struct onenoteSection;
    struct activityHistoryItem;
    struct channel;
    struct application;
    struct servicePrincipal;
    struct connectorGroup;
    struct synchronization;
    struct connector;
    struct synchronizationJob;
    struct synchronizationTemplate;
    struct mobilityManagementPolicy;
    struct termsAndConditions;
    struct deviceConfiguration;
    struct deviceComplianceScript;
    struct deviceCustomAttributeShellScript;
    struct deviceHealthScript;
    struct deviceManagementScript;
    struct deviceShellScript;
    struct windowsAutopilotDeploymentProfile;
    struct windowsAutopilotDeviceIdentity;
    struct managementCondition;
    struct managementConditionStatement;
    struct groupPolicyCategory;
    struct groupPolicyConfiguration;
    struct groupPolicyDefinitionFile;
    struct groupPolicyDefinition;
    struct groupPolicyUploadedDefinitionFile;
    struct deviceAndAppManagementRoleAssignment;
    struct roleDefinition;
    struct termsAndConditionsAcceptanceStatus;
    struct termsAndConditionsGroupAssignment;
    struct deviceConfigurationGroupAssignment;
    struct deviceComplianceScriptDeviceState;
    struct deviceManagementScriptDeviceState;
    struct deviceManagementScriptUserState;
    struct deviceHealthScriptDeviceState;
    struct groupPolicyDefinitionValue;
    struct groupPolicyPresentation;
    struct roleAssignment;
} // namespace microsoft::graph

namespace microsoft::graph::ediscovery {
    struct ediscoveryroot;
} // namespace microsoft::graph::ediscovery

namespace microsoft::graph {
    struct itemActivityStat;
    struct listItem;
    struct educationUser;
    struct educationSchool;
    struct educationClass;
    struct workbook;
    struct workbookNamedItem;
    struct workbookTable;
    struct workbookWorksheet;
    struct workbookChart;
    struct workbookPivotTable;
    struct eventMessage;
    struct itemActivity;
    struct onPremisesAgentGroup;
    struct onPremisesAgent;
    struct publishedResource;
    struct attributeMappingSource;
    struct stringKeyAttributeMappingSourceValuePair;
    struct attributeMapping;
    struct objectMapping;
    struct synchronizationSchema;
    struct synchronizationRule;
    struct accessPackageAssignmentPolicy;
    struct accessPackageAssignmentRequest;
    struct accessPackageAssignmentResourceRole;
    struct accessPackageAssignment;
    struct accessPackageCatalog;
    struct accessPackageResourceEnvironment;
    struct accessPackageResourceRequest;
    struct accessPackageResourceRoleScope;
    struct accessPackageResource;
    struct accessPackage;
    struct accessPackageResourceRole;
    struct accessPackageResourceScope;
    struct accessReviewSet;
    struct entitlementManagement;
    struct programControl;
    struct program;
    struct riskyUser;
    struct riskyUserHistoryItem;
    struct mobileAppInstallStatus;
    struct userAppInstallStatus;
    struct mobileApp;
    struct mobileLobApp;
    struct androidManagedStoreApp;
    struct windowsDefenderApplicationControlSupplementalPolicy;
    struct windowsDefenderApplicationControlSupplementalPolicyDeploymentStatus;
    struct managedApp;
    struct managedMobileLobApp;
    struct windowsPhone81AppX;
    struct androidTrustedRootCertificate;
    struct androidDeviceOwnerTrustedRootCertificate;
    struct androidDeviceOwnerWiFiConfiguration;
    struct androidDeviceOwnerCertificateProfileBase;
    struct vpnConfiguration;
    struct androidCertificateProfileBase;
    struct androidWiFiConfiguration;
    struct androidForWorkTrustedRootCertificate;
    struct androidForWorkCertificateProfileBase;
    struct androidForWorkWiFiConfiguration;
    struct androidForWorkEasEmailProfileBase;
    struct androidWorkProfileTrustedRootCertificate;
    struct androidWorkProfileCertificateProfileBase;
    struct androidWorkProfileWiFiConfiguration;
    struct androidWorkProfileEasEmailProfileBase;
    struct iosCertificateProfile;
    struct appleDeviceFeaturesConfigurationBase;
    struct iosCertificateProfileBase;
    struct easEmailProfileConfigurationBase;
    struct iosWiFiConfiguration;
    struct iosTrustedRootCertificate;
    struct appleExpeditedCheckinConfigurationBase;
    struct appleVpnConfiguration;
    struct iosVpnConfiguration;
    struct macOSCertificateProfileBase;
    struct macOSWiFiConfiguration;
    struct macOSTrustedRootCertificate;
    struct windowsCertificateProfileBase;
    struct windows10CertificateProfileBase;
    struct windowsVpnConfiguration;
    struct windows81CertificateProfileBase;
    struct windows81TrustedRootCertificate;
    struct windowsPhone81CertificateProfileBase;
    struct windowsPhone81TrustedRootCertificate;
    struct windows81VpnConfiguration;
    struct windowsWifiConfiguration;
    struct windowsDomainJoinConfiguration;
    struct locationManagementCondition;
    struct networkManagementCondition;
    struct groupPolicyPresentationValue;
    struct governanceRoleAssignmentRequest;
    struct governanceRoleAssignment;
    struct governanceRoleDefinition;
    struct governanceRoleSetting;
    struct governanceResource;
    struct privilegedRoleAssignmentRequest;
    struct privilegedRole;
    struct privilegedRoleAssignment;
    struct printer;
    struct printerShare;
    struct printTaskDefinition;
    struct printJob;
    struct printerBase;
    struct printTaskTrigger;
    struct printTask;
} // namespace microsoft::graph

namespace microsoft::graph::ediscovery {
    struct _case;
    struct sourceCollection;
    struct addToReviewSetOperation;
    struct estimateStatisticsOperation;
    struct custodian;
    struct legalHold;
    struct siteSource;
    struct unifiedGroupSource;
} // namespace microsoft::graph::ediscovery

namespace microsoft::graph::termStore {
    struct group;
    struct set;
    struct term;
    struct relation;
} // namespace microsoft::graph::termStore

namespace microsoft::graph {
    enum class appliedConditionalAccessPolicyResult {
        success = 0,
        failure = 1,
        notApplied = 2,
        notEnabled = 3,
        unknown = 4,
        unknownFutureValue = 5,
        reportOnlySuccess = 6,
        reportOnlyFailure = 7,
        reportOnlyNotApplied = 8,
        reportOnlyInterrupted = 9,
    };

    enum class authenticationMethodFeature {
        ssprRegistered = 0,
        ssprEnabled = 1,
        ssprCapable = 2,
        passwordlessCapable = 3,
        mfaCapable = 4,
    };

    enum class authMethodsType {
        email = 0,
        mobileSMS = 1,
        mobilePhone = 2,
        officePhone = 3,
        securityQuestion = 4,
        appNotification = 5,
        appNotificationCode = 6,
        appNotificationAndCode = 7,
        appPassword = 8,
        fido = 9,
        alternateMobilePhone = 10,
        mobilePhoneAndSMS = 11,
        unknownFutureValue = 12,
    };

    enum class azureADLicenseType {
        none = 0,
        free = 1,
        basic = 2,
        premiumP1 = 3,
        premiumP2 = 4,
        unknownFutureValue = 5,
    };

    enum class conditionalAccessConditions {
        none = 0,
        application = 1,
        users = 2,
        devicePlatform = 4,
        location = 8,
        clientType = 16,
        signInRisk = 32,
        userRisk = 64,
        time = 128,
        deviceState = 256,
        client = 512,
        ipAddressSeenByAzureAD = 1024,
        ipAddressSeenByResourceProvider = 2048,
        unknownFutureValue = 4096,
    };

    enum class conditionalAccessRule {
        allApps = 0,
        firstPartyApps = 1,
        office365 = 2,
        appId = 3,
        acr = 4,
        appFilter = 5,
        allUsers = 6,
        guest = 7,
        groupId = 8,
        roleId = 9,
        userId = 10,
        allDevicePlatforms = 11,
        devicePlatform = 12,
        allLocations = 13,
        insideCorpnet = 14,
        allTrustedLocations = 15,
        locationId = 16,
        allDevices = 17,
        deviceFilter = 18,
        deviceState = 19,
        unknownFutureValue = 20,
        deviceFilterIncludeRuleNotMatched = 21,
        allDeviceStates = 22,
    };

    enum class conditionalAccessStatus {
        success = 0,
        failure = 1,
        notApplied = 2,
        unknownFutureValue = 3,
    };

    enum class expirationRequirement {
        rememberMultifactorAuthenticationOnTrustedDevices = 0,
        tenantTokenLifetimePolicy = 1,
        audienceTokenLifetimePolicy = 2,
        signInFrequencyPeriodicReauthentication = 3,
        ngcMfa = 4,
        signInFrequencyEveryTime = 5,
        unknownFutureValue = 6,
    };

    enum class featureType {
        registration = 0,
        reset = 1,
        unknownFutureValue = 2,
    };

    enum class groupType {
        unifiedGroups = 0,
        azureAD = 1,
        unknownFutureValue = 2,
    };

    enum class includedUserRoles {
        all = 0,
        privilegedAdmin = 1,
        admin = 2,
        user = 3,
        unknownFutureValue = 4,
    };

    enum class includedUserTypes {
        all = 0,
        member = 1,
        guest = 2,
        unknownFutureValue = 3,
    };

    enum class initiatorType {
        user = 0,
        application = 1,
        system = 2,
        unknownFutureValue = 3,
    };

    enum class migrationStatus {
        ready = 0,
        needsReview = 1,
        additionalStepsRequired = 2,
        unknownFutureValue = 3,
    };

    enum class networkType {
        intranet = 0,
        extranet = 1,
        namedNetwork = 2,
        trusted = 3,
        trustedNamedLocation = 4,
        unknownFutureValue = 5,
    };

    enum class operationResult {
        success = 0,
        failure = 1,
        timeout = 2,
        unknownFutureValue = 3,
    };

    enum class provisioningAction {
        other = 0,
        create = 1,
        _delete = 2,
        disable = 3,
        update = 4,
        stagedDelete = 5,
        unknownFutureValue = 6,
    };

    enum class provisioningResult {
        success = 0,
        failure = 1,
        skipped = 2,
        warning = 3,
        unknownFutureValue = 4,
    };

    enum class provisioningStatusErrorCategory {
        failure = 0,
        nonServiceFailure = 1,
        success = 2,
        unknownFutureValue = 3,
    };

    enum class provisioningStepType {
        import = 0,
        scoping = 1,
        matching = 2,
        processing = 3,
        referenceResolution = 4,
        _export = 5,
        unknownFutureValue = 6,
    };

    enum class registrationAuthMethod {
        email = 0,
        mobilePhone = 1,
        officePhone = 2,
        securityQuestion = 3,
        appNotification = 4,
        appCode = 5,
        alternateMobilePhone = 6,
        fido = 7,
        appPassword = 8,
        unknownFutureValue = 9,
    };

    enum class registrationStatusType {
        registered = 0,
        enabled = 1,
        capable = 2,
        mfaRegistered = 3,
        unknownFutureValue = 4,
    };

    enum class requirementProvider {
        user = 0,
        request = 1,
        servicePrincipal = 2,
        v1ConditionalAccess = 3,
        multiConditionalAccess = 4,
        tenantSessionRiskPolicy = 5,
        accountCompromisePolicies = 6,
        v1ConditionalAccessDependency = 7,
        v1ConditionalAccessPolicyIdRequested = 8,
        mfaRegistrationRequiredByIdentityProtectionPolicy = 9,
        baselineProtection = 10,
        mfaRegistrationRequiredByBaselineProtection = 11,
        mfaRegistrationRequiredByMultiConditionalAccess = 12,
        enforcedForCspAdmins = 13,
        securityDefaults = 14,
        mfaRegistrationRequiredBySecurityDefaults = 15,
        proofUpCodeRequest = 16,
        crossTenantOutboundRule = 17,
        gpsLocationCondition = 18,
        riskBasedPolicy = 19,
        unknownFutureValue = 20,
    };

    enum class riskDetail {
        none = 0,
        adminGeneratedTemporaryPassword = 1,
        userPerformedSecuredPasswordChange = 2,
        userPerformedSecuredPasswordReset = 3,
        adminConfirmedSigninSafe = 4,
        aiConfirmedSigninSafe = 5,
        userPassedMFADrivenByRiskBasedPolicy = 6,
        adminDismissedAllRiskForUser = 7,
        adminConfirmedSigninCompromised = 8,
        hidden = 9,
        adminConfirmedUserCompromised = 10,
        unknownFutureValue = 11,
    };

    enum class riskEventType {
        unlikelyTravel = 0,
        anonymizedIPAddress = 1,
        maliciousIPAddress = 2,
        unfamiliarFeatures = 3,
        malwareInfectedIPAddress = 4,
        suspiciousIPAddress = 5,
        leakedCredentials = 6,
        investigationsThreatIntelligence = 7,
        generic = 8,
        adminConfirmedUserCompromised = 9,
        mcasImpossibleTravel = 10,
        mcasSuspiciousInboxManipulationRules = 11,
        investigationsThreatIntelligenceSigninLinked = 12,
        maliciousIPAddressValidCredentialsBlockedIP = 13,
        unknownFutureValue = 14,
    };

    enum class riskLevel {
        low = 0,
        medium = 1,
        high = 2,
        hidden = 3,
        none = 4,
        unknownFutureValue = 5,
    };

    enum class riskState {
        none = 0,
        confirmedSafe = 1,
        remediated = 2,
        dismissed = 3,
        atRisk = 4,
        confirmedCompromised = 5,
        unknownFutureValue = 6,
    };

    enum class signInAccessType {
        none = 0,
        b2bCollaboration = 1,
        b2bDirectConnect = 2,
        microsoftSupport = 4,
        serviceProvider = 8,
        unknownFutureValue = 16,
    };

    enum class signInIdentifierType {
        userPrincipalName = 0,
        phoneNumber = 1,
        proxyAddress = 2,
        qrCode = 3,
        onPremisesUserPrincipalName = 4,
        unknownFutureValue = 5,
    };

    enum class signInUserType {
        member = 0,
        guest = 1,
        unknownFutureValue = 3,
    };

    enum class tokenIssuerType {
        AzureAD = 0,
        ADFederationServices = 1,
        UnknownFutureValue = 2,
    };

    enum class usageAuthMethod {
        email = 0,
        mobileSMS = 1,
        mobileCall = 2,
        officePhone = 3,
        securityQuestion = 4,
        appNotification = 5,
        appCode = 6,
        alternateMobileCall = 7,
        fido = 8,
        appPassword = 9,
        unknownFutureValue = 10,
    };

    enum class analyticsActivityType {
        Email = 0,
        Meeting = 1,
        Focus = 2,
        Chat = 3,
        Call = 4,
    };

    enum class advancedConfigState {
        _default = 0,
        enabled = 1,
        disabled = 2,
        unknownFutureValue = 3,
    };

    enum class authenticationMethodState {
        enabled = 0,
        disabled = 1,
    };

    enum class authenticationMethodTargetType {
        user = 0,
        group = 1,
        unknownFutureValue = 2,
    };

    enum class authenticatorAppContextType {
        location = 0,
        app = 1,
        unknownFutureValue = 2,
    };

    enum class authenticatorAppFeatureSettings {
        requireNumberMatching = 1,
    };

    enum class externalEmailOtpState {
        _default = 0,
        enabled = 1,
        disabled = 2,
        unknownFutureValue = 3,
    };

    enum class fido2RestrictionEnforcementType {
        allow = 0,
        block = 1,
        unknownFutureValue = 2,
    };

    enum class microsoftAuthenticatorAuthenticationMode {
        deviceBasedPush = 0,
        push = 1,
        any = 2,
    };

    enum class securityQuestionType {
        predefined = 0,
        custom = 1,
    };

    enum class volumeType {
        operatingSystemVolume = 1,
        fixedDataVolume = 2,
        removableDataVolume = 3,
        unknownFutureValue = 4,
    };

    enum class bookingInvoiceStatus {
        draft = 0,
        reviewing = 1,
        open = 2,
        canceled = 3,
        paid = 4,
        corrective = 5,
    };

    enum class bookingPriceType {
        undefined = 0,
        fixedPrice = 1,
        startingAt = 2,
        hourly = 3,
        free = 4,
        priceVaries = 5,
        callUs = 6,
        notSet = 7,
    };

    enum class bookingReminderRecipients {
        allAttendees = 0,
        staff = 1,
        customer = 2,
    };

    enum class bookingStaffRole {
        guest = 0,
        administrator = 1,
        viewer = 2,
        externalGuest = 3,
    };

    enum class dayOfWeek {
        sunday = 0,
        monday = 1,
        tuesday = 2,
        wednesday = 3,
        thursday = 4,
        friday = 5,
        saturday = 6,
    };

    enum class locationType {
        _default = 0,
        conferenceRoom = 1,
        homeAddress = 2,
        businessAddress = 3,
        geoCoordinates = 4,
        streetAddress = 5,
        hotel = 6,
        restaurant = 7,
        localBusiness = 8,
        postalAddress = 9,
    };

    enum class locationUniqueIdType {
        unknown = 0,
        locationStore = 1,
        directory = 2,
        _private = 3,
        bing = 4,
    };

    enum class physicalAddressType {
        unknown = 0,
        home = 1,
        business = 2,
        other = 3,
    };

    enum class actionState {
        none = 0,
        pending = 1,
        canceled = 2,
        active = 3,
        done = 4,
        failed = 5,
        notSupported = 6,
    };

    enum class cloudPcAuditActivityOperationType {
        create = 0,
        _delete = 1,
        patch = 2,
        other = 999,
    };

    enum class cloudPcAuditActivityResult {
        success = 0,
        clientError = 1,
        failure = 2,
        timeout = 3,
        other = 999,
    };

    enum class cloudPcAuditActorType {
        itPro = 0,
        application = 1,
        partner = 2,
        unknown = 999,
    };

    enum class cloudPcAuditCategory {
        cloudPC = 0,
        other = 999,
    };

    enum class cloudPcDeviceImageStatus {
        pending = 0,
        ready = 1,
        failed = 2,
    };

    enum class cloudPcDeviceImageStatusDetails {
        internalServerError = 0,
        sourceImageNotFound = 1,
        osVersionNotSupported = 2,
        sourceImageInvalid = 3,
    };

    enum class cloudPcOnPremisesConnectionHealthCheckErrorType {
        dnsCheckFqdnNotFound = 100,
        dnsCheckUnknownError = 199,
        adJoinCheckFqdnNotFound = 200,
        adJoinCheckIncorrectCredentials = 201,
        adJoinCheckOrganizationalUnitNotFound = 202,
        adJoinCheckOrganizationalUnitIncorrectFormat = 203,
        adJoinCheckComputerObjectAlreadyExists = 204,
        adJoinCheckAccessDenied = 205,
        adJoinCheckUnknownError = 299,
        endpointConnectivityCheckCloudPcUrlNotAllowListed = 300,
        endpointConnectivityCheckWVDUrlNotAllowListed = 301,
        endpointConnectivityCheckIntuneUrlNotAllowListed = 302,
        endpointConnectivityCheckUnknownError = 399,
        azureAdDeviceSyncCheckDeviceNotFound = 400,
        azureAdDeviceSyncCheckLongSyncCircle = 401,
        azureAdDeviceSyncCheckUnknownError = 499,
        resourceAvailabilityCheckNoSubnetIP = 500,
        resourceAvailabilityCheckSubscriptionDisabled = 501,
        resourceAvailabilityCheckAzurePolicyViolation = 502,
        resourceAvailabilityCheckSubscriptionNotFound = 503,
        resourceAvailabilityCheckSubscriptionTransferred = 504,
        resourceAvailabilityCheckGeneralSubscriptionError = 505,
        resourceAvailabilityCheckUnsupportedVNetRegion = 506,
        resourceAvailabilityCheckUnknownError = 599,
        permissionCheckNoSubscriptionReaderRole = 600,
        permissionCheckNoResourceGroupOwnerRole = 601,
        permissionCheckNoVNetContributorRole = 602,
        permissionCheckNoResourceGroupNetworkContributorRole = 603,
        permissionCheckUnknownError = 699,
        internalServerErrorDeploymentCanceled = 900,
        internalServerErrorAllocateResourceFailed = 901,
        internalServerErrorVMDeploymentTimeout = 902,
        internalServerErrorUnableToRunDscScript = 903,
        internalServerUnknownError = 999,
    };

    enum class cloudPcOnPremisesConnectionStatus {
        pending = 0,
        running = 10,
        passed = 20,
        failed = 30,
        warning = 40,
        unknownFutureValue = 999,
    };

    enum class cloudPcProvisioningPolicyImageType {
        gallery = 0,
        custom = 1,
    };

    enum class cloudPcStatus {
        notProvisioned = 0,
        provisioning = 1,
        provisioned = 2,
        inGracePeriod = 3,
        deprovisioning = 4,
        failed = 5,
        provisionedWithWarnings = 6,
        resizing = 7,
        unknownFutureValue = 999,
    };

    enum class usageRightState {
        active = 0,
        inactive = 1,
        warning = 2,
        suspended = 3,
        unknownFutureValue = 4,
    };

    enum class bodyType {
        text = 0,
        html = 1,
    };

    enum class identityUserFlowAttributeDataType {
        string = 1,
        boolean = 2,
        int64 = 3,
        stringCollection = 4,
        dateTime = 5,
        unknownFutureValue = 6,
    };

    enum class identityUserFlowAttributeInputType {
        textBox = 1,
        dateTimeDropdown = 2,
        radioSingleSelect = 3,
        dropdownSingleSelect = 4,
        emailBox = 5,
        checkboxMultiSelect = 6,
    };

    enum class identityUserFlowAttributeType {
        builtIn = 1,
        custom = 2,
        required = 3,
        unknownFutureValue = 4,
    };

    enum class openIdConnectResponseMode {
        form_post = 1,
        query = 2,
        unknownFutureValue = 3,
    };

    enum class openIdConnectResponseTypes {
        code = 1,
        id_token = 2,
        token = 4,
    };

    enum class userFlowType {
        signUp = 1,
        signIn = 2,
        signUpOrSignIn = 3,
        passwordReset = 4,
        profileUpdate = 5,
        resourceOwner = 6,
        unknownFutureValue = 7,
    };

    enum class accessScope {
        inOrganization = 0,
        notInOrganization = 1,
    };

    enum class alignment {
        left = 0,
        right = 1,
        center = 2,
    };

    enum class applicationMode {
        manual = 0,
        automatic = 1,
        recommended = 2,
    };

    enum class classificationMethod {
        patternMatch = 0,
        exactDataMatch = 1,
        fingerprint = 2,
        machineLearning = 3,
    };

    enum class component {
        Label = 0,
    };

    enum class dlpAction {
        notifyUser = 0,
        blockAccess = 1,
        deviceRestriction = 2,
    };

    enum class encryptWith {
        _template = 0,
        userDefinedRights = 1,
    };

    enum class groupPrivacy {
        unspecified = 0,
        _public = 1,
        _private = 2,
        unknownFutureValue = 3,
    };

    enum class lobbyBypassScope {
        organizer = 0,
        organization = 1,
        organizationAndFederated = 2,
        everyone = 3,
        unknownFutureValue = 4,
    };

    enum class mlClassificationMatchTolerance {
        exact = 1,
        near = 2,
    };

    enum class onlineMeetingForwarders {
        everyone = 0,
        organizer = 1,
        unknownFutureValue = 2,
    };

    enum class onlineMeetingPresenters {
        everyone = 0,
        organization = 1,
        roleIsPresenter = 2,
        organizer = 3,
        unknownFutureValue = 4,
    };

    enum class overrideOption {
        notAllowed = 0,
        allowFalsePositiveOverride = 1,
        allowWithJustification = 2,
        allowWithoutJustification = 4,
    };

    enum class pageOrientation {
        horizontal = 0,
        diagonal = 1,
    };

    enum class restrictionAction {
        warn = 0,
        audit = 1,
        block = 2,
    };

    enum class restrictionTrigger {
        copyPaste = 0,
        copyToNetworkShare = 1,
        copyToRemovableMedia = 2,
        screenCapture = 3,
        print = 4,
        cloudEgress = 5,
        unallowedApps = 6,
    };

    enum class ruleMode {
        audit = 1,
        auditAndNotify = 2,
        enforce = 3,
        pendingDeletion = 4,
        test = 5,
    };

    enum class sensitiveTypeScope {
        fullDocument = 1,
        partialDocument = 2,
    };

    enum class sensitiveTypeSource {
        outOfBox = 0,
        tenant = 1,
    };

    enum class sensitivityLabelTarget {
        email = 1,
        site = 2,
        unifiedGroup = 4,
        unknownFutureValue = 16,
        teamwork = 8,
    };

    enum class siteAccessType {
        block = 0,
        full = 1,
        limited = 2,
    };

    enum class policyScope {
        none = 0,
        all = 1,
        selected = 2,
        unknownFutureValue = 3,
    };

    enum class allowInvitesFrom {
        none = 0,
        adminsAndGuestInviters = 1,
        adminsGuestInvitersAndAllMembers = 2,
        everyone = 3,
        unknownFutureValue = 4,
    };

    enum class appCredentialRestrictionType {
        passwordAddition = 0,
        passwordLifetime = 1,
        unknownFutureValue = 2,
    };

    enum class permissionClassificationType {
        low = 1,
        medium = 2,
        high = 3,
        unknownFutureValue = 4,
    };

    enum class permissionType {
        application = 1,
        delegated = 2,
        delegatedUserConsentable = 3,
    };

    enum class phoneType {
        home = 0,
        business = 1,
        mobile = 2,
        other = 3,
        assistant = 4,
        homeFax = 5,
        businessFax = 6,
        otherFax = 7,
        pager = 8,
        radio = 9,
    };

    enum class educationAddedStudentAction {
        none = 0,
        assignIfOpen = 1,
        unknownFutureValue = 2,
    };

    enum class educationAddToCalendarOptions {
        none = 0,
        studentsAndPublisher = 1,
        studentsAndTeamOwners = 2,
        unknownFutureValue = 3,
    };

    enum class educationAssignmentStatus {
        draft = 0,
        published = 1,
        assigned = 2,
        unknownFutureValue = 3,
    };

    enum class educationSubmissionStatus {
        working = 0,
        submitted = 1,
        released = 2,
        returned = 3,
        unknownFutureValue = 4,
    };

    enum class contactRelationship {
        parent = 0,
        relative = 1,
        aide = 2,
        doctor = 3,
        guardian = 4,
        child = 5,
        other = 6,
        unknownFutureValue = 7,
    };

    enum class educationSynchronizationProfileState {
        deleting = 2,
        deletionFailed = 3,
        provisioningFailed = 5,
        provisioned = 6,
        provisioning = 7,
        unknownFutureValue = 8,
    };

    enum class educationSynchronizationStatus {
        paused = 0,
        inProgress = 1,
        success = 2,
        error = 3,
        validationError = 4,
        quarantined = 5,
        unknownFutureValue = 6,
        extracting = 7,
        validating = 8,
    };

    enum class educationUserRole {
        student = 0,
        teacher = 1,
        none = 2,
        unknownFutureValue = 3,
        faculty = 4,
    };

    enum class educationExternalSource {
        sis = 0,
        manual = 1,
        unknownFutureValue = 2,
        lms = 3,
    };

    enum class educationGender {
        female = 0,
        male = 1,
        other = 2,
        unknownFutureValue = 3,
    };

    enum class workbookOperationStatus {
        notStarted = 0,
        running = 1,
        succeeded = 2,
        failed = 3,
    };

    enum class activityDomain {
        unknown = 0,
        work = 1,
        personal = 2,
        unrestricted = 3,
    };

    enum class attendeeType {
        required = 0,
        optional = 1,
        resource = 2,
    };

    enum class freeBusyStatus {
        unknown = -1,
        free = 0,
        tentative = 1,
        busy = 2,
        oof = 3,
        workingElsewhere = 4,
    };

    enum class bookingType {
        unknown = 0,
        standard = 1,
        reserved = 2,
    };

    enum class attachmentType {
        file = 0,
        item = 1,
        reference = 2,
    };

    enum class automaticRepliesStatus {
        disabled = 0,
        alwaysEnabled = 1,
        scheduled = 2,
    };

    enum class calendarColor {
        _auto = -1,
        lightBlue = 0,
        lightGreen = 1,
        lightOrange = 2,
        lightGray = 3,
        lightYellow = 4,
        lightTeal = 5,
        lightPink = 6,
        lightBrown = 7,
        lightRed = 8,
        maxColor = 9,
    };

    enum class calendarRoleType {
        none = 0,
        freeBusyRead = 1,
        limitedRead = 2,
        read = 3,
        write = 4,
        delegateWithoutPrivateEventAccess = 5,
        delegateWithPrivateEventAccess = 6,
        custom = 7,
    };

    enum class calendarSharingAction {
        accept = 0,
        acceptAndViewCalendar = 1,
        viewCalendar = 2,
        addThisCalendar = 3,
    };

    enum class calendarSharingActionImportance {
        primary = 0,
        secondary = 1,
    };

    enum class calendarSharingActionType {
        accept = 0,
    };

    enum class categoryColor {
        none = -1,
        preset0 = 0,
        preset1 = 1,
        preset2 = 2,
        preset3 = 3,
        preset4 = 4,
        preset5 = 5,
        preset6 = 6,
        preset7 = 7,
        preset8 = 8,
        preset9 = 9,
        preset10 = 10,
        preset11 = 11,
        preset12 = 12,
        preset13 = 13,
        preset14 = 14,
        preset15 = 15,
        preset16 = 16,
        preset17 = 17,
        preset18 = 18,
        preset19 = 19,
        preset20 = 20,
        preset21 = 21,
        preset22 = 22,
        preset23 = 23,
        preset24 = 24,
    };

    enum class delegateMeetingMessageDeliveryOptions {
        sendToDelegateAndInformationToPrincipal = 0,
        sendToDelegateAndPrincipal = 1,
        sendToDelegateOnly = 2,
    };

    enum class emailType {
        unknown = 0,
        work = 1,
        personal = 2,
        main = 3,
        other = 4,
    };

    enum class eventType {
        singleInstance = 0,
        occurrence = 1,
        exception = 2,
        seriesMaster = 3,
    };

    enum class exchangeIdFormat {
        entryId = 0,
        ewsId = 1,
        immutableEntryId = 2,
        restId = 3,
        restImmutableEntryId = 4,
    };

    enum class externalAudienceScope {
        none = 0,
        contactsOnly = 1,
        all = 2,
    };

    enum class followupFlagStatus {
        notFlagged = 0,
        complete = 1,
        flagged = 2,
    };

    enum class groupAccessType {
        none = 0,
        _private = 1,
        secret = 2,
        _public = 3,
    };

    enum class importance {
        low = 0,
        normal = 1,
        high = 2,
    };

    enum class inferenceClassificationType {
        focused = 0,
        other = 1,
    };

    enum class mailboxRecipientType {
        unknown = 0,
        user = 1,
        linked = 2,
        shared = 3,
        room = 4,
        equipment = 5,
        others = 6,
    };

    enum class mailTipsType {
        automaticReplies = 1,
        mailboxFullStatus = 2,
        customMailTip = 4,
        externalMemberCount = 8,
        totalMemberCount = 16,
        maxMessageSize = 32,
        deliveryRestriction = 64,
        moderationStatus = 128,
        recipientScope = 256,
        recipientSuggestions = 512,
    };

    enum class meetingMessageType {
        none = 0,
        meetingRequest = 1,
        meetingCancelled = 2,
        meetingAccepted = 3,
        meetingTentativelyAccepted = 4,
        meetingDeclined = 5,
    };

    enum class messageActionFlag {
        any = 0,
        call = 1,
        doNotForward = 2,
        followUp = 3,
        fyi = 4,
        forward = 5,
        noResponseNecessary = 6,
        read = 7,
        reply = 8,
        replyToAll = 9,
        review = 10,
    };

    enum class onlineMeetingProviderType {
        unknown = 0,
        skypeForBusiness = 1,
        skypeForConsumer = 2,
        teamsForBusiness = 3,
    };

    enum class recipientScopeType {
        none = 0,
        internal = 1,
        external = 2,
        externalPartner = 4,
        externalNonPartner = 8,
    };

    enum class recurrencePatternType {
        daily = 0,
        weekly = 1,
        absoluteMonthly = 2,
        relativeMonthly = 3,
        absoluteYearly = 4,
        relativeYearly = 5,
    };

    enum class recurrenceRangeType {
        endDate = 0,
        noEnd = 1,
        numbered = 2,
    };

    enum class referenceAttachmentPermission {
        other = 0,
        view = 1,
        edit = 2,
        anonymousView = 3,
        anonymousEdit = 4,
        organizationView = 5,
        organizationEdit = 6,
    };

    enum class referenceAttachmentProvider {
        other = 0,
        oneDriveBusiness = 1,
        oneDriveConsumer = 2,
        dropbox = 3,
    };

    enum class responseType {
        none = 0,
        organizer = 1,
        tentativelyAccepted = 2,
        accepted = 3,
        declined = 4,
        notResponded = 5,
    };

    enum class sensitivity {
        normal = 0,
        personal = 1,
        _private = 2,
        confidential = 3,
    };

    enum class taskStatus {
        notStarted = 0,
        inProgress = 1,
        completed = 2,
        waitingOnOthers = 3,
        deferred = 4,
    };

    enum class timeZoneStandard {
        windows = 0,
        iana = 1,
    };

    enum class websiteType {
        other = 0,
        home = 1,
        work = 2,
        blog = 3,
        profile = 4,
    };

    enum class weekIndex {
        first = 0,
        second = 1,
        third = 2,
        fourth = 3,
        last = 4,
    };

    enum class columnTypes {
        note = 0,
        text = 1,
        choice = 2,
        multichoice = 3,
        number = 4,
        currency = 5,
        dateTime = 6,
        lookup = 7,
        boolean = 8,
        user = 9,
        url = 10,
        calculated = 11,
        location = 12,
        geolocation = 13,
        term = 14,
        multiterm = 15,
        thumbnail = 16,
        approvalStatus = 17,
        unknownFutureValue = 18,
    };

    enum class driveItemSourceApplication {
        teams = 0,
        yammer = 1,
        sharePoint = 2,
        oneDrive = 3,
        stream = 4,
        powerPoint = 5,
        office = 6,
        unknownFutureValue = 7,
    };

    enum class mediaSourceContentCategory {
        meeting = 0,
        liveStream = 1,
        presentation = 2,
        screenRecording = 3,
        unknownFutureValue = 4,
    };

    enum class agentStatus {
        active = 0,
        inactive = 1,
    };

    enum class connectorGroupRegion {
        nam = 0,
        eur = 1,
        aus = 2,
        asia = 3,
        ind = 4,
        unknownFutureValue = 5,
    };

    enum class connectorGroupType {
        applicationProxy = 0,
    };

    enum class connectorStatus {
        active = 0,
        inactive = 1,
    };

    enum class externalAuthenticationType {
        passthru = 0,
        aadPreAuthentication = 1,
    };

    enum class kerberosSignOnMappingAttributeType {
        userPrincipalName = 0,
        onPremisesUserPrincipalName = 1,
        userPrincipalUsername = 2,
        onPremisesUserPrincipalUsername = 3,
        onPremisesSAMAccountName = 4,
    };

    enum class onPremisesPublishingType {
        applicationProxy = 0,
        exchangeOnline = 1,
        authentication = 2,
        provisioning = 3,
        intunePfx = 4,
        oflineDomainJoin = 5,
        unknownFutureValue = 6,
    };

    enum class singleSignOnMode {
        none = 0,
        onPremisesKerberos = 1,
        saml = 3,
        pingHeaderBased = 4,
        aadHeaderBased = 5,
        unknownFutureValue = 6,
    };

    enum class stagedFeatureName {
        passthroughAuthentication = 0,
        seamlessSso = 1,
        passwordHashSync = 2,
        emailAsAlternateId = 3,
        unknownFutureValue = 4,
    };

    enum class MembershipRuleProcessingStatusDetails {
        NotStarted = 0,
        Running = 1,
        Failed = 2,
        Succeeded = 3,
        UnsupportedFutureValue = 4,
    };

    enum class attributeFlowBehavior {
        FlowWhenChanged = 0,
        FlowAlways = 1,
    };

    enum class attributeFlowType {
        Always = 0,
        ObjectAddOnly = 1,
        MultiValueAddOnly = 2,
        ValueAddOnly = 3,
        AttributeAddOnly = 4,
    };

    enum class attributeMappingSourceType {
        Attribute = 0,
        Constant = 1,
        Function = 2,
    };

    enum class attributeType {
        String = 0,
        Integer = 1,
        Reference = 2,
        Binary = 3,
        Boolean = 4,
        DateTime = 5,
    };

    enum class directoryDefinitionDiscoverabilities {
        None = 0,
        AttributeNames = 1,
        AttributeDataTypes = 2,
        AttributeReadOnly = 4,
        ReferenceAttributes = 8,
        UnknownFutureValue = 16,
    };

    enum class entryExportStatus {
        Noop = 0,
        Success = 1,
        RetryableError = 2,
        PermanentError = 3,
        Error = 4,
    };

    enum class entrySyncOperation {
        None = 0,
        Add = 1,
        Delete = 2,
        Update = 3,
    };

    enum class mutability {
        ReadWrite = 0,
        ReadOnly = 1,
        Immutable = 2,
        WriteOnly = 3,
    };

    enum class objectFlowTypes {
        None = 0,
        Add = 1,
        Update = 2,
        Delete = 4,
    };

    enum class quarantineReason {
        EncounteredBaseEscrowThreshold = 0,
        EncounteredTotalEscrowThreshold = 1,
        EncounteredEscrowProportionThreshold = 2,
        EncounteredQuarantineException = 4,
        Unknown = 8,
        QuarantinedOnDemand = 16,
        TooManyDeletes = 32,
        IngestionInterrupted = 64,
    };

    enum class scopeOperatorMultiValuedComparisonType {
        All = 0,
        Any = 1,
    };

    enum class scopeOperatorType {
        Binary = 0,
        Unary = 1,
    };

    enum class synchronizationJobRestartScope {
        None = 0,
        ConnectorDataStore = 1,
        Escrows = 2,
        Watermark = 4,
        QuarantineState = 8,
        Full = 15,
        ForceDeletes = 32,
    };

    enum class synchronizationScheduleState {
        Active = 0,
        Disabled = 1,
        Paused = 2,
    };

    enum class synchronizationSecret {
        None = 0,
        UserName = 1,
        Password = 2,
        SecretToken = 3,
        AppKey = 4,
        BaseAddress = 5,
        ClientIdentifier = 6,
        ClientSecret = 7,
        SingleSignOnType = 11,
        Sandbox = 12,
        Url = 13,
        Domain = 14,
        ConsumerKey = 15,
        ConsumerSecret = 16,
        TokenKey = 17,
        TokenExpiration = 18,
        Oauth2AccessToken = 19,
        Oauth2AccessTokenCreationTime = 20,
        Oauth2RefreshToken = 21,
        SyncAll = 22,
        InstanceName = 24,
        Oauth2ClientId = 27,
        Oauth2ClientSecret = 28,
        CompanyId = 29,
        UpdateKeyOnSoftDelete = 30,
        SynchronizationSchedule = 33,
        SystemOfRecord = 34,
        SandboxName = 35,
        EnforceDomain = 36,
        SyncNotificationSettings = 37,
        SkipOutOfScopeDeletions = 40,
        Oauth2AuthorizationCode = 62,
        Oauth2RedirectUri = 63,
        ApplicationTemplateIdentifier = 64,
        Oauth2TokenExchangeUri = 65,
        Oauth2AuthorizationUri = 66,
        AuthenticationType = 67,
        Server = 70,
        PerformInboundEntitlementGrants = 100,
        HardDeletesEnabled = 101,
        SyncAgentCompatibilityKey = 102,
        SyncAgentADContainer = 103,
        ValidateDomain = 206,
        TestReferences = 207,
        ConnectionString = 250,
    };

    enum class synchronizationStatusCode {
        NotConfigured = 0,
        NotRun = 1,
        Active = 2,
        Paused = 3,
        Quarantine = 4,
    };

    enum class synchronizationTaskExecutionResult {
        Succeeded = 0,
        Failed = 1,
        EntryLevelErrors = 2,
    };

    enum class accessReviewHistoryDecisionFilter {
        approve = 0,
        deny = 1,
        notReviewed = 2,
        dontKnow = 3,
        notNotified = 4,
        unknownFutureValue = 5,
    };

    enum class accessReviewHistoryStatus {
        done = 0,
        inprogress = 1,
        error = 2,
        requested = 3,
        unknownFutureValue = 4,
    };

    enum class accessReviewInstanceDecisionItemFilterByCurrentUserOptions {
        reviewer = 1,
        unknownFutureValue = 2,
    };

    enum class accessReviewInstanceFilterByCurrentUserOptions {
        reviewer = 1,
        unknownFutureValue = 2,
    };

    enum class accessReviewScheduleDefinitionFilterByCurrentUserOptions {
        reviewer = 1,
        unknownFutureValue = 2,
    };

    enum class approvalFilterByCurrentUserOptions {
        target = 0,
        createdBy = 1,
        approver = 2,
        unknownFutureValue = 3,
    };

    enum class consentRequestFilterByCurrentUserOptions {
        reviewer = 0,
        unknownFutureValue = 1,
    };

    enum class agreementAcceptanceState {
        accepted = 2,
        declined = 3,
        unknownFutureValue = 5,
    };

    enum class activityType {
        signin = 0,
        user = 1,
        unknownFutureValue = 2,
    };

    enum class cloudAppSecuritySessionControlType {
        mcasConfigured = 0,
        monitorOnly = 1,
        blockDownloads = 2,
        unknownFutureValue = 3,
    };

    enum class conditionalAccessClientApp {
        all = 0,
        browser = 1,
        mobileAppsAndDesktopClients = 2,
        exchangeActiveSync = 3,
        easSupported = 4,
        other = 5,
        unknownFutureValue = 6,
    };

    enum class conditionalAccessDevicePlatform {
        android = 0,
        iOS = 1,
        windows = 2,
        windowsPhone = 3,
        macOS = 4,
        all = 5,
        unknownFutureValue = 6,
    };

    enum class conditionalAccessGrantControl {
        block = 0,
        mfa = 1,
        compliantDevice = 2,
        domainJoinedDevice = 3,
        approvedApplication = 4,
        compliantApplication = 5,
        passwordChange = 6,
        unknownFutureValue = 7,
    };

    enum class conditionalAccessPolicyState {
        enabled = 0,
        disabled = 1,
        enabledForReportingButNotEnforced = 2,
    };

    enum class countryLookupMethodType {
        clientIpAddress = 0,
        authenticatorAppGps = 1,
        unknownFutureValue = 2,
    };

    enum class filterMode {
        include = 0,
        exclude = 1,
    };

    enum class persistentBrowserSessionMode {
        always = 0,
        never = 1,
    };

    enum class riskDetectionTimingType {
        notDefined = 0,
        realtime = 1,
        nearRealtime = 2,
        offline = 3,
        unknownFutureValue = 4,
    };

    enum class signinFrequencyType {
        days = 0,
        hours = 1,
    };

    enum class accessPackageAssignmentFilterByCurrentUserOptions {
        target = 1,
        createdBy = 2,
        unknownFutureValue = 99,
    };

    enum class accessPackageAssignmentRequestFilterByCurrentUserOptions {
        target = 1,
        createdBy = 2,
        approver = 3,
        unknownFutureValue = 99,
    };

    enum class accessPackageFilterByCurrentUserOptions {
        allowedRequestor = 1,
        unknownFutureValue = 99,
    };

    enum class expirationPatternType {
        notSpecified = 0,
        noExpiration = 1,
        afterDateTime = 2,
        afterDuration = 3,
    };

    enum class connectedOrganizationState {
        configured = 0,
        proposed = 1,
        unknownFutureValue = 2,
    };

    enum class actionSource {
        manual = 0,
        automatic = 1,
        recommended = 2,
        _default = 3,
    };

    enum class assignmentMethod {
        standard = 0,
        privileged = 1,
        _auto = 2,
    };

    enum class contentAlignment {
        left = 0,
        right = 1,
        center = 2,
    };

    enum class contentFormat {
        _default = 0,
        email = 1,
    };

    enum class contentState {
        rest = 0,
        motion = 1,
        use = 2,
    };

    enum class watermarkLayout {
        horizontal = 0,
        diagonal = 1,
    };

    enum class androidDeviceOwnerEnrollmentMode {
        corporateOwnedDedicatedDevice = 0,
        corporateOwnedFullyManaged = 1,
        corporateOwnedWorkProfile = 2,
    };

    enum class androidDeviceOwnerEnrollmentTokenType {
        _default = 0,
        corporateOwnedDedicatedDeviceWithAzureADSharedMode = 1,
    };

    enum class androidForWorkAppConfigurationSchemaItemDataType {
        _bool = 0,
        integer = 1,
        string = 2,
        choice = 3,
        multiselect = 4,
        bundle = 5,
        bundleArray = 6,
        hidden = 7,
    };

    enum class androidForWorkBindStatus {
        notBound = 0,
        bound = 1,
        boundAndValidated = 2,
        unbinding = 3,
    };

    enum class androidForWorkEnrollmentTarget {
        none = 0,
        all = 1,
        targeted = 2,
        targetedAsEnrollmentRestrictions = 3,
    };

    enum class androidForWorkSyncStatus {
        success = 0,
        credentialsNotValid = 1,
        androidForWorkApiError = 2,
        managementServiceError = 3,
        unknownError = 4,
        none = 5,
    };

    enum class androidManagedStoreAccountAppSyncStatus {
        success = 0,
        credentialsNotValid = 1,
        androidForWorkApiError = 2,
        managementServiceError = 3,
        unknownError = 4,
        none = 5,
    };

    enum class androidManagedStoreAccountBindStatus {
        notBound = 0,
        bound = 1,
        boundAndValidated = 2,
        unbinding = 3,
    };

    enum class androidManagedStoreAccountEnrollmentTarget {
        none = 0,
        all = 1,
        targeted = 2,
        targetedAsEnrollmentRestrictions = 3,
    };

    enum class androidManagedStoreAppConfigurationSchemaItemDataType {
        _bool = 0,
        integer = 1,
        string = 2,
        choice = 3,
        multiselect = 4,
        bundle = 5,
        bundleArray = 6,
        hidden = 7,
    };

    enum class androidPermissionActionType {
        prompt = 0,
        autoGrant = 1,
        autoDeny = 2,
    };

    enum class androidProfileApplicability {
        _default = 0,
        androidWorkProfile = 1,
        androidDeviceOwner = 2,
    };

    enum class certificateStatus {
        notProvisioned = 0,
        provisioned = 1,
    };

    enum class complianceStatus {
        unknown = 0,
        notApplicable = 1,
        compliant = 2,
        remediated = 3,
        nonCompliant = 4,
        error = 5,
        conflict = 6,
        notAssigned = 7,
    };

    enum class deviceAndAppManagementAssignmentFilterType {
        none = 0,
        include = 1,
        exclude = 2,
    };

    enum class deviceAndAppManagementAssignmentSource {
        direct = 0,
        policySets = 1,
    };

    enum class installIntent {
        available = 0,
        required = 1,
        uninstall = 2,
        availableWithoutEnrollment = 3,
    };

    enum class managedAppAvailability {
        global = 0,
        lineOfBusiness = 1,
    };

    enum class mdmAppConfigKeyType {
        stringType = 0,
        integerType = 1,
        realType = 2,
        booleanType = 3,
        tokenType = 4,
    };

    enum class microsoftEdgeChannel {
        dev = 0,
        beta = 1,
        stable = 2,
    };

    enum class microsoftStoreForBusinessLicenseType {
        offline = 0,
        online = 1,
    };

    enum class mobileAppContentFileUploadState {
        success = 0,
        transientError = 1,
        error = 2,
        unknown = 3,
        azureStorageUriRequestSuccess = 100,
        azureStorageUriRequestPending = 101,
        azureStorageUriRequestFailed = 102,
        azureStorageUriRequestTimedOut = 103,
        azureStorageUriRenewalSuccess = 200,
        azureStorageUriRenewalPending = 201,
        azureStorageUriRenewalFailed = 202,
        azureStorageUriRenewalTimedOut = 203,
        commitFileSuccess = 300,
        commitFilePending = 301,
        commitFileFailed = 302,
        commitFileTimedOut = 303,
    };

    enum class mobileAppDependencyType {
        detect = 0,
        autoInstall = 1,
    };

    enum class mobileAppPublishingState {
        notPublished = 0,
        processing = 1,
        published = 2,
    };

    enum class mobileAppRelationshipType {
        child = 0,
        parent = 1,
    };

    enum class mobileAppSupersedenceType {
        update = 0,
        replace = 1,
    };

    enum class officeProductId {
        o365ProPlusRetail = 0,
        o365BusinessRetail = 1,
        visioProRetail = 2,
        projectProRetail = 3,
    };

    enum class officeSuiteInstallProgressDisplayLevel {
        none = 0,
        full = 1,
    };

    enum class officeUpdateChannel {
        none = 0,
        current = 1,
        deferred = 2,
        firstReleaseCurrent = 3,
        firstReleaseDeferred = 4,
        monthlyEnterprise = 5,
    };

    enum class resultantAppState {
        notApplicable = -1,
        installed = 1,
        failed = 2,
        notInstalled = 3,
        uninstallFailed = 4,
        pendingInstall = 5,
        unknown = 99,
    };

    enum class resultantAppStateDetail {
        processorArchitectureNotApplicable = -1000,
        minimumDiskSpaceNotMet = -1001,
        minimumOsVersionNotMet = -1002,
        minimumPhysicalMemoryNotMet = -1003,
        minimumLogicalProcessorCountNotMet = -1004,
        minimumCpuSpeedNotMet = -1005,
        platformNotApplicable = -1006,
        fileSystemRequirementNotMet = -1011,
        registryRequirementNotMet = -1012,
        powerShellScriptRequirementNotMet = -1013,
        supersedingAppsNotApplicable = -1016,
        noAdditionalDetails = 0,
        dependencyFailedToInstall = 1,
        dependencyWithRequirementsNotMet = 2,
        dependencyPendingReboot = 3,
        dependencyWithAutoInstallDisabled = 4,
        supersededAppUninstallFailed = 5,
        supersededAppUninstallPendingReboot = 6,
        removingSupersededApps = 7,
        iosAppStoreUpdateFailedToInstall = 1000,
        vppAppHasUpdateAvailable = 1001,
        userRejectedUpdate = 1002,
        uninstallPendingReboot = 1003,
        supersedingAppsDetected = 1004,
        supersededAppsDetected = 1005,
        seeInstallErrorCode = 2000,
        autoInstallDisabled = 3000,
        managedAppNoLongerPresent = 3001,
        userRejectedInstall = 3002,
        userIsNotLoggedIntoAppStore = 3003,
        untargetedSupersedingAppsDetected = 3004,
        appRemovedBySupersedence = 3005,
        seeUninstallErrorCode = 4000,
        pendingReboot = 5000,
        installingDependencies = 5001,
        contentDownloaded = 5002,
    };

    enum class runAsAccountType {
        system = 0,
        user = 1,
    };

    enum class vppTokenAccountType {
        business = 0,
        education = 1,
    };

    enum class vppTokenActionFailureReason {
        none = 0,
        appleFailure = 1,
        internalError = 2,
        expiredVppToken = 3,
        expiredApplePushNotificationCertificate = 4,
    };

    enum class win32LobAppDeliveryOptimizationPriority {
        notConfigured = 0,
        foreground = 1,
    };

    enum class win32LobAppDetectionOperator {
        notConfigured = 0,
        equal = 1,
        notEqual = 2,
        greaterThan = 4,
        greaterThanOrEqual = 5,
        lessThan = 8,
        lessThanOrEqual = 9,
    };

    enum class win32LobAppFileSystemDetectionType {
        notConfigured = 0,
        exists = 1,
        modifiedDate = 2,
        createdDate = 3,
        version = 4,
        sizeInMB = 5,
        doesNotExist = 6,
    };

    enum class win32LobAppFileSystemOperationType {
        notConfigured = 0,
        exists = 1,
        modifiedDate = 2,
        createdDate = 3,
        version = 4,
        sizeInMB = 5,
        doesNotExist = 6,
    };

    enum class win32LobAppMsiPackageType {
        perMachine = 0,
        perUser = 1,
        dualPurpose = 2,
    };

    enum class win32LobAppNotification {
        showAll = 0,
        showReboot = 1,
        hideAll = 2,
    };

    enum class win32LobAppPowerShellScriptDetectionType {
        notConfigured = 0,
        string = 1,
        dateTime = 2,
        integer = 3,
        _float = 4,
        version = 5,
        boolean = 6,
    };

    enum class win32LobAppPowerShellScriptRuleOperationType {
        notConfigured = 0,
        string = 1,
        dateTime = 2,
        integer = 3,
        _float = 4,
        version = 5,
        boolean = 6,
    };

    enum class win32LobAppRegistryDetectionType {
        notConfigured = 0,
        exists = 1,
        doesNotExist = 2,
        string = 3,
        integer = 4,
        version = 5,
    };

    enum class win32LobAppRegistryRuleOperationType {
        notConfigured = 0,
        exists = 1,
        doesNotExist = 2,
        string = 3,
        integer = 4,
        version = 5,
    };

    enum class win32LobAppRestartBehavior {
        basedOnReturnCode = 0,
        allow = 1,
        suppress = 2,
        force = 3,
    };

    enum class win32LobAppReturnCodeType {
        failed = 0,
        success = 1,
        softReboot = 2,
        hardReboot = 3,
        retry = 4,
    };

    enum class win32LobAppRuleOperator {
        notConfigured = 0,
        equal = 1,
        notEqual = 2,
        greaterThan = 4,
        greaterThanOrEqual = 5,
        lessThan = 8,
        lessThanOrEqual = 9,
    };

    enum class win32LobAppRuleType {
        detection = 0,
        requirement = 1,
    };

    enum class windowsArchitecture {
        none = 0,
        x86 = 1,
        x64 = 2,
        arm = 4,
        neutral = 8,
        arm64 = 16,
    };

    enum class windowsDeviceType {
        none = 0,
        desktop = 1,
        mobile = 2,
        holographic = 4,
        team = 8,
    };

    enum class installState {
        notApplicable = 0,
        installed = 1,
        failed = 2,
        notInstalled = 3,
        uninstallFailed = 4,
        unknown = 5,
    };

    enum class assignmentFilterEvaluationResult {
        unknown = 0,
        match = 1,
        notMatch = 2,
        inconclusive = 3,
        failure = 4,
        notEvaluated = 5,
    };

    enum class assignmentFilterOperator {
        notSet = 0,
        equals = 1,
        notEquals = 2,
        startsWith = 3,
        notStartsWith = 4,
        contains = 5,
        notContains = 6,
        in = 7,
        notIn = 8,
        endsWith = 9,
        notEndsWith = 10,
    };

    enum class assignmentFilterPayloadType {
        notSet = 0,
        enrollmentRestrictions = 1,
    };

    enum class devicePlatformType {
        android = 0,
        androidForWork = 1,
        iOS = 2,
        macOS = 3,
        windowsPhone81 = 4,
        windows81AndLater = 5,
        windows10AndLater = 6,
        androidWorkProfile = 7,
        unknown = 8,
        androidAOSP = 9,
    };

    enum class errorCode {
        noError = 0,
        unauthorized = 1,
        notFound = 2,
        deleted = 3,
    };

    enum class policySetStatus {
        unknown = 0,
        validating = 1,
        partialSuccess = 2,
        success = 3,
        error = 4,
        notAssigned = 5,
    };

    enum class chromeOSOnboardingStatus {
        unknown = 0,
        inprogress = 1,
        onboarded = 2,
        failed = 3,
    };

    enum class onboardingStatus {
        unknown = 0,
        inprogress = 1,
        onboarded = 2,
        failed = 3,
    };

    enum class administratorConfiguredDeviceComplianceState {
        basedOnDeviceCompliancePolicy = 0,
        nonCompliant = 1,
    };

    enum class advancedBitLockerState {
        success = 0,
        noUserConsent = 1,
        osVolumeUnprotected = 2,
        osVolumeTpmRequired = 4,
        osVolumeTpmOnlyRequired = 8,
        osVolumeTpmPinRequired = 16,
        osVolumeTpmStartupKeyRequired = 32,
        osVolumeTpmPinStartupKeyRequired = 64,
        osVolumeEncryptionMethodMismatch = 128,
        recoveryKeyBackupFailed = 256,
        fixedDriveNotEncrypted = 512,
        fixedDriveEncryptionMethodMismatch = 1024,
        loggedOnUserNonAdmin = 2048,
        windowsRecoveryEnvironmentNotConfigured = 4096,
        tpmNotAvailable = 8192,
        tpmNotReady = 16384,
        networkError = 32768,
    };

    enum class androidDeviceOwnerAppAutoUpdatePolicyType {
        notConfigured = 0,
        userChoice = 1,
        never = 2,
        wiFiOnly = 3,
        always = 4,
    };

    enum class androidDeviceOwnerBatteryPluggedMode {
        notConfigured = 0,
        ac = 1,
        usb = 2,
        wireless = 3,
    };

    enum class androidDeviceOwnerDefaultAppPermissionPolicyType {
        deviceDefault = 0,
        prompt = 1,
        autoGrant = 2,
        autoDeny = 3,
    };

    enum class androidDeviceOwnerEnrollmentProfileType {
        notConfigured = 0,
        dedicatedDevice = 1,
        fullyManaged = 2,
    };

    enum class androidDeviceOwnerKioskCustomizationStatusBar {
        notConfigured = 0,
        notificationsAndSystemInfoEnabled = 1,
        systemInfoOnly = 2,
    };

    enum class androidDeviceOwnerKioskCustomizationSystemNavigation {
        notConfigured = 0,
        navigationEnabled = 1,
        homeButtonOnly = 2,
    };

    enum class androidDeviceOwnerKioskModeFolderIcon {
        notConfigured = 0,
        darkSquare = 1,
        darkCircle = 2,
        lightSquare = 3,
        lightCircle = 4,
    };

    enum class androidDeviceOwnerKioskModeIconSize {
        notConfigured = 0,
        smallest = 1,
        small = 2,
        regular = 3,
        large = 4,
        largest = 5,
    };

    enum class androidDeviceOwnerKioskModeScreenOrientation {
        notConfigured = 0,
        portrait = 1,
        landscape = 2,
        autoRotate = 3,
    };

    enum class androidDeviceOwnerPlayStoreMode {
        notConfigured = 0,
        allowList = 1,
        blockList = 2,
    };

    enum class androidDeviceOwnerRequiredPasswordType {
        deviceDefault = 0,
        required = 1,
        numeric = 2,
        numericComplex = 3,
        alphabetic = 4,
        alphanumeric = 5,
        alphanumericWithSymbols = 6,
        lowSecurityBiometric = 7,
        customPassword = 8,
    };

    enum class androidDeviceOwnerSystemUpdateInstallType {
        deviceDefault = 0,
        postpone = 1,
        windowed = 2,
        automatic = 3,
    };

    enum class androidDeviceOwnerVirtualHomeButtonType {
        notConfigured = 0,
        swipeUp = 1,
        floating = 2,
    };

    enum class androidDeviceOwnerWiFiSecurityType {
        open = 0,
        wep = 1,
        wpaPersonal = 2,
        wpaEnterprise = 4,
    };

    enum class androidEapType {
        eapTls = 13,
        eapTtls = 21,
        peap = 25,
    };

    enum class androidForWorkCrossProfileDataSharingType {
        deviceDefault = 0,
        preventAny = 1,
        allowPersonalToWork = 2,
        noRestrictions = 3,
    };

    enum class androidForWorkDefaultAppPermissionPolicyType {
        deviceDefault = 0,
        prompt = 1,
        autoGrant = 2,
        autoDeny = 3,
    };

    enum class androidForWorkRequiredPasswordType {
        deviceDefault = 0,
        lowSecurityBiometric = 1,
        required = 2,
        atLeastNumeric = 3,
        numericComplex = 4,
        atLeastAlphabetic = 5,
        atLeastAlphanumeric = 6,
        alphanumericWithSymbols = 7,
    };

    enum class androidForWorkVpnConnectionType {
        ciscoAnyConnect = 0,
        pulseSecure = 1,
        f5EdgeClient = 2,
        dellSonicWallMobileConnect = 3,
        checkPointCapsuleVpn = 4,
        citrix = 5,
    };

    enum class androidKeyguardFeature {
        notConfigured = 0,
        camera = 1,
        notifications = 2,
        unredactedNotifications = 3,
        trustAgents = 4,
        fingerprint = 5,
        remoteInput = 6,
        allFeatures = 7,
    };

    enum class androidRequiredPasswordComplexity {
        none = 0,
        low = 1,
        medium = 2,
        high = 3,
    };

    enum class androidRequiredPasswordType {
        deviceDefault = 0,
        alphabetic = 1,
        alphanumeric = 2,
        alphanumericWithSymbols = 3,
        lowSecurityBiometric = 4,
        numeric = 5,
        numericComplex = 6,
        any = 7,
    };

    enum class androidSafetyNetEvaluationType {
        basic = 0,
        hardwareBacked = 1,
    };

    enum class androidUsernameSource {
        username = 0,
        userPrincipalName = 1,
        samAccountName = 2,
        primarySmtpAddress = 3,
    };

    enum class androidVpnConnectionType {
        ciscoAnyConnect = 0,
        pulseSecure = 1,
        f5EdgeClient = 2,
        dellSonicWallMobileConnect = 3,
        checkPointCapsuleVpn = 4,
        citrix = 5,
        microsoftTunnel = 7,
        netMotionMobility = 8,
        microsoftProtect = 9,
    };

    enum class androidWiFiSecurityType {
        open = 0,
        wpaEnterprise = 1,
        wpa2Enterprise = 2,
    };

    enum class androidWorkProfileCrossProfileDataSharingType {
        deviceDefault = 0,
        preventAny = 1,
        allowPersonalToWork = 2,
        noRestrictions = 3,
    };

    enum class androidWorkProfileDefaultAppPermissionPolicyType {
        deviceDefault = 0,
        prompt = 1,
        autoGrant = 2,
        autoDeny = 3,
    };

    enum class androidWorkProfileRequiredPasswordType {
        deviceDefault = 0,
        lowSecurityBiometric = 1,
        required = 2,
        atLeastNumeric = 3,
        numericComplex = 4,
        atLeastAlphabetic = 5,
        atLeastAlphanumeric = 6,
        alphanumericWithSymbols = 7,
    };

    enum class androidWorkProfileVpnConnectionType {
        ciscoAnyConnect = 0,
        pulseSecure = 1,
        f5EdgeClient = 2,
        dellSonicWallMobileConnect = 3,
        checkPointCapsuleVpn = 4,
        citrix = 5,
        paloAltoGlobalProtect = 6,
        microsoftTunnel = 7,
        netMotionMobility = 8,
        microsoftProtect = 9,
    };

    enum class appInstallControlType {
        notConfigured = 0,
        anywhere = 1,
        storeOnly = 2,
        recommendations = 3,
        preferStore = 4,
    };

    enum class appleDeploymentChannel {
        deviceChannel = 0,
        userChannel = 1,
    };

    enum class appleSubjectNameFormat {
        commonName = 0,
        commonNameAsEmail = 1,
        custom = 2,
        commonNameIncludingEmail = 3,
        commonNameAsIMEI = 5,
        commonNameAsSerialNumber = 6,
    };

    enum class appleVpnConnectionType {
        ciscoAnyConnect = 0,
        pulseSecure = 1,
        f5EdgeClient = 2,
        dellSonicWallMobileConnect = 3,
        checkPointCapsuleVpn = 4,
        customVpn = 5,
        ciscoIPSec = 6,
        citrix = 7,
        ciscoAnyConnectV2 = 8,
        paloAltoGlobalProtect = 9,
        zscalerPrivateAccess = 10,
        f5Access2018 = 11,
        citrixSso = 12,
        paloAltoGlobalProtectV2 = 13,
        ikEv2 = 14,
        alwaysOn = 15,
        microsoftTunnel = 16,
        netMotionMobility = 17,
        microsoftProtect = 18,
    };

    enum class applicationGuardBlockClipboardSharingType {
        notConfigured = 0,
        blockBoth = 1,
        blockHostToContainer = 2,
        blockContainerToHost = 3,
        blockNone = 4,
    };

    enum class applicationGuardBlockFileTransferType {
        notConfigured = 0,
        blockImageAndTextFile = 1,
        blockImageFile = 2,
        blockNone = 3,
        blockTextFile = 4,
    };

    enum class applicationGuardEnabledOptions {
        notConfigured = 0,
        enabledForEdge = 1,
        enabledForOffice = 2,
        enabledForEdgeAndOffice = 3,
    };

    enum class appListType {
        none = 0,
        appsInListCompliant = 1,
        appsNotInListCompliant = 2,
    };

    enum class appLockerApplicationControlType {
        notConfigured = 0,
        enforceComponentsAndStoreApps = 1,
        auditComponentsAndStoreApps = 2,
        enforceComponentsStoreAppsAndSmartlocker = 3,
        auditComponentsStoreAppsAndSmartlocker = 4,
    };

    enum class authenticationTransformConstant {
        md5_96 = 0,
        sha1_96 = 1,
        sha_256_128 = 2,
        aes128Gcm = 3,
        aes192Gcm = 4,
        aes256Gcm = 5,
    };

    enum class automaticUpdateMode {
        userDefined = 0,
        notifyDownload = 1,
        autoInstallAtMaintenanceTime = 2,
        autoInstallAndRebootAtMaintenanceTime = 3,
        autoInstallAndRebootAtScheduledTime = 4,
        autoInstallAndRebootWithoutEndUserControl = 5,
        windowsDefault = 6,
    };

    enum class autoRestartNotificationDismissalMethod {
        notConfigured = 0,
        automatic = 1,
        user = 2,
    };

    enum class bitLockerEncryptionMethod {
        aesCbc128 = 3,
        aesCbc256 = 4,
        xtsAes128 = 6,
        xtsAes256 = 7,
    };

    enum class bitLockerRecoveryInformationType {
        passwordAndKey = 1,
        passwordOnly = 2,
    };

    enum class bitLockerRecoveryPasswordRotationType {
        notConfigured = 0,
        disabled = 1,
        enabledForAzureAd = 2,
        enabledForAzureAdAndHybrid = 3,
    };

    enum class browserSyncSetting {
        notConfigured = 0,
        blockedWithUserOverride = 1,
        blocked = 2,
    };

    enum class certificateDestinationStore {
        computerCertStoreRoot = 0,
        computerCertStoreIntermediate = 1,
        userCertStoreIntermediate = 2,
    };

    enum class certificateIssuanceStates {
        unknown = 0,
        challengeIssued = 1,
        challengeIssueFailed = 2,
        requestCreationFailed = 3,
        requestSubmitFailed = 4,
        challengeValidationSucceeded = 5,
        challengeValidationFailed = 6,
        issueFailed = 7,
        issuePending = 8,
        issued = 9,
        responseProcessingFailed = 10,
        responsePending = 11,
        enrollmentSucceeded = 12,
        enrollmentNotNeeded = 13,
        revoked = 14,
        removedFromCollection = 15,
        renewVerified = 16,
        installFailed = 17,
        installed = 18,
        deleteFailed = 19,
        deleted = 20,
        renewalRequested = 21,
        requested = 22,
    };

    enum class certificateRevocationStatus {
        none = 0,
        pending = 1,
        issued = 2,
        failed = 3,
        revoked = 4,
    };

    enum class certificateStore {
        user = 1,
        machine = 2,
    };

    enum class certificateValidityPeriodScale {
        days = 0,
        months = 1,
        years = 2,
    };

    enum class changeUefiSettingsPermission {
        notConfiguredOnly = 0,
        none = 1,
    };

    enum class code {
        none = 0,
        jsonFileInvalid = 1,
        jsonFileMissing = 2,
        jsonFileTooLarge = 3,
        rulesMissing = 4,
        duplicateRules = 5,
        tooManyRulesSpecified = 6,
        operatorMissing = 7,
        operatorNotSupported = 8,
        datatypeMissing = 9,
        datatypeNotSupported = 10,
        operatorDataTypeCombinationNotSupported = 11,
        moreInfoUriMissing = 12,
        moreInfoUriInvalid = 13,
        moreInfoUriTooLarge = 14,
        descriptionMissing = 15,
        descriptionInvalid = 16,
        descriptionTooLarge = 17,
        titleMissing = 18,
        titleInvalid = 19,
        titleTooLarge = 20,
        operandMissing = 21,
        operandInvalid = 22,
        operandTooLarge = 23,
        settingNameMissing = 24,
        settingNameInvalid = 25,
        settingNameTooLarge = 26,
        englishLocaleMissing = 27,
        duplicateLocales = 28,
        unrecognizedLocale = 29,
        unknown = 30,
        remediationStringsMissing = 31,
    };

    enum class configurationUsage {
        blocked = 0,
        required = 1,
        allowed = 2,
        notConfigured = 3,
    };

    enum class dataType {
        none = 0,
        boolean = 1,
        int64 = 2,
        _double = 3,
        string = 4,
        dateTime = 5,
        version = 6,
        base64 = 7,
        xml = 8,
        booleanArray = 9,
        int64Array = 10,
        doubleArray = 11,
        stringArray = 12,
        dateTimeArray = 13,
        versionArray = 14,
    };

    enum class defenderAttackSurfaceType {
        userDefined = 0,
        block = 1,
        auditMode = 2,
        warn = 6,
        disable = 99,
    };

    enum class defenderCloudBlockLevelType {
        notConfigured = 0,
        high = 1,
        highPlus = 2,
        zeroTolerance = 3,
    };

    enum class defenderMonitorFileActivity {
        userDefined = 0,
        disable = 1,
        monitorAllFiles = 2,
        monitorIncomingFilesOnly = 3,
        monitorOutgoingFilesOnly = 4,
    };

    enum class defenderPotentiallyUnwantedAppAction {
        deviceDefault = 0,
        block = 1,
        audit = 2,
    };

    enum class defenderPromptForSampleSubmission {
        userDefined = 0,
        alwaysPrompt = 1,
        promptBeforeSendingPersonalData = 2,
        neverSendData = 3,
        sendAllDataWithoutPrompting = 4,
    };

    enum class defenderProtectionType {
        userDefined = 0,
        enable = 1,
        auditMode = 2,
        warn = 6,
        notConfigured = 99,
    };

    enum class defenderRealtimeScanDirection {
        monitorAllFiles = 0,
        monitorIncomingFilesOnly = 1,
        monitorOutgoingFilesOnly = 2,
    };

    enum class defenderScanType {
        userDefined = 0,
        disabled = 1,
        quick = 2,
        full = 3,
    };

    enum class defenderSecurityCenterITContactDisplayType {
        notConfigured = 0,
        displayInAppAndInNotifications = 1,
        displayOnlyInApp = 2,
        displayOnlyInNotifications = 3,
    };

    enum class defenderSecurityCenterNotificationsFromAppType {
        notConfigured = 0,
        blockNoncriticalNotifications = 1,
        blockAllNotifications = 2,
    };

    enum class defenderSubmitSamplesConsentType {
        sendSafeSamplesAutomatically = 0,
        alwaysPrompt = 1,
        neverSend = 2,
        sendAllSamplesAutomatically = 3,
    };

    enum class defenderThreatAction {
        deviceDefault = 0,
        clean = 1,
        quarantine = 2,
        remove = 3,
        allow = 4,
        userDefined = 5,
        block = 6,
    };

    enum class deliveryOptimizationGroupIdOptionsType {
        notConfigured = 0,
        adSite = 1,
        authenticatedDomainSid = 2,
        dhcpUserOption = 3,
        dnsSuffix = 4,
    };

    enum class deliveryOptimizationRestrictPeerSelectionByOptions {
        notConfigured = 0,
        subnetMask = 1,
    };

    enum class derivedCredentialProviderType {
        notConfigured = 0,
        entrustDataCard = 1,
        purebred = 2,
        xTec = 3,
        intercede = 4,
    };

    enum class deviceComplianceActionType {
        noAction = 0,
        notification = 1,
        block = 2,
        retire = 3,
        wipe = 4,
        removeResourceAccessProfiles = 5,
        pushNotification = 9,
        remoteLock = 10,
    };

    enum class deviceComplianceScriptRuleDataType {
        none = 0,
        boolean = 1,
        int64 = 2,
        _double = 3,
        string = 4,
        dateTime = 5,
        version = 6,
        base64 = 7,
        xml = 8,
        booleanArray = 9,
        int64Array = 10,
        doubleArray = 11,
        stringArray = 12,
        dateTimeArray = 13,
        versionArray = 14,
    };

    enum class deviceComplianceScriptRulesValidationError {
        none = 0,
        jsonFileInvalid = 1,
        jsonFileMissing = 2,
        jsonFileTooLarge = 3,
        rulesMissing = 4,
        duplicateRules = 5,
        tooManyRulesSpecified = 6,
        operatorMissing = 7,
        operatorNotSupported = 8,
        datatypeMissing = 9,
        datatypeNotSupported = 10,
        operatorDataTypeCombinationNotSupported = 11,
        moreInfoUriMissing = 12,
        moreInfoUriInvalid = 13,
        moreInfoUriTooLarge = 14,
        descriptionMissing = 15,
        descriptionInvalid = 16,
        descriptionTooLarge = 17,
        titleMissing = 18,
        titleInvalid = 19,
        titleTooLarge = 20,
        operandMissing = 21,
        operandInvalid = 22,
        operandTooLarge = 23,
        settingNameMissing = 24,
        settingNameInvalid = 25,
        settingNameTooLarge = 26,
        englishLocaleMissing = 27,
        duplicateLocales = 28,
        unrecognizedLocale = 29,
        unknown = 30,
        remediationStringsMissing = 31,
    };

    enum class deviceComplianceScriptRulOperator {
        none = 0,
        _and = 1,
        _or = 2,
        isEquals = 3,
        notEquals = 4,
        greaterThan = 5,
        lessThan = 6,
        between = 7,
        notBetween = 8,
        greaterEquals = 9,
        lessEquals = 10,
        dayTimeBetween = 11,
        beginsWith = 12,
        notBeginsWith = 13,
        endsWith = 14,
        notEndsWith = 15,
        contains = 16,
        notContains = 17,
        allOf = 18,
        oneOf = 19,
        noneOf = 20,
        setEquals = 21,
        orderedSetEquals = 22,
        subsetOf = 23,
        excludesAll = 24,
    };

    enum class deviceGuardLocalSystemAuthorityCredentialGuardType {
        notConfigured = 0,
        enableWithUEFILock = 1,
        enableWithoutUEFILock = 2,
        disable = 3,
    };

    enum class deviceManagementApplicabilityRuleType {
        include = 0,
        exclude = 1,
    };

    enum class deviceManagementCertificationAuthority {
        notConfigured = 0,
        microsoft = 1,
        digiCert = 2,
    };

    enum class deviceThreatProtectionLevel {
        unavailable = 0,
        secured = 1,
        low = 2,
        medium = 3,
        high = 4,
        notSet = 10,
    };

    enum class deviceType {
        desktop = 0,
        windowsRT = 1,
        winMO6 = 2,
        nokia = 3,
        windowsPhone = 4,
        mac = 5,
        winCE = 6,
        winEmbedded = 7,
        iPhone = 8,
        iPad = 9,
        iPod = 10,
        android = 11,
        iSocConsumer = 12,
        unix = 13,
        macMDM = 14,
        holoLens = 15,
        surfaceHub = 16,
        androidForWork = 17,
        androidEnterprise = 18,
        windows10x = 19,
        androidnGMS = 20,
        chromeOS = 21,
        linux = 22,
        blackberry = 100,
        palm = 101,
        unknown = 255,
        cloudPC = 257,
    };

    enum class deviceTypes {
        desktop = 0,
        windowsRT = 1,
        winMO6 = 2,
        nokia = 3,
        windowsPhone = 4,
        mac = 5,
        winCE = 6,
        winEmbedded = 7,
        iPhone = 8,
        iPad = 9,
        iPod = 10,
        android = 11,
        iSocConsumer = 12,
        unix = 13,
        macMDM = 14,
        holoLens = 15,
        surfaceHub = 16,
        androidForWork = 17,
        androidEnterprise = 18,
        blackberry = 100,
        palm = 101,
        unknown = 255,
    };

    enum class diagnosticDataSubmissionMode {
        userDefined = 0,
        none = 1,
        basic = 2,
        enhanced = 3,
        full = 4,
    };

    enum class diffieHellmanGroup {
        group1 = 0,
        group2 = 1,
        group14 = 2,
        ecp256 = 3,
        ecp384 = 4,
        group24 = 5,
    };

    enum class dmaGuardDeviceEnumerationPolicyType {
        deviceDefault = 0,
        blockAll = 1,
        allowAll = 2,
    };

    enum class domainNameSource {
        fullDomainName = 0,
        netBiosDomainName = 1,
    };

    enum class eapFastConfiguration {
        noProtectedAccessCredential = 0,
        useProtectedAccessCredential = 1,
        useProtectedAccessCredentialAndProvision = 2,
        useProtectedAccessCredentialAndProvisionAnonymously = 3,
    };

    enum class eapType {
        eapTls = 13,
        leap = 17,
        eapSim = 18,
        eapTtls = 21,
        peap = 25,
        eapFast = 43,
    };

    enum class easAuthenticationMethod {
        usernameAndPassword = 0,
        certificate = 1,
        derivedCredential = 2,
    };

    enum class easServices {
        none = 0,
        calendars = 1,
        contacts = 2,
        email = 4,
        notes = 8,
        reminders = 16,
    };

    enum class edgeCookiePolicy {
        userDefined = 0,
        allow = 1,
        blockThirdParty = 2,
        blockAll = 3,
    };

    enum class edgeKioskModeRestrictionType {
        notConfigured = 0,
        digitalSignage = 1,
        normalMode = 2,
        publicBrowsingSingleApp = 3,
        publicBrowsingMultiApp = 4,
    };

    enum class edgeOpenOptions {
        notConfigured = 0,
        startPage = 1,
        newTabPage = 2,
        previousPages = 3,
        specificPages = 4,
    };

    enum class edgeSearchEngineType {
        _default = 0,
        bing = 1,
    };

    enum class edgeTelemetryMode {
        notConfigured = 0,
        intranet = 1,
        internet = 2,
        intranetAndInternet = 3,
    };

    enum class editionUpgradeLicenseType {
        productKey = 0,
        licenseFile = 1,
        notConfigured = 2,
    };

    enum class emailCertificateType {
        none = 0,
        certificate = 1,
        derivedCredential = 2,
    };

    enum class emailSyncDuration {
        userDefined = 0,
        oneDay = 1,
        threeDays = 2,
        oneWeek = 3,
        twoWeeks = 4,
        oneMonth = 5,
        unlimited = 6,
    };

    enum class emailSyncSchedule {
        userDefined = 0,
        asMessagesArrive = 1,
        manual = 2,
        fifteenMinutes = 3,
        thirtyMinutes = 4,
        sixtyMinutes = 5,
        basedOnMyUsage = 6,
    };

    enum class enablement {
        notConfigured = 0,
        enabled = 1,
        disabled = 2,
    };

    enum class encryptionReadinessState {
        notReady = 0,
        ready = 1,
    };

    enum class encryptionState {
        notEncrypted = 0,
        encrypted = 1,
    };

    enum class fileVaultState {
        success = 0,
        driveEncryptedByUser = 1,
        userDeferredEncryption = 2,
        escrowNotEnabled = 4,
    };

    enum class firewallCertificateRevocationListCheckMethodType {
        deviceDefault = 0,
        none = 1,
        attempt = 2,
        require = 3,
    };

    enum class firewallPacketQueueingMethodType {
        deviceDefault = 0,
        disabled = 1,
        queueInbound = 2,
        queueOutbound = 3,
        queueBoth = 4,
    };

    enum class firewallPreSharedKeyEncodingMethodType {
        deviceDefault = 0,
        none = 1,
        utF8 = 2,
    };

    enum class folderProtectionType {
        userDefined = 0,
        enable = 1,
        auditMode = 2,
        blockDiskModification = 3,
        auditDiskModification = 4,
    };

    enum class hashAlgorithms {
        sha1 = 1,
        sha2 = 2,
    };

    enum class inkAccessSetting {
        notConfigured = 0,
        enabled = 1,
        disabled = 2,
    };

    enum class intendedPurpose {
        unassigned = 1,
        smimeEncryption = 2,
        smimeSigning = 3,
        vpn = 4,
        wifi = 5,
    };

    enum class internetExplorerMessageSetting {
        notConfigured = 0,
        disabled = 1,
        enabled = 2,
        keepGoing = 3,
    };

    enum class internetSiteSecurityLevel {
        userDefined = 0,
        medium = 1,
        mediumHigh = 2,
        high = 3,
    };

    enum class iosKioskModeAppType {
        notConfigured = 0,
        appStoreApp = 1,
        managedApp = 2,
        builtInApp = 3,
    };

    enum class iosNotificationAlertType {
        deviceDefault = 0,
        banner = 1,
        modal = 2,
        none = 3,
    };

    enum class iosNotificationPreviewVisibility {
        notConfigured = 0,
        alwaysShow = 1,
        hideWhenLocked = 2,
        neverShow = 3,
    };

    enum class iosSoftwareUpdateScheduleType {
        updateOutsideOfActiveHours = 0,
        alwaysUpdate = 1,
        updateDuringTimeWindows = 2,
        updateOutsideOfTimeWindows = 3,
    };

    enum class iosUpdatesInstallStatus {
        updateScanFailed = -2016324062,
        deviceOsHigherThanDesiredOsVersion = -2016330696,
        updateError = -2016330697,
        sharedDeviceUserLoggedInError = -2016330699,
        notSupportedOperation = -2016330701,
        installFailed = -2016330702,
        installPhoneCallInProgress = -2016330703,
        installInsufficientPower = -2016330704,
        installInsufficientSpace = -2016330705,
        installing = -2016330706,
        downloadInsufficientNetwork = -2016330707,
        downloadInsufficientPower = -2016330708,
        downloadInsufficientSpace = -2016330709,
        downloadRequiresComputer = -2016330710,
        downloadFailed = -2016330711,
        downloading = -2016330712,
        timeout = -2016333898,
        mdmClientCrashed = -2016336109,
        success = 0,
        available = 1,
        idle = 2,
        unknown = 3,
    };

    enum class iosWallpaperDisplayLocation {
        notConfigured = 0,
        lockScreen = 1,
        homeScreen = 2,
        lockAndHomeScreens = 3,
    };

    enum class keySize {
        size1024 = 0,
        size2048 = 1,
        size4096 = 2,
    };

    enum class keyStorageProviderOption {
        useTpmKspOtherwiseUseSoftwareKsp = 0,
        useTpmKspOtherwiseFail = 1,
        usePassportForWorkKspOtherwiseFail = 2,
        useSoftwareKsp = 3,
    };

    enum class keyUsages {
        keyEncipherment = 1,
        digitalSignature = 2,
    };

    enum class kioskModeManagedHomeScreenPinComplexity {
        notConfigured = 0,
        simple = 1,
        complex = 2,
    };

    enum class lanManagerAuthenticationLevel {
        lmAndNltm = 0,
        lmNtlmAndNtlmV2 = 1,
        lmAndNtlmOnly = 2,
        lmAndNtlmV2 = 3,
        lmNtlmV2AndNotLm = 4,
        lmNtlmV2AndNotLmOrNtm = 5,
    };

    enum class localSecurityOptionsAdministratorElevationPromptBehaviorType {
        notConfigured = 0,
        elevateWithoutPrompting = 1,
        promptForCredentialsOnTheSecureDesktop = 2,
        promptForConsentOnTheSecureDesktop = 3,
        promptForCredentials = 4,
        promptForConsent = 5,
        promptForConsentForNonWindowsBinaries = 6,
    };

    enum class localSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUserType {
        notConfigured = 0,
        administrators = 1,
        administratorsAndPowerUsers = 2,
        administratorsAndInteractiveUsers = 3,
    };

    enum class localSecurityOptionsInformationDisplayedOnLockScreenType {
        notConfigured = 0,
        administrators = 1,
        administratorsAndPowerUsers = 2,
        administratorsAndInteractiveUsers = 3,
    };

    enum class localSecurityOptionsInformationShownOnLockScreenType {
        notConfigured = 0,
        userDisplayNameDomainUser = 1,
        userDisplayNameOnly = 2,
        doNotDisplayUser = 3,
    };

    enum class localSecurityOptionsMinimumSessionSecurity {
        none = 0,
        requireNtmlV2SessionSecurity = 1,
        require128BitEncryption = 2,
        ntlmV2And128BitEncryption = 3,
    };

    enum class localSecurityOptionsSmartCardRemovalBehaviorType {
        lockWorkstation = 0,
        noAction = 1,
        forceLogoff = 2,
        disconnectRemoteDesktopSession = 3,
    };

    enum class localSecurityOptionsStandardUserElevationPromptBehaviorType {
        notConfigured = 0,
        automaticallyDenyElevationRequests = 1,
        promptForCredentialsOnTheSecureDesktop = 2,
        promptForCredentials = 3,
    };

    enum class macOSContentCachingClientPolicy {
        notConfigured = 0,
        clientsInLocalNetwork = 1,
        clientsWithSamePublicIpAddress = 2,
        clientsInCustomLocalNetworks = 3,
        clientsInCustomLocalNetworksWithFallback = 4,
    };

    enum class macOSContentCachingParentSelectionPolicy {
        notConfigured = 0,
        roundRobin = 1,
        firstAvailable = 2,
        urlPathHash = 3,
        random = 4,
        stickyAvailable = 5,
    };

    enum class macOSContentCachingPeerPolicy {
        notConfigured = 0,
        peersInLocalNetwork = 1,
        peersWithSamePublicIpAddress = 2,
        peersInCustomLocalNetworks = 3,
    };

    enum class macOSContentCachingType {
        notConfigured = 0,
        userContentOnly = 1,
        sharedContentOnly = 2,
    };

    enum class macOSFileVaultRecoveryKeyTypes {
        notConfigured = 0,
        institutionalRecoveryKey = 1,
        personalRecoveryKey = 2,
    };

    enum class macOSGatekeeperAppSources {
        notConfigured = 0,
        macAppStore = 1,
        macAppStoreAndIdentifiedDevelopers = 2,
        anywhere = 3,
    };

    enum class macOSProcessIdentifierType {
        bundleID = 1,
        path = 2,
    };

    enum class macOSSoftwareUpdateBehavior {
        notConfigured = 0,
        _default = 1,
    };

    enum class macOSSoftwareUpdateCategory {
        critical = 0,
        configurationDataFile = 1,
        firmware = 2,
        other = 3,
    };

    enum class macOSSoftwareUpdateDelayPolicy {
        none = 0,
        delayOSUpdateVisibility = 1,
        delayAppUpdateVisibility = 2,
        unknownFutureValue = 4,
        delayMajorOsUpdateVisibility = 8,
    };

    enum class macOSSoftwareUpdateScheduleType {
        alwaysUpdate = 0,
        updateDuringTimeWindows = 1,
        updateOutsideOfTimeWindows = 2,
    };

    enum class macOSSoftwareUpdateState {
        success = 0,
        downloading = 1000,
        downloaded = 1001,
        installing = 1002,
        idle = 1003,
        available = 1004,
        scheduled = 1005,
        downloadFailed = 2000,
        downloadInsufficientSpace = 2001,
        downloadInsufficientPower = 2002,
        downloadInsufficientNetwork = 2003,
        installInsufficientSpace = 2004,
        installInsufficientPower = 2005,
        installFailed = 2006,
        commandFailed = 2007,
    };

    enum class macOSSystemExtensionType {
        driverExtensionsAllowed = 1,
        networkExtensionsAllowed = 2,
        endpointSecurityExtensionsAllowed = 4,
    };

    enum class managedDeviceOwnerType {
        unknown = 0,
        company = 1,
        personal = 2,
    };

    enum class managementAgentType {
        eas = 1,
        mdm = 2,
        easMdm = 3,
        intuneClient = 4,
        easIntuneClient = 5,
        configurationManagerClient = 8,
        configurationManagerClientMdm = 10,
        configurationManagerClientMdmEas = 11,
        unknown = 16,
        jamf = 32,
        googleCloudDevicePolicyController = 64,
        microsoft365ManagedMdm = 258,
        windowsManagementCloudApi = 512,
        intuneAosp = 2048,
    };

    enum class meteredConnectionLimitType {
        unrestricted = 0,
        fixed = 1,
        variable = 2,
    };

    enum class microsoftLauncherDockPresence {
        notConfigured = 0,
        show = 1,
        hide = 2,
        disabled = 3,
    };

    enum class microsoftLauncherSearchBarPlacement {
        notConfigured = 0,
        top = 1,
        bottom = 2,
        hide = 3,
    };

    enum class miracastChannel {
        userDefined = 0,
        one = 1,
        two = 2,
        three = 3,
        four = 4,
        five = 5,
        six = 6,
        seven = 7,
        eight = 8,
        nine = 9,
        ten = 10,
        eleven = 11,
        thirtySix = 36,
        forty = 40,
        fortyFour = 44,
        fortyEight = 48,
        oneHundredFortyNine = 149,
        oneHundredFiftyThree = 153,
        oneHundredFiftySeven = 157,
        oneHundredSixtyOne = 161,
        oneHundredSixtyFive = 165,
    };

    enum class ndesConnectorState {
        none = 0,
        active = 1,
        inactive = 2,
    };

    enum class networkSingleSignOnType {
        disabled = 0,
        prelogon = 1,
        postlogon = 2,
    };

    enum class nonEapAuthenticationMethodForEapTtlsType {
        unencryptedPassword = 0,
        challengeHandshakeAuthenticationProtocol = 1,
        microsoftChap = 2,
        microsoftChapVersionTwo = 3,
    };

    enum class nonEapAuthenticationMethodForPeap {
        none = 0,
        microsoftChapVersionTwo = 1,
    };

    enum class _operator {
        none = 0,
        _and = 1,
        _or = 2,
        isEquals = 3,
        notEquals = 4,
        greaterThan = 5,
        lessThan = 6,
        between = 7,
        notBetween = 8,
        greaterEquals = 9,
        lessEquals = 10,
        dayTimeBetween = 11,
        beginsWith = 12,
        notBeginsWith = 13,
        endsWith = 14,
        notEndsWith = 15,
        contains = 16,
        notContains = 17,
        allOf = 18,
        oneOf = 19,
        noneOf = 20,
        setEquals = 21,
        orderedSetEquals = 22,
        subsetOf = 23,
        excludesAll = 24,
    };

    enum class perfectForwardSecrecyGroup {
        pfs1 = 0,
        pfs2 = 1,
        pfs2048 = 2,
        ecp256 = 3,
        ecp384 = 4,
        pfsMM = 5,
        pfs24 = 6,
    };

    enum class policyPlatformType {
        android = 0,
        androidForWork = 1,
        iOS = 2,
        macOS = 3,
        windowsPhone81 = 4,
        windows81AndLater = 5,
        windows10AndLater = 6,
        androidWorkProfile = 7,
        windows10XProfile = 8,
        androidAOSP = 9,
        all = 100,
    };

    enum class powerActionType {
        notConfigured = 0,
        noAction = 1,
        sleep = 2,
        hibernate = 3,
        shutdown = 4,
    };

    enum class prereleaseFeatures {
        userDefined = 0,
        settingsOnly = 1,
        settingsAndExperimentations = 2,
        notAllowed = 3,
    };

    enum class ratingAppsType {
        allAllowed = 0,
        allBlocked = 1,
        agesAbove4 = 2,
        agesAbove9 = 3,
        agesAbove12 = 4,
        agesAbove17 = 5,
    };

    enum class ratingAustraliaMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        mature = 4,
        agesAbove15 = 5,
        agesAbove18 = 6,
    };

    enum class ratingAustraliaTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        preschoolers = 2,
        children = 3,
        general = 4,
        parentalGuidance = 5,
        mature = 6,
        agesAbove15 = 7,
        agesAbove15AdultViolence = 8,
    };

    enum class ratingCanadaMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        agesAbove14 = 4,
        agesAbove18 = 5,
        restricted = 6,
    };

    enum class ratingCanadaTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        children = 2,
        childrenAbove8 = 3,
        general = 4,
        parentalGuidance = 5,
        agesAbove14 = 6,
        agesAbove18 = 7,
    };

    enum class ratingFranceMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        agesAbove10 = 2,
        agesAbove12 = 3,
        agesAbove16 = 4,
        agesAbove18 = 5,
    };

    enum class ratingFranceTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        agesAbove10 = 2,
        agesAbove12 = 3,
        agesAbove16 = 4,
        agesAbove18 = 5,
    };

    enum class ratingGermanyMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        agesAbove6 = 3,
        agesAbove12 = 4,
        agesAbove16 = 5,
        adults = 6,
    };

    enum class ratingGermanyTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        agesAbove6 = 3,
        agesAbove12 = 4,
        agesAbove16 = 5,
        adults = 6,
    };

    enum class ratingIrelandMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        agesAbove12 = 4,
        agesAbove15 = 5,
        agesAbove16 = 6,
        adults = 7,
    };

    enum class ratingIrelandTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        children = 3,
        youngAdults = 4,
        parentalSupervision = 5,
        mature = 6,
    };

    enum class ratingJapanMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        agesAbove15 = 4,
        agesAbove18 = 5,
    };

    enum class ratingJapanTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        explicitAllowed = 2,
    };

    enum class ratingNewZealandMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        mature = 4,
        agesAbove13 = 5,
        agesAbove15 = 6,
        agesAbove16 = 7,
        agesAbove18 = 8,
        restricted = 9,
        agesAbove16Restricted = 10,
    };

    enum class ratingNewZealandTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        adults = 4,
    };

    enum class ratingUnitedKingdomMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        universalChildren = 3,
        parentalGuidance = 4,
        agesAbove12Video = 5,
        agesAbove12Cinema = 6,
        agesAbove15 = 7,
        adults = 8,
    };

    enum class ratingUnitedKingdomTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        caution = 2,
    };

    enum class ratingUnitedStatesMoviesType {
        allAllowed = 0,
        allBlocked = 1,
        general = 2,
        parentalGuidance = 3,
        parentalGuidance13 = 4,
        restricted = 5,
        adults = 6,
    };

    enum class ratingUnitedStatesTelevisionType {
        allAllowed = 0,
        allBlocked = 1,
        childrenAll = 2,
        childrenAbove7 = 3,
        general = 4,
        parentalGuidance = 5,
        childrenAbove14 = 6,
        adults = 7,
    };

    enum class requiredPasswordType {
        deviceDefault = 0,
        alphanumeric = 1,
        numeric = 2,
    };

    enum class restrictedAppsState {
        prohibitedApps = 0,
        notApprovedApps = 1,
    };

    enum class safeSearchFilterType {
        userDefined = 0,
        strict = 1,
        moderate = 2,
    };

    enum class scheduledRetireState {
        cancelRetire = 0,
        comfirmRetire = 1,
    };

    enum class secureAssessmentAccountType {
        azureADAccount = 0,
        domainAccount = 1,
        localAccount = 2,
        localGuestAccount = 3,
    };

    enum class secureBootWithDMAType {
        notConfigured = 0,
        withoutDMA = 1,
        withDMA = 3,
    };

    enum class serviceStartType {
        manual = 0,
        automatic = 1,
        disabled = 2,
    };

    enum class settingSourceType {
        deviceConfiguration = 0,
        deviceIntent = 1,
    };

    enum class sharedPCAccountDeletionPolicyType {
        immediate = 0,
        diskSpaceThreshold = 1,
        diskSpaceThresholdOrInactiveThreshold = 2,
    };

    enum class sharedPCAllowedAccountType {
        notConfigured = 0,
        guest = 1,
        domain = 2,
    };

    enum class signInAssistantOptions {
        notConfigured = 0,
        disabled = 1,
    };

    enum class siteSecurityLevel {
        userDefined = 0,
        low = 1,
        mediumLow = 2,
        medium = 3,
        mediumHigh = 4,
        high = 5,
    };

    enum class stateManagementSetting {
        notConfigured = 0,
        blocked = 1,
        allowed = 2,
    };

    enum class subjectAlternativeNameType {
        none = 0,
        emailAddress = 1,
        userPrincipalName = 2,
        customAzureADAttribute = 4,
        domainNameService = 8,
        universalResourceIdentifier = 16,
    };

    enum class subjectNameFormat {
        commonName = 0,
        commonNameIncludingEmail = 1,
        commonNameAsEmail = 2,
        custom = 3,
        commonNameAsIMEI = 5,
        commonNameAsSerialNumber = 6,
        commonNameAsAadDeviceId = 7,
        commonNameAsIntuneDeviceId = 8,
        commonNameAsDurableDeviceId = 9,
    };

    enum class updateClassification {
        userDefined = 0,
        recommendedAndImportant = 1,
        important = 2,
        none = 3,
    };

    enum class userEmailSource {
        userPrincipalName = 0,
        primarySmtpAddress = 1,
    };

    enum class usernameSource {
        userPrincipalName = 0,
        primarySmtpAddress = 1,
        samAccountName = 2,
    };

    enum class visibilitySetting {
        notConfigured = 0,
        hide = 1,
        show = 2,
    };

    enum class vpnAuthenticationMethod {
        certificate = 0,
        usernameAndPassword = 1,
        sharedSecret = 2,
        derivedCredential = 3,
        azureAD = 4,
    };

    enum class vpnClientAuthenticationType {
        userAuthentication = 0,
        deviceAuthentication = 1,
    };

    enum class vpnDeadPeerDetectionRate {
        medium = 0,
        none = 1,
        low = 2,
        high = 3,
    };

    enum class vpnEncryptionAlgorithmType {
        aes256 = 0,
        des = 1,
        tripleDes = 2,
        aes128 = 3,
        aes128Gcm = 4,
        aes256Gcm = 5,
        aes192 = 6,
        aes192Gcm = 7,
        chaCha20Poly1305 = 8,
    };

    enum class vpnIntegrityAlgorithmType {
        sha2_256 = 0,
        sha1_96 = 1,
        sha1_160 = 2,
        sha2_384 = 3,
        sha2_512 = 4,
        md5 = 5,
    };

    enum class vpnLocalIdentifier {
        deviceFQDN = 0,
        empty = 1,
        clientCertificateSubjectName = 2,
    };

    enum class vpnOnDemandRuleConnectionAction {
        connect = 0,
        evaluateConnection = 1,
        ignore = 2,
        disconnect = 3,
    };

    enum class vpnOnDemandRuleConnectionDomainAction {
        connectIfNeeded = 0,
        neverConnect = 1,
    };

    enum class vpnProviderType {
        notConfigured = 0,
        appProxy = 1,
        packetTunnel = 2,
    };

    enum class vpnServerCertificateType {
        rsa = 0,
        ecdsa256 = 1,
        ecdsa384 = 2,
        ecdsa521 = 3,
    };

    enum class vpnServiceExceptionAction {
        forceTrafficViaVPN = 0,
        allowTrafficOutside = 1,
        dropTraffic = 2,
    };

    enum class vpnTrafficRuleAppType {
        none = 0,
        desktop = 1,
        universal = 2,
    };

    enum class vpnTrafficRuleRoutingPolicyType {
        none = 0,
        splitTunnel = 1,
        forceTunnel = 2,
    };

    enum class vpnTunnelConfigurationType {
        wifiAndCellular = 0,
        cellular = 1,
        wifi = 2,
    };

    enum class webBrowserCookieSettings {
        browserDefault = 0,
        blockAlways = 1,
        allowCurrentWebSite = 2,
        allowFromWebsitesVisited = 3,
        allowAlways = 4,
    };

    enum class weeklySchedule {
        userDefined = 0,
        everyday = 1,
        sunday = 2,
        monday = 3,
        tuesday = 4,
        wednesday = 5,
        thursday = 6,
        friday = 7,
        saturday = 8,
        noScheduledScan = 9,
    };

    enum class welcomeScreenMeetingInformation {
        userDefined = 0,
        showOrganizerAndTimeOnly = 1,
        showOrganizerAndTimeAndSubject = 2,
    };

    enum class wiFiAuthenticationMethod {
        certificate = 0,
        usernameAndPassword = 1,
        derivedCredential = 2,
    };

    enum class wifiAuthenticationType {
        none = 0,
        user = 1,
        machine = 2,
        machineOrUser = 3,
        guest = 4,
    };

    enum class wiFiProxySetting {
        none = 0,
        manual = 1,
        automatic = 2,
    };

    enum class wiFiSecurityType {
        open = 0,
        wpaPersonal = 1,
        wpaEnterprise = 2,
        wep = 3,
        wpa2Personal = 4,
        wpa2Enterprise = 5,
    };

    enum class windows10AppsUpdateRecurrence {
        none = 0,
        daily = 1,
        weekly = 2,
        monthly = 3,
    };

    enum class windows10AppType {
        desktop = 0,
        universal = 1,
    };

    enum class windows10DeviceModeType {
        standardConfiguration = 0,
        sModeConfiguration = 1,
    };

    enum class windows10EditionType {
        windows10Enterprise = 0,
        windows10EnterpriseN = 1,
        windows10Education = 2,
        windows10EducationN = 3,
        windows10MobileEnterprise = 4,
        windows10HolographicEnterprise = 5,
        windows10Professional = 6,
        windows10ProfessionalN = 7,
        windows10ProfessionalEducation = 8,
        windows10ProfessionalEducationN = 9,
        windows10ProfessionalWorkstation = 10,
        windows10ProfessionalWorkstationN = 11,
        notConfigured = 12,
        windows10Home = 13,
        windows10HomeChina = 14,
        windows10HomeN = 15,
        windows10HomeSingleLanguage = 16,
        windows10Mobile = 17,
        windows10IoTCore = 18,
        windows10IoTCoreCommercial = 19,
    };

    enum class windows10VpnAuthenticationMethod {
        certificate = 0,
        usernameAndPassword = 1,
        customEapXml = 2,
        derivedCredential = 3,
    };

    enum class windows10VpnConnectionType {
        pulseSecure = 0,
        f5EdgeClient = 1,
        dellSonicWallMobileConnect = 2,
        checkPointCapsuleVpn = 3,
        automatic = 4,
        ikEv2 = 5,
        l2tp = 6,
        pptp = 7,
        citrix = 8,
        paloAltoGlobalProtect = 9,
        ciscoAnyConnect = 10,
    };

    enum class windows10VpnProfileTarget {
        user = 0,
        device = 1,
        autoPilotDevice = 2,
    };

    enum class windowsAppStartLayoutTileSize {
        hidden = 0,
        small = 1,
        medium = 2,
        wide = 3,
        large = 4,
    };

    enum class windowsDefenderTamperProtectionOptions {
        notConfigured = 0,
        enable = 1,
        disable = 2,
    };

    enum class windowsDeliveryOptimizationMode {
        userDefined = 0,
        httpOnly = 1,
        httpWithPeeringNat = 2,
        httpWithPeeringPrivateGroup = 3,
        httpWithInternetPeering = 4,
        simpleDownload = 99,
        bypassMode = 100,
    };

    enum class windowsEdgeKioskType {
        publicBrowsing = 0,
        fullScreen = 1,
    };

    enum class windowsFirewallRuleInterfaceTypes {
        notConfigured = 0,
        remoteAccess = 1,
        wireless = 2,
        lan = 4,
    };

    enum class windowsFirewallRuleNetworkProfileTypes {
        notConfigured = 0,
        domain = 1,
        _private = 2,
        _public = 4,
    };

    enum class windowsFirewallRuleTrafficDirectionType {
        notConfigured = 0,
        out = 1,
        in = 2,
    };

    enum class windowsHealthMonitoringScope {
        undefined = 0,
        healthMonitoring = 1,
        bootPerformance = 2,
        windowsUpdates = 4,
    };

    enum class windowsKioskAppType {
        unknown = 0,
        store = 1,
        desktop = 2,
        aumId = 3,
    };

    enum class windowsPrivacyDataAccessLevel {
        notConfigured = 0,
        forceAllow = 1,
        forceDeny = 2,
        userInControl = 3,
    };

    enum class windowsPrivacyDataCategory {
        notConfigured = 0,
        accountInfo = 1,
        appsRunInBackground = 2,
        calendar = 3,
        callHistory = 4,
        camera = 5,
        contacts = 6,
        diagnosticsInfo = 7,
        email = 8,
        location = 9,
        messaging = 10,
        microphone = 11,
        motion = 12,
        notifications = 13,
        phone = 14,
        radios = 15,
        tasks = 16,
        syncWithDevices = 17,
        trustedDevices = 18,
    };

    enum class windowsSModeConfiguration {
        noRestriction = 0,
        block = 1,
        unlock = 2,
    };

    enum class windowsSpotlightEnablementSettings {
        notConfigured = 0,
        disabled = 1,
        enabled = 2,
    };

    enum class windowsStartMenuAppListVisibilityType {
        userDefined = 0,
        collapse = 1,
        remove = 2,
        disableSettingsApp = 4,
    };

    enum class windowsStartMenuModeType {
        userDefined = 0,
        fullScreen = 1,
        nonFullScreen = 2,
    };

    enum class windowsUpdateForBusinessUpdateWeeks {
        userDefined = 0,
        firstWeek = 1,
        secondWeek = 2,
        thirdWeek = 4,
        fourthWeek = 8,
        everyWeek = 15,
    };

    enum class windowsUpdateNotificationDisplayOption {
        notConfigured = 0,
        defaultNotifications = 1,
        restartWarningsOnly = 2,
        disableAllNotifications = 3,
    };

    enum class windowsUpdateStatus {
        upToDate = 0,
        pendingInstallation = 1,
        pendingReboot = 2,
        failed = 3,
    };

    enum class windowsUpdateType {
        userDefined = 0,
        all = 1,
        businessReadyOnly = 2,
        windowsInsiderBuildFast = 3,
        windowsInsiderBuildSlow = 4,
        windowsInsiderBuildRelease = 5,
    };

    enum class windowsUserAccountControlSettings {
        userDefined = 0,
        alwaysNotify = 1,
        notifyOnAppChanges = 2,
        notifyOnAppChangesWithoutDimming = 3,
        neverNotify = 4,
    };

    enum class windowsVpnConnectionType {
        pulseSecure = 0,
        f5EdgeClient = 1,
        dellSonicWallMobileConnect = 2,
        checkPointCapsuleVpn = 3,
    };

    enum class wiredNetworkInterface {
        anyEthernet = 0,
        firstActiveEthernet = 1,
        secondActiveEthernet = 2,
        thirdActiveEthernet = 3,
        firstEthernet = 4,
        secondEthernet = 5,
        thirdEthernet = 6,
    };

    enum class deviceManagementConfigurationAzureAdTrustType {
        none = 0,
        azureAdJoined = 1,
        addWorkAccount = 2,
        mdmOnly = 4,
    };

    enum class deviceManagementConfigurationControlType {
        _default = 0,
        dropdown = 1,
        smallTextBox = 2,
        largeTextBox = 3,
        toggle = 4,
        multiheaderGrid = 5,
        contextPane = 6,
    };

    enum class deviceManagementConfigurationDeviceMode {
        none = 0,
        kiosk = 1,
    };

    enum class deviceManagementConfigurationPlatforms {
        none = 0,
        macOS = 8,
        windows10X = 16,
        windows10 = 32,
    };

    enum class deviceManagementConfigurationSettingAccessTypes {
        none = 0,
        add = 1,
        copy = 2,
        _delete = 4,
        get = 8,
        replace = 16,
        execute = 32,
    };

    enum class deviceManagementConfigurationSettingUsage {
        none = 0,
        configuration = 1,
    };

    enum class deviceManagementConfigurationSettingVisibility {
        none = 0,
        settingsCatalog = 1,
        _template = 2,
    };

    enum class deviceManagementConfigurationStringFormat {
        none = 0,
        email = 1,
        guid = 2,
        ip = 3,
        base64 = 4,
        url = 5,
        version = 6,
        xml = 7,
        date = 8,
        time = 9,
        binary = 10,
        regEx = 11,
        json = 12,
        dateTime = 13,
        surfaceHub = 14,
    };

    enum class deviceManagementConfigurationTechnologies {
        none = 0,
        mdm = 1,
        windows10XManagement = 2,
        configManager = 4,
        microsoftSense = 128,
        exchangeOnline = 256,
    };

    enum class deviceManagementConfigurationTemplateFamily {
        none = 0,
        endpointSecurityAntivirus = 10,
        endpointSecurityDiskEncryption = 11,
        endpointSecurityFirewall = 12,
        endpointSecurityEndpointDetectionAndResponse = 13,
        endpointSecurityAttackSurfaceReduction = 14,
        endpointSecurityAccountProtection = 15,
        endpointSecurityApplicationControl = 16,
    };

    enum class deviceManagementConfigurationWindowsSkus {
        unknown = 0,
        windowsHome = 1,
        windowsProfessional = 2,
        windowsEnterprise = 3,
        windowsEducation = 4,
        windowsMobile = 5,
        windowsMobileEnterprise = 6,
        windowsTeamSurface = 7,
        iot = 8,
        iotEnterprise = 9,
        holoLens = 10,
        holoLensEnterprise = 11,
        holographicForBusiness = 12,
        windowsMultiSession = 13,
        surfaceHub = 14,
    };

    enum class deviceManagementTemplateLifecycleState {
        invalid = 0,
        draft = 10,
        active = 20,
        superseded = 30,
        deprecated = 40,
        retired = 50,
    };

    enum class companyPortalAction {
        unknown = 0,
        remove = 1,
        reset = 2,
    };

    enum class deviceManagementExchangeAccessLevel {
        none = 0,
        allow = 1,
        block = 2,
        quarantine = 3,
    };

    enum class deviceManagementExchangeAccessRuleType {
        family = 0,
        model = 1,
    };

    enum class deviceManagementExchangeConnectorStatus {
        none = 0,
        connectionPending = 1,
        connected = 2,
        disconnected = 3,
    };

    enum class deviceManagementExchangeConnectorSyncType {
        fullSync = 0,
        deltaSync = 1,
    };

    enum class deviceManagementExchangeConnectorType {
        onPremises = 0,
        hosted = 1,
        serviceToService = 2,
        dedicated = 3,
    };

    enum class deviceManagementPartnerAppType {
        unknown = 0,
        singleTenantApp = 1,
        multiTenantApp = 2,
    };

    enum class deviceManagementPartnerTenantState {
        unknown = 0,
        unavailable = 1,
        enabled = 2,
        terminated = 3,
        rejected = 4,
        unresponsive = 5,
    };

    enum class enrollmentAvailabilityOptions {
        availableWithPrompts = 0,
        availableWithoutPrompts = 1,
        unavailable = 2,
    };

    enum class enrollmentRestrictionPlatformType {
        allPlatforms = 0,
        ios = 1,
        windows = 2,
        windowsPhone = 3,
        android = 4,
        androidForWork = 5,
        androidAosp = 6,
        mac = 7,
    };

    enum class mdmAuthority {
        unknown = 0,
        intune = 1,
        sccm = 2,
        office365 = 3,
    };

    enum class microsoftStoreForBusinessPortalSelectionOptions {
        none = 0,
        companyPortal = 1,
        privateStore = 2,
    };

    enum class mobileThreatPartnerTenantState {
        unavailable = 0,
        available = 1,
        enabled = 2,
        unresponsive = 3,
    };

    enum class ownerType {
        unknown = 0,
        company = 1,
        personal = 2,
    };

    enum class vppTokenState {
        unknown = 0,
        valid = 1,
        expired = 2,
        invalid = 3,
        assignedToExternalMDM = 4,
        duplicateLocationId = 5,
    };

    enum class vppTokenSyncStatus {
        none = 0,
        inProgress = 1,
        completed = 2,
        failed = 3,
    };

    enum class windowsHelloForBusinessPinUsage {
        allowed = 0,
        required = 1,
        disallowed = 2,
    };

    enum class deviceManagementComparisonResult {
        unknown = 0,
        equal = 1,
        notEqual = 2,
        added = 3,
        removed = 4,
    };

    enum class deviceManagementTemplateSubtype {
        none = 0,
        firewall = 1,
        diskEncryption = 2,
        attackSurfaceReduction = 3,
        endpointDetectionReponse = 4,
        accountProtection = 5,
        antivirus = 6,
        firewallSharedAppList = 7,
        firewallSharedIpList = 8,
        firewallSharedPortlist = 9,
    };

    enum class deviceManagementTemplateType {
        securityBaseline = 0,
        specializedDevices = 1,
        advancedThreatProtectionSecurityBaseline = 2,
        deviceConfiguration = 3,
        custom = 4,
        securityTemplate = 5,
        microsoftEdgeSecurityBaseline = 6,
        microsoftOffice365ProPlusSecurityBaseline = 7,
        deviceCompliance = 8,
        deviceConfigurationForOffice365 = 9,
        cloudPC = 10,
        firewallSharedSettings = 11,
    };

    enum class deviceManangementIntentValueType {
        integer = 0,
        boolean = 1,
        string = 2,
        complex = 3,
        collection = 4,
        abstractComplex = 5,
    };

    enum class securityBaselineComplianceState {
        unknown = 0,
        secure = 1,
        notApplicable = 2,
        notSecure = 3,
        error = 4,
        conflict = 5,
    };

    enum class securityBaselinePolicySourceType {
        deviceConfiguration = 0,
        deviceIntent = 1,
    };

    enum class adminConsentState {
        notConfigured = 0,
        granted = 1,
        notGranted = 2,
    };

    enum class appLogDecryptionAlgorithm {
        aes256 = 0,
    };

    enum class appLogUploadState {
        pending = 0,
        completed = 1,
        failed = 2,
    };

    enum class chassisType {
        unknown = 0,
        desktop = 1,
        laptop = 2,
        worksWorkstation = 3,
        enterpriseServer = 4,
        phone = 100,
        tablet = 101,
        mobileOther = 102,
        mobileUnknown = 103,
    };

    enum class comanagementEligibleType {
        comanaged = 1,
        eligible = 2,
        eligibleButNotAzureAdJoined = 3,
        needsOsUpdate = 4,
        ineligible = 5,
    };

    enum class complianceState {
        unknown = 0,
        compliant = 1,
        noncompliant = 2,
        conflict = 3,
        error = 4,
        inGracePeriod = 254,
        configManager = 255,
    };

    enum class configurationManagerActionDeliveryStatus {
        unknown = 0,
        pendingDelivery = 1,
        deliveredToConnectorService = 2,
        failedToDeliverToConnectorService = 3,
        deliveredToOnPremisesServer = 4,
    };

    enum class configurationManagerActionType {
        refreshMachinePolicy = 0,
        refreshUserPolicy = 1,
        wakeUpClient = 2,
        appEvaluation = 3,
    };

    enum class configurationManagerClientState {
        unknown = 0,
        installed = 1,
        healthy = 7,
        installFailed = 8,
        updateFailed = 11,
        communicationError = 19,
    };

    enum class deviceCustomAttributeValueType {
        integer = 0,
        string = 1,
        dateTime = 2,
    };

    enum class deviceEnrollmentType {
        unknown = 0,
        userEnrollment = 1,
        deviceEnrollmentManager = 2,
        appleBulkWithUser = 3,
        appleBulkWithoutUser = 4,
        windowsAzureADJoin = 5,
        windowsBulkUserless = 6,
        windowsAutoEnrollment = 7,
        windowsBulkAzureDomainJoin = 8,
        windowsCoManagement = 9,
        windowsAzureADJoinUsingDeviceAuth = 10,
        appleUserEnrollment = 11,
        appleUserEnrollmentWithServiceAccount = 12,
        azureAdJoinUsingAzureVmExtension = 14,
        androidEnterpriseDedicatedDevice = 15,
        androidEnterpriseFullyManaged = 16,
        androidEnterpriseCorporateWorkProfile = 17,
    };

    enum class deviceGuardLocalSystemAuthorityCredentialGuardState {
        running = 0,
        rebootRequired = 1,
        notLicensed = 2,
        notConfigured = 3,
        virtualizationBasedSecurityNotRunning = 4,
    };

    enum class deviceGuardVirtualizationBasedSecurityHardwareRequirementState {
        meetHardwareRequirements = 0,
        secureBootRequired = 1,
        dmaProtectionRequired = 2,
        hyperVNotSupportedForGuestVM = 4,
        hyperVNotAvailable = 8,
    };

    enum class deviceGuardVirtualizationBasedSecurityState {
        running = 0,
        rebootRequired = 1,
        require64BitArchitecture = 2,
        notLicensed = 3,
        notConfigured = 4,
        doesNotMeetHardwareRequirements = 5,
        other = 42,
    };

    enum class deviceLogCollectionTemplateType {
        predefined = 0,
    };

    enum class deviceManagementExchangeAccessState {
        none = 0,
        unknown = 1,
        allowed = 2,
        blocked = 3,
        quarantined = 4,
    };

    enum class deviceManagementExchangeAccessStateReason {
        none = 0,
        unknown = 1,
        exchangeGlobalRule = 2,
        exchangeIndividualRule = 3,
        exchangeDeviceRule = 4,
        exchangeUpgrade = 5,
        exchangeMailboxPolicy = 6,
        other = 7,
        compliant = 8,
        notCompliant = 9,
        notEnrolled = 10,
        unknownLocation = 12,
        mfaRequired = 13,
        azureADBlockDueToAccessPolicy = 14,
        compromisedPassword = 15,
        deviceNotKnownWithManagedApp = 16,
    };

    enum class deviceManagementSubscriptions {
        none = 0,
        intune = 1,
        office365 = 2,
        intunePremium = 4,
        intune_EDU = 8,
        intune_SMB = 16,
    };

    enum class deviceManagementSubscriptionState {
        pending = 0,
        active = 1,
        warning = 2,
        disabled = 3,
        deleted = 4,
        blocked = 5,
        lockedOut = 8,
    };

    enum class deviceRegistrationState {
        notRegistered = 0,
        registered = 2,
        revoked = 3,
        keyConflict = 4,
        approvalPending = 5,
        certificateReset = 6,
        notRegisteredPendingEnrollment = 7,
        unknown = 8,
    };

    enum class diskType {
        unkown = 0,
        hdd = 1,
        ssd = 2,
    };

    enum class globalDeviceHealthScriptState {
        notConfigured = 0,
        pending = 1,
        enabled = 2,
    };

    enum class healthState {
        unknown = 0,
        healthy = 1,
        unhealthy = 2,
    };

    enum class joinType {
        unknown = 0,
        azureADJoined = 1,
        azureADRegistered = 2,
        hybridAzureADJoined = 3,
    };

    enum class lostModeState {
        disabled = 0,
        enabled = 1,
    };

    enum class managedDeviceArchitecture {
        unknown = 0,
        x86 = 1,
        x64 = 2,
        arm = 3,
        arM64 = 4,
    };

    enum class managedDeviceManagementFeatures {
        none = 0,
        microsoftManagedDesktop = 1,
    };

    enum class managedDevicePartnerReportedHealthState {
        unknown = 0,
        activated = 1,
        deactivated = 2,
        secured = 3,
        lowSeverity = 4,
        mediumSeverity = 5,
        highSeverity = 6,
        unresponsive = 7,
        compromised = 8,
        misconfigured = 9,
    };

    enum class managedDeviceRemoteAction {
        retire = 0,
        _delete = 1,
        fullScan = 2,
        quickScan = 3,
        signatureUpdate = 4,
        wipe = 5,
        customTextNotification = 6,
        rebootNow = 7,
        setDeviceName = 8,
        syncDevice = 9,
        deprovision = 10,
        disable = 11,
        reenable = 12,
        moveDeviceToOrganizationalUnit = 13,
        activateDeviceEsim = 14,
        collectDiagnostics = 15,
    };

    enum class managedInstallerStatus {
        disabled = 0,
        enabled = 1,
    };

    enum class managementState {
        managed = 0,
        retirePending = 1,
        retireFailed = 2,
        wipePending = 3,
        wipeFailed = 4,
        unhealthy = 5,
        deletePending = 6,
        retireIssued = 7,
        wipeIssued = 8,
        wipeCanceled = 9,
        retireCanceled = 10,
        discovered = 11,
    };

    enum class operatingSystemUpgradeEligibility {
        upgraded = 0,
        unknown = 1,
        notCapable = 2,
        capable = 3,
    };

    enum class remediationState {
        unknown = 0,
        skipped = 1,
        success = 2,
        remediationFailed = 3,
        scriptError = 4,
    };

    enum class remoteAction {
        unknown = 0,
        factoryReset = 1,
        removeCompanyData = 2,
        resetPasscode = 3,
        remoteLock = 4,
        enableLostMode = 5,
        disableLostMode = 6,
        locateDevice = 7,
        rebootNow = 8,
        recoverPasscode = 9,
        cleanWindowsDevice = 10,
        logoutSharedAppleDeviceActiveUser = 11,
        quickScan = 12,
        fullScan = 13,
        windowsDefenderUpdateSignatures = 14,
        factoryResetKeepEnrollmentData = 15,
        updateDeviceAccount = 16,
        automaticRedeployment = 17,
        shutDown = 18,
        rotateBitLockerKeys = 19,
        rotateFileVaultKey = 20,
        getFileVaultKey = 21,
        setDeviceName = 22,
        activateDeviceEsim = 23,
    };

    enum class runState {
        unknown = 0,
        success = 1,
        fail = 2,
        scriptError = 3,
        pending = 4,
        notApplicable = 5,
    };

    enum class userExperienceAnalyticsHealthState {
        unknown = 0,
        insufficientData = 1,
        needsAttention = 2,
        meetingGoals = 3,
    };

    enum class userExperienceAnalyticsInsightSeverity {
        none = 0,
        informational = 1,
        warning = 2,
        error = 3,
    };

    enum class userExperienceAnalyticsOperatingSystemRestartCategory {
        unknown = 0,
        restartWithUpdate = 1,
        restartWithoutUpdate = 2,
        blueScreen = 3,
        shutdownWithUpdate = 4,
        shutdownWithoutUpdate = 5,
        longPowerButtonPress = 6,
        bootError = 7,
        update = 8,
    };

    enum class userExperienceAnalyticsSummarizedBy {
        none = 0,
        model = 1,
        allRegressions = 3,
        modelRegression = 4,
        manufacturerRegression = 5,
        operatingSystemVersionRegression = 6,
    };

    enum class windowsDefenderProductStatus {
        noStatus = 0,
        serviceNotRunning = 1,
        serviceStartedWithoutMalwareProtection = 2,
        pendingFullScanDueToThreatAction = 4,
        pendingRebootDueToThreatAction = 8,
        pendingManualStepsDueToThreatAction = 16,
        avSignaturesOutOfDate = 32,
        asSignaturesOutOfDate = 64,
        noQuickScanHappenedForSpecifiedPeriod = 128,
        noFullScanHappenedForSpecifiedPeriod = 256,
        systemInitiatedScanInProgress = 512,
        systemInitiatedCleanInProgress = 1024,
        samplesPendingSubmission = 2048,
        productRunningInEvaluationMode = 4096,
        productRunningInNonGenuineMode = 8192,
        productExpired = 16384,
        offlineScanRequired = 32768,
        serviceShutdownAsPartOfSystemShutdown = 65536,
        threatRemediationFailedCritically = 131072,
        threatRemediationFailedNonCritically = 262144,
        noStatusFlagsSet = 524288,
        platformOutOfDate = 1048576,
        platformUpdateInProgress = 2097152,
        platformAboutToBeOutdated = 4194304,
        signatureOrPlatformEndOfLifeIsPastOrIsImpending = 8388608,
        windowsSModeSignaturesInUseOnNonWin10SInstall = 16777216,
    };

    enum class windowsDeviceHealthState {
        clean = 0,
        fullScanPending = 1,
        rebootPending = 2,
        manualStepsPending = 4,
        offlineScanPending = 8,
        critical = 16,
    };

    enum class windowsMalwareCategory {
        invalid = 0,
        adware = 1,
        spyware = 2,
        passwordStealer = 3,
        trojanDownloader = 4,
        worm = 5,
        backdoor = 6,
        remoteAccessTrojan = 7,
        trojan = 8,
        emailFlooder = 9,
        keylogger = 10,
        dialer = 11,
        monitoringSoftware = 12,
        browserModifier = 13,
        cookie = 14,
        browserPlugin = 15,
        aolExploit = 16,
        nuker = 17,
        securityDisabler = 18,
        jokeProgram = 19,
        hostileActiveXControl = 20,
        softwareBundler = 21,
        stealthNotifier = 22,
        settingsModifier = 23,
        toolBar = 24,
        remoteControlSoftware = 25,
        trojanFtp = 26,
        potentialUnwantedSoftware = 27,
        icqExploit = 28,
        trojanTelnet = 29,
        exploit = 30,
        filesharingProgram = 31,
        malwareCreationTool = 32,
        remote_Control_Software = 33,
        tool = 34,
        trojanDenialOfService = 36,
        trojanDropper = 37,
        trojanMassMailer = 38,
        trojanMonitoringSoftware = 39,
        trojanProxyServer = 40,
        virus = 42,
        known = 43,
        unknown = 44,
        spp = 45,
        behavior = 46,
        vulnerability = 47,
        policy = 48,
        enterpriseUnwantedSoftware = 49,
        ransom = 50,
        hipsRule = 51,
    };

    enum class windowsMalwareExecutionState {
        unknown = 0,
        blocked = 1,
        allowed = 2,
        running = 3,
        notRunning = 4,
    };

    enum class windowsMalwareSeverity {
        unknown = 0,
        low = 1,
        moderate = 2,
        high = 4,
        severe = 5,
    };

    enum class windowsMalwareState {
        unknown = 0,
        detected = 1,
        cleaned = 2,
        quarantined = 3,
        removed = 4,
        allowed = 5,
        blocked = 6,
        cleanFailed = 102,
        quarantineFailed = 103,
        removeFailed = 104,
        allowFailed = 105,
        abandoned = 106,
        blockFailed = 107,
    };

    enum class windowsMalwareThreatState {
        active = 0,
        actionFailed = 1,
        manualStepsRequired = 2,
        fullScanRequired = 3,
        rebootRequired = 4,
        remediatedWithNonCriticalFailures = 5,
        quarantined = 6,
        removed = 7,
        cleaned = 8,
        allowed = 9,
        noStatusCleared = 10,
    };

    enum class deviceManagementDerivedCredentialIssuer {
        intercede = 0,
        entrustDatacard = 1,
        purebred = 2,
        xTec = 3,
    };

    enum class deviceManagementDerivedCredentialNotificationType {
        none = 0,
        companyPortal = 1,
        email = 2,
    };

    enum class deviceManagementResourceAccessProfileIntent {
        apply = 0,
        remove = 1,
    };

    enum class appleUserInitiatedEnrollmentType {
        unknown = 0,
        device = 1,
        user = 2,
    };

    enum class depTokenType {
        none = 0,
        dep = 1,
        appleSchoolManager = 2,
    };

    enum class discoverySource {
        unknown = 0,
        adminImport = 2,
        deviceEnrollmentProgram = 4,
    };

    enum class enrollmentState {
        unknown = 0,
        enrolled = 1,
        pendingReset = 2,
        failed = 3,
        notContacted = 4,
        blocked = 5,
    };

    enum class importedDeviceIdentityType {
        unknown = 0,
        imei = 1,
        serialNumber = 2,
    };

    enum class importedWindowsAutopilotDeviceIdentityImportStatus {
        unknown = 0,
        pending = 1,
        partial = 2,
        complete = 3,
        error = 4,
    };

    enum class importedWindowsAutopilotDeviceIdentityUploadStatus {
        noUpload = 0,
        pending = 1,
        complete = 2,
        error = 3,
    };

    enum class iTunesPairingMode {
        disallow = 0,
        allow = 1,
        requiresCertificate = 2,
    };

    enum class platform {
        unknown = 0,
        ios = 1,
        android = 2,
        windows = 3,
        windowsMobile = 4,
        macOS = 5,
    };

    enum class windowsAutopilotDeviceType {
        windowsPc = 0,
        surfaceHub2 = 1,
        holoLens = 2,
    };

    enum class windowsAutopilotProfileAssignmentDetailedStatus {
        none = 0,
        hardwareRequirementsNotMet = 1,
        surfaceHubProfileNotSupported = 2,
        holoLensProfileNotSupported = 3,
        windowsPcProfileNotSupported = 4,
    };

    enum class windowsAutopilotProfileAssignmentStatus {
        unknown = 0,
        assignedInSync = 1,
        assignedOutOfSync = 2,
        assignedUnkownSyncState = 3,
        notAssigned = 4,
        pending = 5,
        failed = 6,
    };

    enum class windowsAutopilotSyncStatus {
        unknown = 0,
        inProgress = 1,
        completed = 2,
        failed = 3,
    };

    enum class windowsDeviceUsageType {
        singleUser = 0,
        shared = 1,
    };

    enum class windowsUserType {
        administrator = 0,
        standard = 1,
    };

    enum class binaryManagementConditionExpressionOperatorType {
        _or = 0,
        _and = 1,
    };

    enum class unaryManagementConditionExpressionOperatorType {
        _not = 0,
    };

    enum class groupPolicyMigrationReadiness {
        none = 1,
        partial = 2,
        complete = 3,
        error = 4,
        notApplicable = 5,
    };

    enum class groupPolicySettingScope {
        unknown = 0,
        device = 1,
        user = 2,
    };

    enum class groupPolicySettingType {
        unknown = 0,
        policy = 1,
        account = 2,
        securityOptions = 3,
        userRightsAssignment = 4,
        auditSetting = 5,
        windowsFirewallSettings = 6,
    };

    enum class mdmSupportedState {
        unknown = 0,
        supported = 1,
        unsupported = 2,
        deprecated = 3,
    };

    enum class groupPolicyConfigurationType {
        policy = 0,
        preference = 1,
    };

    enum class groupPolicyDefinitionClassType {
        user = 0,
        machine = 1,
    };

    enum class groupPolicyOperationStatus {
        unknown = 0,
        inProgress = 1,
        success = 2,
        failed = 3,
    };

    enum class groupPolicyOperationType {
        none = 0,
        upload = 1,
        uploadNewVersion = 2,
        addLanguageFiles = 3,
        removeLanguageFiles = 4,
        updateLanguageFiles = 5,
        remove = 6,
    };

    enum class groupPolicyType {
        admxBacked = 0,
        admxIngested = 1,
    };

    enum class groupPolicyUploadedDefinitionFileStatus {
        none = 0,
        uploadInProgress = 1,
        available = 2,
        assigned = 3,
        removalInProgress = 4,
        uploadFailed = 5,
        removalFailed = 6,
    };

    enum class androidManagedAppSafetyNetAppsVerificationType {
        none = 0,
        enabled = 1,
    };

    enum class androidManagedAppSafetyNetDeviceAttestationType {
        none = 0,
        basicIntegrity = 1,
        basicIntegrityAndDeviceCertification = 2,
    };

    enum class androidManagedAppSafetyNetEvaluationType {
        basic = 0,
        hardwareBacked = 1,
    };

    enum class appManagementLevel {
        unspecified = 0,
        unmanaged = 1,
        mdm = 2,
        androidEnterprise = 4,
    };

    enum class managedAppClipboardSharingLevel {
        allApps = 0,
        managedAppsWithPasteIn = 1,
        managedApps = 2,
        blocked = 3,
    };

    enum class managedAppDataEncryptionType {
        useDeviceSettings = 0,
        afterDeviceRestart = 1,
        whenDeviceLockedExceptOpenFiles = 2,
        whenDeviceLocked = 3,
    };

    enum class managedAppDataIngestionLocation {
        oneDriveForBusiness = 1,
        sharePoint = 2,
        camera = 3,
    };

    enum class managedAppDataStorageLocation {
        oneDriveForBusiness = 1,
        sharePoint = 2,
        box = 3,
        localStorage = 6,
    };

    enum class managedAppDataTransferLevel {
        allApps = 0,
        managedApps = 1,
        none = 2,
    };

    enum class managedAppDeviceThreatLevel {
        notConfigured = 0,
        secured = 1,
        low = 2,
        medium = 3,
        high = 4,
    };

    enum class managedAppFlaggedReason {
        none = 0,
        rootedDevice = 1,
        androidBootloaderUnlocked = 2,
        androidFactoryRomModified = 3,
    };

    enum class managedAppNotificationRestriction {
        allow = 0,
        blockOrganizationalData = 1,
        block = 2,
    };

    enum class managedAppPhoneNumberRedirectLevel {
        allApps = 0,
        managedApps = 1,
        customApp = 2,
        blocked = 3,
    };

    enum class managedAppPinCharacterSet {
        numeric = 0,
        alphanumericAndSymbol = 1,
    };

    enum class managedAppRemediationAction {
        block = 0,
        wipe = 1,
        warn = 2,
    };

    enum class managedBrowserType {
        notConfigured = 0,
        microsoftEdge = 1,
    };

    enum class targetedManagedAppGroupType {
        selectedPublicApps = 0,
        allCoreMicrosoftApps = 1,
        allMicrosoftApps = 2,
        allApps = 4,
    };

    enum class windowsInformationProtectionEnforcementLevel {
        noProtection = 0,
        encryptAndAuditOnly = 1,
        encryptAuditAndPrompt = 2,
        encryptAuditAndBlock = 3,
    };

    enum class windowsInformationProtectionPinCharacterRequirements {
        notAllow = 0,
        requireAtLeastOne = 1,
        allow = 2,
    };

    enum class microsoftTunnelLogCollectionStatus {
        pending = 0,
        completed = 1,
        failed = 2,
    };

    enum class microsoftTunnelServerHealthStatus {
        unknown = 0,
        healthy = 1,
        unhealthy = 2,
        warning = 3,
        offline = 4,
        upgradeInProgress = 5,
        upgradeFailed = 6,
    };

    enum class notificationTemplateBrandingOptions {
        none = 0,
        includeCompanyLogo = 1,
        includeCompanyName = 2,
        includeContactInformation = 4,
        includeCompanyPortalLink = 8,
    };

    enum class deviceManagementDomainJoinConnectorState {
        active = 0,
        error = 1,
        inactive = 2,
    };

    enum class appVulnerabilityTaskMitigationType {
        unknown = 0,
        update = 1,
        uninstall = 2,
        securityConfiguration = 3,
    };

    enum class deviceAppManagementTaskCategory {
        unknown = 0,
        advancedThreatProtection = 1,
    };

    enum class deviceAppManagementTaskPriority {
        none = 0,
        high = 1,
        low = 2,
    };

    enum class deviceAppManagementTaskStatus {
        unknown = 0,
        pending = 1,
        active = 2,
        completed = 3,
        rejected = 4,
    };

    enum class endpointSecurityConfigurationApplicablePlatform {
        unknown = 0,
        macOS = 1,
        windows10AndLater = 2,
        windows10AndWindowsServer = 3,
    };

    enum class endpointSecurityConfigurationProfileType {
        unknown = 0,
        antivirus = 1,
        windowsSecurity = 2,
        bitLocker = 3,
        fileVault = 4,
        firewall = 5,
        firewallRules = 6,
        endpointDetectionAndResponse = 7,
        deviceControl = 8,
        appAndBrowserIsolation = 9,
        exploitProtection = 10,
        webProtection = 11,
        applicationControl = 12,
        attackSurfaceReductionRules = 13,
        accountProtection = 14,
    };

    enum class endpointSecurityConfigurationType {
        unknown = 0,
        antivirus = 1,
        diskEncryption = 2,
        firewall = 3,
        endpointDetectionAndResponse = 4,
        attackSurfaceReduction = 5,
        accountProtection = 6,
    };

    enum class roleAssignmentScopeType {
        resourceScope = 0,
        allDevices = 1,
        allLicensedUsers = 2,
        allDevicesAndLicensedUsers = 3,
    };

    enum class remoteAssistanceOnboardingStatus {
        notOnboarded = 0,
        onboarding = 1,
        onboarded = 2,
    };

    enum class remoteAssistanceState {
        notConfigured = 0,
        disabled = 1,
        enabled = 2,
    };

    enum class deviceManagementExportJobLocalizationType {
        localizedValuesAsAdditionalColumn = 0,
        replaceLocalizableValues = 1,
    };

    enum class deviceManagementReportFileFormat {
        csv = 0,
        pdf = 1,
    };

    enum class deviceManagementReportStatus {
        unknown = 0,
        notStarted = 1,
        inProgress = 2,
        completed = 3,
        failed = 4,
    };

    enum class deviceManagementScheduledReportRecurrence {
        none = 0,
        daily = 1,
        weekly = 2,
        monthly = 3,
    };

    enum class embeddedSIMDeviceStateValue {
        notEvaluated = 0,
        failed = 1,
        installing = 2,
        installed = 3,
        deleting = 4,
        error = 5,
        deleted = 6,
        removedByUser = 7,
    };

    enum class deviceEnrollmentFailureReason {
        unknown = 0,
        authentication = 1,
        authorization = 2,
        accountValidation = 3,
        userValidation = 4,
        deviceNotSupported = 5,
        inMaintenance = 6,
        badRequest = 7,
        featureNotSupported = 8,
        enrollmentRestrictionsEnforced = 9,
        clientDisconnected = 10,
        userAbandonment = 11,
    };

    enum class deviceManagementAutopilotPolicyComplianceStatus {
        unknown = 0,
        compliant = 1,
        installed = 2,
        notCompliant = 3,
        notInstalled = 4,
        error = 5,
    };

    enum class deviceManagementAutopilotPolicyType {
        unknown = 0,
        application = 3,
        appModel = 7,
        configurationPolicy = 12,
    };

    enum class mobileAppActionType {
        unknown = 0,
        installCommandSent = 1,
        installed = 3,
        uninstalled = 4,
        userRequestedInstall = 5,
    };

    enum class mobileAppIntent {
        available = 0,
        notAvailable = 1,
        requiredInstall = 2,
        requiredUninstall = 3,
        requiredAndAvailableInstall = 4,
        availableInstallWithoutEnrollment = 5,
        exclude = 6,
    };

    enum class windowsAutopilotDeploymentState {
        unknown = 0,
        success = 1,
        inProgress = 2,
        failure = 3,
        successWithTimeout = 4,
        notAttempted = 5,
        disabled = 6,
    };

    enum class windowsAutopilotEnrollmentType {
        unknown = 0,
        azureADJoinedWithAutopilotProfile = 1,
        offlineDomainJoined = 2,
        azureADJoinedUsingDeviceAuthWithAutopilotProfile = 3,
        azureADJoinedUsingDeviceAuthWithoutAutopilotProfile = 4,
        azureADJoinedWithOfflineAutopilotProfile = 5,
        azureADJoinedWithWhiteGlove = 6,
        offlineDomainJoinedWithWhiteGlove = 7,
        offlineDomainJoinedWithOfflineAutopilotProfile = 8,
    };

    enum class windowsDefenderApplicationControlSupplementalPolicyStatuses {
        unknown = 0,
        success = 1,
        tokenError = 2,
        notAuthorizedByToken = 3,
        policyNotFound = 4,
    };

    enum class driverApprovalStatus {
        needsReview = 0,
        declined = 1,
        approved = 2,
        suspended = 3,
    };

    enum class driverCategory {
        recommended = 0,
        previouslyApproved = 1,
        other = 2,
    };

    enum class driverUpdateProfileApprovalType {
        manual = 0,
        automatic = 1,
    };

    enum class windowsQualityUpdateClassification {
        all = 0,
        security = 1,
        nonSecurity = 2,
    };

    enum class applicationType {
        universal = 1,
        desktop = 2,
    };

    enum class userPfxIntendedPurpose {
        unassigned = 0,
        smimeEncryption = 1,
        smimeSigning = 2,
        vpn = 4,
        wifi = 8,
    };

    enum class userPfxPaddingScheme {
        none = 0,
        pkcs1 = 1,
        oaepSha1 = 2,
        oaepSha256 = 3,
        oaepSha384 = 4,
        oaepSha512 = 5,
    };

    enum class postType {
        regular = 0,
        quick = 1,
        strategic = 2,
        unknownFutureValue = 3,
    };

    enum class serviceHealthClassificationType {
        advisory = 1,
        incident = 2,
        unknownFutureValue = 3,
    };

    enum class serviceHealthOrigin {
        microsoft = 1,
        thirdParty = 2,
        customer = 3,
        unknownFutureValue = 4,
    };

    enum class serviceHealthStatus {
        serviceOperational = 0,
        investigating = 1,
        restoringService = 2,
        verifyingService = 3,
        serviceRestored = 4,
        postIncidentReviewPublished = 5,
        serviceDegradation = 6,
        serviceInterruption = 7,
        extendedRecovery = 8,
        falsePositive = 9,
        investigationSuspended = 10,
        resolved = 11,
        mitigatedExternal = 12,
        mitigated = 13,
        resolvedExternal = 14,
        confirmed = 15,
        reported = 16,
        unknownFutureValue = 17,
    };

    enum class serviceUpdateCategory {
        preventOrFixIssue = 1,
        planForChange = 2,
        stayInformed = 3,
        unknownFutureValue = 4,
    };

    enum class serviceUpdateSeverity {
        normal = 1,
        high = 2,
        critical = 3,
        unknownFutureValue = 4,
    };

    enum class bucketAggregationSortProperty {
        count = 0,
        keyAsString = 1,
        keyAsNumber = 2,
        unknownFutureValue = 3,
    };

    enum class entityType {
        event = 0,
        message = 1,
        driveItem = 2,
        externalItem = 4,
        site = 5,
        list = 6,
        listItem = 7,
        drive = 8,
        unknownFutureValue = 9,
    };

    enum class searchAlterationType {
        suggestion = 0,
        modification = 1,
        unknownFutureValue = 2,
    };

    enum class priority {
        None = 0,
        High = 1,
        Low = 2,
    };

    enum class plannerContainerType {
        group = 1,
        unknownFutureValue = 2,
        roster = 3,
    };

    enum class plannerPlanContextType {
        teamsTab = 1,
        sharePointPage = 2,
        meetingNotes = 3,
        other = 4,
        unknownFutureValue = 5,
    };

    enum class plannerPreviewType {
        automatic = 0,
        noPreview = 1,
        checklist = 2,
        description = 3,
        reference = 4,
    };

    enum class onenotePatchActionType {
        Replace = 0,
        Append = 1,
        Delete = 2,
        Insert = 3,
        Prepend = 4,
    };

    enum class onenotePatchInsertPosition {
        After = 0,
        Before = 1,
    };

    enum class onenoteSourceService {
        Unknown = 0,
        OneDrive = 1,
        OneDriveForBusiness = 2,
        OnPremOneDriveForBusiness = 3,
    };

    enum class onenoteUserRole {
        None = -1,
        Owner = 0,
        Contributor = 1,
        Reader = 2,
    };

    enum class operationStatus {
        NotStarted = 0,
        Running = 1,
        Completed = 2,
        Failed = 3,
    };

    enum class allowedAudiences {
        me = 0,
        family = 1,
        contacts = 2,
        groupMembers = 4,
        organization = 8,
        federatedOrganizations = 16,
        everyone = 32,
        unknownFutureValue = 64,
    };

    enum class languageProficiencyLevel {
        elementary = 0,
        conversational = 1,
        limitedWorking = 2,
        professionalWorking = 3,
        fullProfessional = 4,
        nativeOrBilingual = 5,
        unknownFutureValue = 6,
    };

    enum class personAnnualEventType {
        birthday = 0,
        wedding = 1,
        work = 2,
        other = 3,
        unknownFutureValue = 5,
    };

    enum class personRelationship {
        manager = 0,
        colleague = 1,
        directReport = 2,
        dotLineReport = 3,
        assistant = 4,
        dotLineManager = 5,
        alternateContact = 6,
        _friend = 7,
        spouse = 8,
        sibling = 9,
        child = 10,
        parent = 11,
        sponsor = 12,
        emergencyContact = 13,
        other = 14,
        unknownFutureValue = 15,
    };

    enum class skillProficiencyLevel {
        elementary = 0,
        limitedWorking = 1,
        generalProfessional = 2,
        advancedProfessional = 3,
        expert = 4,
        unknownFutureValue = 5,
    };

    enum class translationBehavior {
        Ask = 0,
        Yes = 1,
        No = 2,
    };

    enum class roleAssignmentScheduleFilterByCurrentUserOptions {
        principal = 1,
        unknownFutureValue = 2,
    };

    enum class roleAssignmentScheduleInstanceFilterByCurrentUserOptions {
        principal = 1,
        unknownFutureValue = 2,
    };

    enum class roleAssignmentScheduleRequestFilterByCurrentUserOptions {
        principal = 1,
        createdBy = 2,
        approver = 3,
        unknownFutureValue = 4,
    };

    enum class roleEligibilityScheduleFilterByCurrentUserOptions {
        principal = 1,
        unknownFutureValue = 2,
    };

    enum class roleEligibilityScheduleInstanceFilterByCurrentUserOptions {
        principal = 1,
        unknownFutureValue = 2,
    };

    enum class roleEligibilityScheduleRequestFilterByCurrentUserOptions {
        principal = 1,
        createdBy = 2,
        approver = 3,
        unknownFutureValue = 4,
    };

    enum class approvalState {
        pending = 0,
        approved = 1,
        denied = 2,
        aborted = 3,
        canceled = 4,
    };

    enum class roleSummaryStatus {
        ok = 0,
        bad = 1,
    };

    enum class setupStatus {
        unknown = 0,
        notRegisteredYet = 1,
        registeredSetupNotStarted = 2,
        registeredSetupInProgress = 3,
        registrationAndSetupCompleted = 4,
        registrationFailed = 5,
        registrationTimedOut = 6,
        disabled = 7,
    };

    enum class jobHistorySummaryType {
        Printer = 0,
        User = 1,
        Group = 2,
    };

    enum class printColorConfiguration {
        blackAndWhite = 0,
        grayscale = 1,
        color = 2,
        _auto = 3,
    };

    enum class printColorMode {
        blackAndWhite = 0,
        grayscale = 1,
        color = 2,
        _auto = 3,
    };

    enum class printDuplexConfiguration {
        twoSidedLongEdge = 0,
        twoSidedShortEdge = 1,
        oneSided = 2,
    };

    enum class printDuplexMode {
        flipOnLongEdge = 0,
        flipOnShortEdge = 1,
        oneSided = 2,
    };

    enum class printerFeedDirection {
        longEdgeFirst = 0,
        shortEdgeFirst = 1,
    };

    enum class printerFeedOrientation {
        longEdgeFirst = 0,
        shortEdgeFirst = 1,
    };

    enum class printerProcessingState {
        unknown = 0,
        idle = 1,
        processing = 2,
        stopped = 3,
        unknownFutureValue = 4,
    };

    enum class printerProcessingStateDetail {
        paused = 0,
        mediaJam = 2,
        mediaNeeded = 3,
        mediaLow = 4,
        mediaEmpty = 5,
        coverOpen = 6,
        interlockOpen = 7,
        outputTrayMissing = 9,
        outputAreaFull = 10,
        markerSupplyLow = 11,
        markerSupplyEmpty = 12,
        inputTrayMissing = 13,
        outputAreaAlmostFull = 14,
        markerWasteAlmostFull = 15,
        markerWasteFull = 16,
        fuserOverTemp = 17,
        fuserUnderTemp = 18,
        other = 19,
        none = 20,
        movingToPaused = 21,
        shutdown = 22,
        connectingToDevice = 23,
        timedOut = 24,
        stopping = 25,
        stoppedPartially = 26,
        tonerLow = 27,
        tonerEmpty = 28,
        spoolAreaFull = 29,
        doorOpen = 30,
        opticalPhotoConductorNearEndOfLife = 31,
        opticalPhotoConductorLifeOver = 32,
        developerLow = 33,
        developerEmpty = 34,
        interpreterResourceUnavailable = 35,
        unknownFutureValue = 36,
        alertRemovalOfBinaryChangeEntry = 37,
        banderAdded = 38,
        banderAlmostEmpty = 39,
        banderAlmostFull = 40,
        banderAtLimit = 41,
        banderClosed = 42,
        banderConfigurationChange = 43,
        banderCoverClosed = 44,
        banderCoverOpen = 45,
        banderEmpty = 46,
        banderFull = 47,
        banderInterlockClosed = 48,
        banderInterlockOpen = 49,
        banderJam = 50,
        banderLifeAlmostOver = 51,
        banderLifeOver = 52,
        banderMemoryExhausted = 53,
        banderMissing = 54,
        banderMotorFailure = 55,
        banderNearLimit = 56,
        banderOffline = 57,
        banderOpened = 58,
        banderOverTemperature = 59,
        banderPowerSaver = 60,
        banderRecoverableFailure = 61,
        banderRecoverableStorage = 62,
        banderRemoved = 63,
        banderResourceAdded = 64,
        banderResourceRemoved = 65,
        banderThermistorFailure = 66,
        banderTimingFailure = 67,
        banderTurnedOff = 68,
        banderTurnedOn = 69,
        banderUnderTemperature = 70,
        banderUnrecoverableFailure = 71,
        banderUnrecoverableStorageError = 72,
        banderWarmingUp = 73,
        binderAdded = 74,
        binderAlmostEmpty = 75,
        binderAlmostFull = 76,
        binderAtLimit = 77,
        binderClosed = 78,
        binderConfigurationChange = 79,
        binderCoverClosed = 80,
        binderCoverOpen = 81,
        binderEmpty = 82,
        binderFull = 83,
        binderInterlockClosed = 84,
        binderInterlockOpen = 85,
        binderJam = 86,
        binderLifeAlmostOver = 87,
        binderLifeOver = 88,
        binderMemoryExhausted = 89,
        binderMissing = 90,
        binderMotorFailure = 91,
        binderNearLimit = 92,
        binderOffline = 93,
        binderOpened = 94,
        binderOverTemperature = 95,
        binderPowerSaver = 96,
        binderRecoverableFailure = 97,
        binderRecoverableStorage = 98,
        binderRemoved = 99,
        binderResourceAdded = 100,
        binderResourceRemoved = 101,
        binderThermistorFailure = 102,
        binderTimingFailure = 103,
        binderTurnedOff = 104,
        binderTurnedOn = 105,
        binderUnderTemperature = 106,
        binderUnrecoverableFailure = 107,
        binderUnrecoverableStorageError = 108,
        binderWarmingUp = 109,
        cameraFailure = 110,
        chamberCooling = 111,
        chamberFailure = 112,
        chamberHeating = 113,
        chamberTemperatureHigh = 114,
        chamberTemperatureLow = 115,
        cleanerLifeAlmostOver = 116,
        cleanerLifeOver = 117,
        configurationChange = 118,
        deactivated = 119,
        deleted = 120,
        dieCutterAdded = 121,
        dieCutterAlmostEmpty = 122,
        dieCutterAlmostFull = 123,
        dieCutterAtLimit = 124,
        dieCutterClosed = 125,
        dieCutterConfigurationChange = 126,
        dieCutterCoverClosed = 127,
        dieCutterCoverOpen = 128,
        dieCutterEmpty = 129,
        dieCutterFull = 130,
        dieCutterInterlockClosed = 131,
        dieCutterInterlockOpen = 132,
        dieCutterJam = 133,
        dieCutterLifeAlmostOver = 134,
        dieCutterLifeOver = 135,
        dieCutterMemoryExhausted = 136,
        dieCutterMissing = 137,
        dieCutterMotorFailure = 138,
        dieCutterNearLimit = 139,
        dieCutterOffline = 140,
        dieCutterOpened = 141,
        dieCutterOverTemperature = 142,
        dieCutterPowerSaver = 143,
        dieCutterRecoverableFailure = 144,
        dieCutterRecoverableStorage = 145,
        dieCutterRemoved = 146,
        dieCutterResourceAdded = 147,
        dieCutterResourceRemoved = 148,
        dieCutterThermistorFailure = 149,
        dieCutterTimingFailure = 150,
        dieCutterTurnedOff = 151,
        dieCutterTurnedOn = 152,
        dieCutterUnderTemperature = 153,
        dieCutterUnrecoverableFailure = 154,
        dieCutterUnrecoverableStorageError = 155,
        dieCutterWarmingUp = 156,
        extruderCooling = 157,
        extruderFailure = 158,
        extruderHeating = 159,
        extruderJam = 160,
        extruderTemperatureHigh = 161,
        extruderTemperatureLow = 162,
        fanFailure = 163,
        faxModemLifeAlmostOver = 164,
        faxModemLifeOver = 165,
        faxModemMissing = 166,
        faxModemTurnedOff = 167,
        faxModemTurnedOn = 168,
        folderAdded = 169,
        folderAlmostEmpty = 170,
        folderAlmostFull = 171,
        folderAtLimit = 172,
        folderClosed = 173,
        folderConfigurationChange = 174,
        folderCoverClosed = 175,
        folderCoverOpen = 176,
        folderEmpty = 177,
        folderFull = 178,
        folderInterlockClosed = 179,
        folderInterlockOpen = 180,
        folderJam = 181,
        folderLifeAlmostOver = 182,
        folderLifeOver = 183,
        folderMemoryExhausted = 184,
        folderMissing = 185,
        folderMotorFailure = 186,
        folderNearLimit = 187,
        folderOffline = 188,
        folderOpened = 189,
        folderOverTemperature = 190,
        folderPowerSaver = 191,
        folderRecoverableFailure = 192,
        folderRecoverableStorage = 193,
        folderRemoved = 194,
        folderResourceAdded = 195,
        folderResourceRemoved = 196,
        folderThermistorFailure = 197,
        folderTimingFailure = 198,
        folderTurnedOff = 199,
        folderTurnedOn = 200,
        folderUnderTemperature = 201,
        folderUnrecoverableFailure = 202,
        folderUnrecoverableStorageError = 203,
        folderWarmingUp = 204,
        hibernate = 205,
        holdNewJobs = 206,
        identifyPrinterRequested = 207,
        imprinterAdded = 208,
        imprinterAlmostEmpty = 209,
        imprinterAlmostFull = 210,
        imprinterAtLimit = 211,
        imprinterClosed = 212,
        imprinterConfigurationChange = 213,
        imprinterCoverClosed = 214,
        imprinterCoverOpen = 215,
        imprinterEmpty = 216,
        imprinterFull = 217,
        imprinterInterlockClosed = 218,
        imprinterInterlockOpen = 219,
        imprinterJam = 220,
        imprinterLifeAlmostOver = 221,
        imprinterLifeOver = 222,
        imprinterMemoryExhausted = 223,
        imprinterMissing = 224,
        imprinterMotorFailure = 225,
        imprinterNearLimit = 226,
        imprinterOffline = 227,
        imprinterOpened = 228,
        imprinterOverTemperature = 229,
        imprinterPowerSaver = 230,
        imprinterRecoverableFailure = 231,
        imprinterRecoverableStorage = 232,
        imprinterRemoved = 233,
        imprinterResourceAdded = 234,
        imprinterResourceRemoved = 235,
        imprinterThermistorFailure = 236,
        imprinterTimingFailure = 237,
        imprinterTurnedOff = 238,
        imprinterTurnedOn = 239,
        imprinterUnderTemperature = 240,
        imprinterUnrecoverableFailure = 241,
        imprinterUnrecoverableStorageError = 242,
        imprinterWarmingUp = 243,
        inputCannotFeedSizeSelected = 244,
        inputManualInputRequest = 245,
        inputMediaColorChange = 246,
        inputMediaFormPartsChange = 247,
        inputMediaSizeChange = 248,
        inputMediaTrayFailure = 249,
        inputMediaTrayFeedError = 250,
        inputMediaTrayJam = 251,
        inputMediaTypeChange = 252,
        inputMediaWeightChange = 253,
        inputPickRollerFailure = 254,
        inputPickRollerLifeOver = 255,
        inputPickRollerLifeWarn = 256,
        inputPickRollerMissing = 257,
        inputTrayElevationFailure = 258,
        inputTrayPositionFailure = 259,
        inserterAdded = 260,
        inserterAlmostEmpty = 261,
        inserterAlmostFull = 262,
        inserterAtLimit = 263,
        inserterClosed = 264,
        inserterConfigurationChange = 265,
        inserterCoverClosed = 266,
        inserterCoverOpen = 267,
        inserterEmpty = 268,
        inserterFull = 269,
        inserterInterlockClosed = 270,
        inserterInterlockOpen = 271,
        inserterJam = 272,
        inserterLifeAlmostOver = 273,
        inserterLifeOver = 274,
        inserterMemoryExhausted = 275,
        inserterMissing = 276,
        inserterMotorFailure = 277,
        inserterNearLimit = 278,
        inserterOffline = 279,
        inserterOpened = 280,
        inserterOverTemperature = 281,
        inserterPowerSaver = 282,
        inserterRecoverableFailure = 283,
        inserterRecoverableStorage = 284,
        inserterRemoved = 285,
        inserterResourceAdded = 286,
        inserterResourceRemoved = 287,
        inserterThermistorFailure = 288,
        inserterTimingFailure = 289,
        inserterTurnedOff = 290,
        inserterTurnedOn = 291,
        inserterUnderTemperature = 292,
        inserterUnrecoverableFailure = 293,
        inserterUnrecoverableStorageError = 294,
        inserterWarmingUp = 295,
        interlockClosed = 296,
        interpreterCartridgeAdded = 297,
        interpreterCartridgeDeleted = 298,
        interpreterComplexPageEncountered = 299,
        interpreterMemoryDecrease = 300,
        interpreterMemoryIncrease = 301,
        interpreterResourceAdded = 302,
        interpreterResourceDeleted = 303,
        lampAtEol = 304,
        lampFailure = 305,
        lampNearEol = 306,
        laserAtEol = 307,
        laserFailure = 308,
        laserNearEol = 309,
        makeEnvelopeAdded = 310,
        makeEnvelopeAlmostEmpty = 311,
        makeEnvelopeAlmostFull = 312,
        makeEnvelopeAtLimit = 313,
        makeEnvelopeClosed = 314,
        makeEnvelopeConfigurationChange = 315,
        makeEnvelopeCoverClosed = 316,
        makeEnvelopeCoverOpen = 317,
        makeEnvelopeEmpty = 318,
        makeEnvelopeFull = 319,
        makeEnvelopeInterlockClosed = 320,
        makeEnvelopeInterlockOpen = 321,
        makeEnvelopeJam = 322,
        makeEnvelopeLifeAlmostOver = 323,
        makeEnvelopeLifeOver = 324,
        makeEnvelopeMemoryExhausted = 325,
        makeEnvelopeMissing = 326,
        makeEnvelopeMotorFailure = 327,
        makeEnvelopeNearLimit = 328,
        makeEnvelopeOffline = 329,
        makeEnvelopeOpened = 330,
        makeEnvelopeOverTemperature = 331,
        makeEnvelopePowerSaver = 332,
        makeEnvelopeRecoverableFailure = 333,
        makeEnvelopeRecoverableStorage = 334,
        makeEnvelopeRemoved = 335,
        makeEnvelopeResourceAdded = 336,
        makeEnvelopeResourceRemoved = 337,
        makeEnvelopeThermistorFailure = 338,
        makeEnvelopeTimingFailure = 339,
        makeEnvelopeTurnedOff = 340,
        makeEnvelopeTurnedOn = 341,
        makeEnvelopeUnderTemperature = 342,
        makeEnvelopeUnrecoverableFailure = 343,
        makeEnvelopeUnrecoverableStorageError = 344,
        makeEnvelopeWarmingUp = 345,
        markerAdjustingPrintQuality = 346,
        markerCleanerMissing = 347,
        markerDeveloperAlmostEmpty = 348,
        markerDeveloperEmpty = 349,
        markerDeveloperMissing = 350,
        markerFuserMissing = 351,
        markerFuserThermistorFailure = 352,
        markerFuserTimingFailure = 353,
        markerInkAlmostEmpty = 354,
        markerInkEmpty = 355,
        markerInkMissing = 356,
        markerOpcMissing = 357,
        markerPrintRibbonAlmostEmpty = 358,
        markerPrintRibbonEmpty = 359,
        markerPrintRibbonMissing = 360,
        markerSupplyAlmostEmpty = 361,
        markerSupplyMissing = 362,
        markerTonerCartridgeMissing = 363,
        markerTonerMissing = 364,
        markerWasteInkReceptacleAlmostFull = 365,
        markerWasteInkReceptacleFull = 366,
        markerWasteInkReceptacleMissing = 367,
        markerWasteMissing = 368,
        markerWasteTonerReceptacleAlmostFull = 369,
        markerWasteTonerReceptacleFull = 370,
        markerWasteTonerReceptacleMissing = 371,
        materialEmpty = 372,
        materialLow = 373,
        materialNeeded = 374,
        mediaDrying = 375,
        mediaPathCannotDuplexMediaSelected = 376,
        mediaPathFailure = 377,
        mediaPathInputEmpty = 378,
        mediaPathInputFeedError = 379,
        mediaPathInputJam = 380,
        mediaPathInputRequest = 381,
        mediaPathJam = 382,
        mediaPathMediaTrayAlmostFull = 383,
        mediaPathMediaTrayFull = 384,
        mediaPathMediaTrayMissing = 385,
        mediaPathOutputFeedError = 386,
        mediaPathOutputFull = 387,
        mediaPathOutputJam = 388,
        mediaPathPickRollerFailure = 389,
        mediaPathPickRollerLifeOver = 390,
        mediaPathPickRollerLifeWarn = 391,
        mediaPathPickRollerMissing = 392,
        motorFailure = 393,
        outputMailboxSelectFailure = 394,
        outputMediaTrayFailure = 395,
        outputMediaTrayFeedError = 396,
        outputMediaTrayJam = 397,
        perforaterAdded = 398,
        perforaterAlmostEmpty = 399,
        perforaterAlmostFull = 400,
        perforaterAtLimit = 401,
        perforaterClosed = 402,
        perforaterConfigurationChange = 403,
        perforaterCoverClosed = 404,
        perforaterCoverOpen = 405,
        perforaterEmpty = 406,
        perforaterFull = 407,
        perforaterInterlockClosed = 408,
        perforaterInterlockOpen = 409,
        perforaterJam = 410,
        perforaterLifeAlmostOver = 411,
        perforaterLifeOver = 412,
        perforaterMemoryExhausted = 413,
        perforaterMissing = 414,
        perforaterMotorFailure = 415,
        perforaterNearLimit = 416,
        perforaterOffline = 417,
        perforaterOpened = 418,
        perforaterOverTemperature = 419,
        perforaterPowerSaver = 420,
        perforaterRecoverableFailure = 421,
        perforaterRecoverableStorage = 422,
        perforaterRemoved = 423,
        perforaterResourceAdded = 424,
        perforaterResourceRemoved = 425,
        perforaterThermistorFailure = 426,
        perforaterTimingFailure = 427,
        perforaterTurnedOff = 428,
        perforaterTurnedOn = 429,
        perforaterUnderTemperature = 430,
        perforaterUnrecoverableFailure = 431,
        perforaterUnrecoverableStorageError = 432,
        perforaterWarmingUp = 433,
        platformCooling = 434,
        platformFailure = 435,
        platformHeating = 436,
        platformTemperatureHigh = 437,
        platformTemperatureLow = 438,
        powerDown = 439,
        powerUp = 440,
        printerManualReset = 441,
        printerNmsReset = 442,
        printerReadyToPrint = 443,
        puncherAdded = 444,
        puncherAlmostEmpty = 445,
        puncherAlmostFull = 446,
        puncherAtLimit = 447,
        puncherClosed = 448,
        puncherConfigurationChange = 449,
        puncherCoverClosed = 450,
        puncherCoverOpen = 451,
        puncherEmpty = 452,
        puncherFull = 453,
        puncherInterlockClosed = 454,
        puncherInterlockOpen = 455,
        puncherJam = 456,
        puncherLifeAlmostOver = 457,
        puncherLifeOver = 458,
        puncherMemoryExhausted = 459,
        puncherMissing = 460,
        puncherMotorFailure = 461,
        puncherNearLimit = 462,
        puncherOffline = 463,
        puncherOpened = 464,
        puncherOverTemperature = 465,
        puncherPowerSaver = 466,
        puncherRecoverableFailure = 467,
        puncherRecoverableStorage = 468,
        puncherRemoved = 469,
        puncherResourceAdded = 470,
        puncherResourceRemoved = 471,
        puncherThermistorFailure = 472,
        puncherTimingFailure = 473,
        puncherTurnedOff = 474,
        puncherTurnedOn = 475,
        puncherUnderTemperature = 476,
        puncherUnrecoverableFailure = 477,
        puncherUnrecoverableStorageError = 478,
        puncherWarmingUp = 479,
        resuming = 480,
        scanMediaPathFailure = 481,
        scanMediaPathInputEmpty = 482,
        scanMediaPathInputFeedError = 483,
        scanMediaPathInputJam = 484,
        scanMediaPathInputRequest = 485,
        scanMediaPathJam = 486,
        scanMediaPathOutputFeedError = 487,
        scanMediaPathOutputFull = 488,
        scanMediaPathOutputJam = 489,
        scanMediaPathPickRollerFailure = 490,
        scanMediaPathPickRollerLifeOver = 491,
        scanMediaPathPickRollerLifeWarn = 492,
        scanMediaPathPickRollerMissing = 493,
        scanMediaPathTrayAlmostFull = 494,
        scanMediaPathTrayFull = 495,
        scanMediaPathTrayMissing = 496,
        scannerLightFailure = 497,
        scannerLightLifeAlmostOver = 498,
        scannerLightLifeOver = 499,
        scannerLightMissing = 500,
        scannerSensorFailure = 501,
        scannerSensorLifeAlmostOver = 502,
        scannerSensorLifeOver = 503,
        scannerSensorMissing = 504,
        separationCutterAdded = 505,
        separationCutterAlmostEmpty = 506,
        separationCutterAlmostFull = 507,
        separationCutterAtLimit = 508,
        separationCutterClosed = 509,
        separationCutterConfigurationChange = 510,
        separationCutterCoverClosed = 511,
        separationCutterCoverOpen = 512,
        separationCutterEmpty = 513,
        separationCutterFull = 514,
        separationCutterInterlockClosed = 515,
        separationCutterInterlockOpen = 516,
        separationCutterJam = 517,
        separationCutterLifeAlmostOver = 518,
        separationCutterLifeOver = 519,
        separationCutterMemoryExhausted = 520,
        separationCutterMissing = 521,
        separationCutterMotorFailure = 522,
        separationCutterNearLimit = 523,
        separationCutterOffline = 524,
        separationCutterOpened = 525,
        separationCutterOverTemperature = 526,
        separationCutterPowerSaver = 527,
        separationCutterRecoverableFailure = 528,
        separationCutterRecoverableStorage = 529,
        separationCutterRemoved = 530,
        separationCutterResourceAdded = 531,
        separationCutterResourceRemoved = 532,
        separationCutterThermistorFailure = 533,
        separationCutterTimingFailure = 534,
        separationCutterTurnedOff = 535,
        separationCutterTurnedOn = 536,
        separationCutterUnderTemperature = 537,
        separationCutterUnrecoverableFailure = 538,
        separationCutterUnrecoverableStorageError = 539,
        separationCutterWarmingUp = 540,
        sheetRotatorAdded = 541,
        sheetRotatorAlmostEmpty = 542,
        sheetRotatorAlmostFull = 543,
        sheetRotatorAtLimit = 544,
        sheetRotatorClosed = 545,
        sheetRotatorConfigurationChange = 546,
        sheetRotatorCoverClosed = 547,
        sheetRotatorCoverOpen = 548,
        sheetRotatorEmpty = 549,
        sheetRotatorFull = 550,
        sheetRotatorInterlockClosed = 551,
        sheetRotatorInterlockOpen = 552,
        sheetRotatorJam = 553,
        sheetRotatorLifeAlmostOver = 554,
        sheetRotatorLifeOver = 555,
        sheetRotatorMemoryExhausted = 556,
        sheetRotatorMissing = 557,
        sheetRotatorMotorFailure = 558,
        sheetRotatorNearLimit = 559,
        sheetRotatorOffline = 560,
        sheetRotatorOpened = 561,
        sheetRotatorOverTemperature = 562,
        sheetRotatorPowerSaver = 563,
        sheetRotatorRecoverableFailure = 564,
        sheetRotatorRecoverableStorage = 565,
        sheetRotatorRemoved = 566,
        sheetRotatorResourceAdded = 567,
        sheetRotatorResourceRemoved = 568,
        sheetRotatorThermistorFailure = 569,
        sheetRotatorTimingFailure = 570,
        sheetRotatorTurnedOff = 571,
        sheetRotatorTurnedOn = 572,
        sheetRotatorUnderTemperature = 573,
        sheetRotatorUnrecoverableFailure = 574,
        sheetRotatorUnrecoverableStorageError = 575,
        sheetRotatorWarmingUp = 576,
        slitterAdded = 577,
        slitterAlmostEmpty = 578,
        slitterAlmostFull = 579,
        slitterAtLimit = 580,
        slitterClosed = 581,
        slitterConfigurationChange = 582,
        slitterCoverClosed = 583,
        slitterCoverOpen = 584,
        slitterEmpty = 585,
        slitterFull = 586,
        slitterInterlockClosed = 587,
        slitterInterlockOpen = 588,
        slitterJam = 589,
        slitterLifeAlmostOver = 590,
        slitterLifeOver = 591,
        slitterMemoryExhausted = 592,
        slitterMissing = 593,
        slitterMotorFailure = 594,
        slitterNearLimit = 595,
        slitterOffline = 596,
        slitterOpened = 597,
        slitterOverTemperature = 598,
        slitterPowerSaver = 599,
        slitterRecoverableFailure = 600,
        slitterRecoverableStorage = 601,
        slitterRemoved = 602,
        slitterResourceAdded = 603,
        slitterResourceRemoved = 604,
        slitterThermistorFailure = 605,
        slitterTimingFailure = 606,
        slitterTurnedOff = 607,
        slitterTurnedOn = 608,
        slitterUnderTemperature = 609,
        slitterUnrecoverableFailure = 610,
        slitterUnrecoverableStorageError = 611,
        slitterWarmingUp = 612,
        stackerAdded = 613,
        stackerAlmostEmpty = 614,
        stackerAlmostFull = 615,
        stackerAtLimit = 616,
        stackerClosed = 617,
        stackerConfigurationChange = 618,
        stackerCoverClosed = 619,
        stackerCoverOpen = 620,
        stackerEmpty = 621,
        stackerFull = 622,
        stackerInterlockClosed = 623,
        stackerInterlockOpen = 624,
        stackerJam = 625,
        stackerLifeAlmostOver = 626,
        stackerLifeOver = 627,
        stackerMemoryExhausted = 628,
        stackerMissing = 629,
        stackerMotorFailure = 630,
        stackerNearLimit = 631,
        stackerOffline = 632,
        stackerOpened = 633,
        stackerOverTemperature = 634,
        stackerPowerSaver = 635,
        stackerRecoverableFailure = 636,
        stackerRecoverableStorage = 637,
        stackerRemoved = 638,
        stackerResourceAdded = 639,
        stackerResourceRemoved = 640,
        stackerThermistorFailure = 641,
        stackerTimingFailure = 642,
        stackerTurnedOff = 643,
        stackerTurnedOn = 644,
        stackerUnderTemperature = 645,
        stackerUnrecoverableFailure = 646,
        stackerUnrecoverableStorageError = 647,
        stackerWarmingUp = 648,
        standby = 649,
        staplerAdded = 650,
        staplerAlmostEmpty = 651,
        staplerAlmostFull = 652,
        staplerAtLimit = 653,
        staplerClosed = 654,
        staplerConfigurationChange = 655,
        staplerCoverClosed = 656,
        staplerCoverOpen = 657,
        staplerEmpty = 658,
        staplerFull = 659,
        staplerInterlockClosed = 660,
        staplerInterlockOpen = 661,
        staplerJam = 662,
        staplerLifeAlmostOver = 663,
        staplerLifeOver = 664,
        staplerMemoryExhausted = 665,
        staplerMissing = 666,
        staplerMotorFailure = 667,
        staplerNearLimit = 668,
        staplerOffline = 669,
        staplerOpened = 670,
        staplerOverTemperature = 671,
        staplerPowerSaver = 672,
        staplerRecoverableFailure = 673,
        staplerRecoverableStorage = 674,
        staplerRemoved = 675,
        staplerResourceAdded = 676,
        staplerResourceRemoved = 677,
        staplerThermistorFailure = 678,
        staplerTimingFailure = 679,
        staplerTurnedOff = 680,
        staplerTurnedOn = 681,
        staplerUnderTemperature = 682,
        staplerUnrecoverableFailure = 683,
        staplerUnrecoverableStorageError = 684,
        staplerWarmingUp = 685,
        stitcherAdded = 686,
        stitcherAlmostEmpty = 687,
        stitcherAlmostFull = 688,
        stitcherAtLimit = 689,
        stitcherClosed = 690,
        stitcherConfigurationChange = 691,
        stitcherCoverClosed = 692,
        stitcherCoverOpen = 693,
        stitcherEmpty = 694,
        stitcherFull = 695,
        stitcherInterlockClosed = 696,
        stitcherInterlockOpen = 697,
        stitcherJam = 698,
        stitcherLifeAlmostOver = 699,
        stitcherLifeOver = 700,
        stitcherMemoryExhausted = 701,
        stitcherMissing = 702,
        stitcherMotorFailure = 703,
        stitcherNearLimit = 704,
        stitcherOffline = 705,
        stitcherOpened = 706,
        stitcherOverTemperature = 707,
        stitcherPowerSaver = 708,
        stitcherRecoverableFailure = 709,
        stitcherRecoverableStorage = 710,
        stitcherRemoved = 711,
        stitcherResourceAdded = 712,
        stitcherResourceRemoved = 713,
        stitcherThermistorFailure = 714,
        stitcherTimingFailure = 715,
        stitcherTurnedOff = 716,
        stitcherTurnedOn = 717,
        stitcherUnderTemperature = 718,
        stitcherUnrecoverableFailure = 719,
        stitcherUnrecoverableStorageError = 720,
        stitcherWarmingUp = 721,
        subunitAdded = 722,
        subunitAlmostEmpty = 723,
        subunitAlmostFull = 724,
        subunitAtLimit = 725,
        subunitClosed = 726,
        subunitCoolingDown = 727,
        subunitEmpty = 728,
        subunitFull = 729,
        subunitLifeAlmostOver = 730,
        subunitLifeOver = 731,
        subunitMemoryExhausted = 732,
        subunitMissing = 733,
        subunitMotorFailure = 734,
        subunitNearLimit = 735,
        subunitOffline = 736,
        subunitOpened = 737,
        subunitOverTemperature = 738,
        subunitPowerSaver = 739,
        subunitRecoverableFailure = 740,
        subunitRecoverableStorage = 741,
        subunitRemoved = 742,
        subunitResourceAdded = 743,
        subunitResourceRemoved = 744,
        subunitThermistorFailure = 745,
        subunitTimingFailure = 746,
        subunitTurnedOff = 747,
        subunitTurnedOn = 748,
        subunitUnderTemperature = 749,
        subunitUnrecoverableFailure = 750,
        subunitUnrecoverableStorage = 751,
        subunitWarmingUp = 752,
        suspend = 753,
        testing = 754,
        trimmerAdded = 755,
        trimmerAlmostEmpty = 756,
        trimmerAlmostFull = 757,
        trimmerAtLimit = 758,
        trimmerClosed = 759,
        trimmerConfigurationChange = 760,
        trimmerCoverClosed = 761,
        trimmerCoverOpen = 762,
        trimmerEmpty = 763,
        trimmerFull = 764,
        trimmerInterlockClosed = 765,
        trimmerInterlockOpen = 766,
        trimmerJam = 767,
        trimmerLifeAlmostOver = 768,
        trimmerLifeOver = 769,
        trimmerMemoryExhausted = 770,
        trimmerMissing = 771,
        trimmerMotorFailure = 772,
        trimmerNearLimit = 773,
        trimmerOffline = 774,
        trimmerOpened = 775,
        trimmerOverTemperature = 776,
        trimmerPowerSaver = 777,
        trimmerRecoverableFailure = 778,
        trimmerRecoverableStorage = 779,
        trimmerRemoved = 780,
        trimmerResourceAdded = 781,
        trimmerResourceRemoved = 782,
        trimmerThermistorFailure = 783,
        trimmerTimingFailure = 784,
        trimmerTurnedOff = 785,
        trimmerTurnedOn = 786,
        trimmerUnderTemperature = 787,
        trimmerUnrecoverableFailure = 788,
        trimmerUnrecoverableStorageError = 789,
        trimmerWarmingUp = 790,
        unknown = 791,
        wrapperAdded = 792,
        wrapperAlmostEmpty = 793,
        wrapperAlmostFull = 794,
        wrapperAtLimit = 795,
        wrapperClosed = 796,
        wrapperConfigurationChange = 797,
        wrapperCoverClosed = 798,
        wrapperCoverOpen = 799,
        wrapperEmpty = 800,
        wrapperFull = 801,
        wrapperInterlockClosed = 802,
        wrapperInterlockOpen = 803,
        wrapperJam = 804,
        wrapperLifeAlmostOver = 805,
        wrapperLifeOver = 806,
        wrapperMemoryExhausted = 807,
        wrapperMissing = 808,
        wrapperMotorFailure = 809,
        wrapperNearLimit = 810,
        wrapperOffline = 811,
        wrapperOpened = 812,
        wrapperOverTemperature = 813,
        wrapperPowerSaver = 814,
        wrapperRecoverableFailure = 815,
        wrapperRecoverableStorage = 816,
        wrapperRemoved = 817,
        wrapperResourceAdded = 818,
        wrapperResourceRemoved = 819,
        wrapperThermistorFailure = 820,
        wrapperTimingFailure = 821,
        wrapperTurnedOff = 822,
        wrapperTurnedOn = 823,
        wrapperUnderTemperature = 824,
        wrapperUnrecoverableFailure = 825,
        wrapperUnrecoverableStorageError = 826,
        wrapperWarmingUp = 827,
    };

    enum class printerProcessingStateReason {
        paused = 0,
        mediaJam = 2,
        mediaNeeded = 3,
        mediaLow = 4,
        mediaEmpty = 5,
        coverOpen = 6,
        interlockOpen = 7,
        outputTrayMissing = 9,
        outputAreaFull = 10,
        markerSupplyLow = 11,
        markerSupplyEmpty = 12,
        inputTrayMissing = 13,
        outputAreaAlmostFull = 14,
        markerWasteAlmostFull = 15,
        markerWasteFull = 16,
        fuserOverTemp = 17,
        fuserUnderTemp = 18,
        other = 19,
        none = 20,
        movingToPaused = 21,
        shutdown = 22,
        connectingToDevice = 23,
        timedOut = 24,
        stopping = 25,
        stoppedPartially = 26,
        tonerLow = 27,
        tonerEmpty = 28,
        spoolAreaFull = 29,
        doorOpen = 30,
        opticalPhotoConductorNearEndOfLife = 31,
        opticalPhotoConductorLifeOver = 32,
        developerLow = 33,
        developerEmpty = 34,
        interpreterResourceUnavailable = 35,
        unknownFutureValue = 36,
    };

    enum class printEvent {
        jobStarted = 0,
        unknownFutureValue = 1,
    };

    enum class printFinishing {
        none = 3,
        staple = 4,
        punch = 5,
        cover = 6,
        bind = 7,
        saddleStitch = 8,
        stitchEdge = 9,
        stapleTopLeft = 20,
        stapleBottomLeft = 21,
        stapleTopRight = 22,
        stapleBottomRight = 23,
        stitchLeftEdge = 24,
        stitchTopEdge = 25,
        stitchRightEdge = 26,
        stitchBottomEdge = 27,
        stapleDualLeft = 28,
        stapleDualTop = 29,
        stapleDualRight = 30,
        stapleDualBottom = 31,
        unknownFutureValue = 32,
    };

    enum class printJobProcessingState {
        unknown = 0,
        pending = 1,
        processing = 2,
        paused = 3,
        stopped = 4,
        completed = 5,
        canceled = 6,
        aborted = 7,
    };

    enum class printJobStateDetail {
        uploadPending = 0,
        transforming = 1,
        completedSuccessfully = 2,
        completedWithWarnings = 3,
        completedWithErrors = 4,
        releaseWait = 5,
        interpreting = 6,
        unknownFutureValue = 7,
    };

    enum class printMediaType {
        stationery = 0,
        transparency = 1,
        envelope = 2,
        envelopePlain = 3,
        continuous = 4,
        screen = 5,
        screenPaged = 6,
        continuousLong = 7,
        continuousShort = 8,
        envelopeWindow = 9,
        multiPartForm = 10,
        multiLayer = 11,
        labels = 12,
    };

    enum class printMultipageLayout {
        clockwiseFromTopLeft = 0,
        counterclockwiseFromTopLeft = 1,
        counterclockwiseFromTopRight = 2,
        clockwiseFromTopRight = 3,
        counterclockwiseFromBottomLeft = 4,
        clockwiseFromBottomLeft = 5,
        counterclockwiseFromBottomRight = 6,
        clockwiseFromBottomRight = 7,
    };

    enum class printOperationProcessingState {
        notStarted = 0,
        running = 1,
        succeeded = 2,
        failed = 3,
        unknownFutureValue = 4,
    };

    enum class printOrientation {
        portrait = 3,
        landscape = 4,
        reverseLandscape = 5,
        reversePortrait = 6,
    };

    enum class printPresentationDirection {
        clockwiseFromTopLeft = 0,
        counterClockwiseFromTopLeft = 1,
        counterClockwiseFromTopRight = 2,
        clockwiseFromTopRight = 3,
        counterClockwiseFromBottomLeft = 4,
        clockwiseFromBottomLeft = 5,
        counterClockwiseFromBottomRight = 6,
        clockwiseFromBottomRight = 7,
    };

    enum class printQuality {
        low = 0,
        medium = 1,
        high = 2,
        unknownFutureValue = 3,
    };

    enum class printScaling {
        _auto = 0,
        shrinkToFit = 1,
        fill = 2,
        fit = 3,
        none = 4,
        unknownFutureValue = 5,
    };

    enum class printTaskProcessingState {
        pending = 0,
        processing = 1,
        completed = 2,
        aborted = 3,
        unknownFutureValue = 4,
    };

    enum class status {
        active = 0,
        updated = 1,
        deleted = 2,
        ignored = 3,
        unknownFutureValue = 4,
    };

    enum class dataPolicyOperationStatus {
        notStarted = 0,
        running = 1,
        complete = 2,
        failed = 3,
        unknownFutureValue = 4,
    };

    enum class payloadDeliveryPlatform {
        unknown = 0,
        sms = 1,
        email = 2,
        teams = 3,
        unknownFutureValue = 4,
    };

    enum class payloadSource {
        unknown = 0,
        global = 1,
        tenant = 2,
        unknownFutureValue = 3,
    };

    enum class simulationAttackTechnique {
        unknown = 0,
        credentialHarvesting = 1,
        attachmentMalware = 2,
        driveByUrl = 3,
        linkInAttachment = 4,
        linkToMalwareFile = 5,
        unknownFutureValue = 6,
    };

    enum class simulationAttackType {
        unknown = 0,
        social = 1,
        cloud = 2,
        endpoint = 3,
        unknownFutureValue = 4,
    };

    enum class simulationMode {
        real = 0,
        preview = 1,
        unknownFutureValue = 2,
    };

    enum class simulationStatus {
        unknown = 0,
        draft = 1,
        inProgress = 2,
        scheduled = 3,
        completed = 4,
        partiallyCompleted = 5,
        failed = 6,
        cancelled = 7,
        excluded = 8,
        deleted = 9,
        included = 10,
        unknownFutureValue = 11,
    };

    enum class trainingAssignmentPreference {
        unknown = 0,
        _auto = 1,
        manual = 2,
        unknownFutureValue = 3,
    };

    enum class trainingContentPreference {
        unknown = 0,
        microsoft = 1,
        custom = 2,
        noTraining = 3,
        unknownFutureValue = 4,
    };

    enum class trainingStatus {
        unknown = 0,
        assigned = 1,
        inProgress = 2,
        completed = 3,
        overdue = 4,
        notCompleted = 5,
        unknownFutureValue = 6,
    };

    enum class accountStatus {
        unknown = 0,
        staged = 1,
        active = 2,
        suspended = 3,
        deleted = 4,
        unknownFutureValue = 127,
    };

    enum class alertFeedback {
        unknown = 0,
        truePositive = 1,
        falsePositive = 2,
        benignPositive = 3,
        unknownFutureValue = 127,
    };

    enum class alertSeverity {
        unknown = 0,
        informational = 1,
        low = 2,
        medium = 3,
        high = 4,
        unknownFutureValue = 127,
    };

    enum class alertStatus {
        unknown = 0,
        newAlert = 1,
        inProgress = 2,
        resolved = 3,
        dismissed = 4,
        unknownFutureValue = 127,
    };

    enum class applicationPermissionsRequired {
        unknown = 0,
        anonymous = 1,
        guest = 2,
        user = 3,
        administrator = 4,
        system = 5,
        unknownFutureValue = 127,
    };

    enum class connectionDirection {
        unknown = 0,
        inbound = 1,
        outbound = 2,
        unknownFutureValue = 127,
    };

    enum class connectionStatus {
        unknown = 0,
        attempted = 1,
        succeeded = 2,
        blocked = 3,
        failed = 4,
        unknownFutureValue = 127,
    };

    enum class diamondModel {
        unknown = 0,
        adversary = 1,
        capability = 2,
        infrastructure = 3,
        victim = 4,
        unknownFutureValue = 127,
    };

    enum class emailRole {
        unknown = 0,
        sender = 1,
        recipient = 2,
        unknownFutureValue = 127,
    };

    enum class fileHashType {
        unknown = 0,
        sha1 = 1,
        sha256 = 2,
        md5 = 3,
        authenticodeHash256 = 4,
        lsHash = 5,
        ctph = 6,
        unknownFutureValue = 127,
    };

    enum class logonType {
        unknown = 0,
        interactive = 1,
        remoteInteractive = 2,
        network = 3,
        batch = 4,
        service = 5,
        unknownFutureValue = 127,
    };

    enum class processIntegrityLevel {
        unknown = 0,
        untrusted = 1,
        low = 2,
        medium = 3,
        high = 4,
        system = 5,
        unknownFutureValue = 127,
    };

    enum class registryHive {
        unknown = 0,
        currentConfig = 1,
        currentUser = 2,
        localMachineSam = 3,
        localMachineSecurity = 4,
        localMachineSoftware = 5,
        localMachineSystem = 6,
        usersDefault = 7,
        unknownFutureValue = 127,
    };

    enum class registryOperation {
        unknown = 0,
        create = 1,
        modify = 2,
        _delete = 3,
        unknownFutureValue = 127,
    };

    enum class registryValueType {
        unknown = 0,
        binary = 1,
        dword = 2,
        dwordLittleEndian = 3,
        dwordBigEndian = 4,
        expandSz = 5,
        link = 6,
        multiSz = 7,
        none = 8,
        qword = 9,
        qwordlittleEndian = 10,
        sz = 11,
        unknownFutureValue = 127,
    };

    enum class securityNetworkProtocol {
        unknown = -1,
        ip = 0,
        icmp = 1,
        igmp = 2,
        ggp = 3,
        ipv4 = 4,
        tcp = 6,
        pup = 12,
        udp = 17,
        idp = 22,
        ipv6 = 41,
        ipv6RoutingHeader = 43,
        ipv6FragmentHeader = 44,
        ipSecEncapsulatingSecurityPayload = 50,
        ipSecAuthenticationHeader = 51,
        icmpV6 = 58,
        ipv6NoNextHeader = 59,
        ipv6DestinationOptions = 60,
        nd = 77,
        raw = 255,
        ipx = 1000,
        spx = 1256,
        spxII = 1257,
        unknownFutureValue = 32767,
    };

    enum class securityResourceType {
        unknown = 0,
        attacked = 1,
        related = 2,
        unknownFutureValue = 3,
    };

    enum class tiAction {
        unknown = 0,
        allow = 1,
        block = 2,
        alert = 3,
        unknownFutureValue = 127,
    };

    enum class tlpLevel {
        unknown = 0,
        white = 1,
        green = 2,
        amber = 3,
        red = 4,
        unknownFutureValue = 127,
    };

    enum class userAccountSecurityType {
        unknown = 0,
        standard = 1,
        power = 2,
        administrator = 3,
        unknownFutureValue = 127,
    };

    enum class accessLevel {
        everyone = 0,
        invited = 1,
        locked = 2,
        sameEnterprise = 3,
        sameEnterpriseAndFederated = 4,
    };

    enum class autoAdmittedUsersType {
        everyoneInCompany = 0,
        everyone = 1,
    };

    enum class broadcastMeetingAudience {
        roleIsAttendee = 0,
        organization = 1,
        everyone = 2,
        unknownFutureValue = 3,
    };

    enum class callDirection {
        incoming = 0,
        outgoing = 1,
    };

    enum class callDisposition {
        _default = 0,
        simultaneousRing = 1,
        forward = 2,
    };

    enum class callState {
        incoming = 0,
        establishing = 1,
        ringing = 2,
        established = 3,
        hold = 4,
        transferring = 5,
        transferAccepted = 6,
        redirecting = 7,
        terminating = 8,
        terminated = 9,
        unknownFutureValue = 10,
    };

    enum class callTranscriptionState {
        notStarted = 0,
        active = 1,
        inactive = 2,
        unknownFutureValue = 3,
    };

    enum class changeType {
        created = 0,
        updated = 1,
        deleted = 2,
    };

    enum class endpointType {
        _default = 0,
        voicemail = 1,
        skypeForBusiness = 2,
        skypeForBusinessVoipPhone = 3,
        unknownFutureValue = 4,
    };

    enum class mediaDirection {
        inactive = 0,
        sendOnly = 1,
        receiveOnly = 2,
        sendReceive = 3,
    };

    enum class mediaState {
        active = 0,
        inactive = 1,
        unknownFutureValue = 2,
    };

    enum class meetingCapabilities {
        questionAndAnswer = 0,
        unknownFutureValue = 1,
    };

    enum class meetingChatMode {
        enabled = 0,
        disabled = 1,
        limited = 2,
        unknownFutureValue = 3,
    };

    enum class modality {
        unknown = 0,
        audio = 1,
        video = 2,
        videoBasedScreenSharing = 3,
        data = 4,
        unknownFutureValue = 5,
    };

    enum class onlineMeetingRole {
        attendee = 0,
        presenter = 1,
        unknownFutureValue = 3,
        producer = 2,
    };

    enum class playPromptCompletionReason {
        unknown = 0,
        completedSuccessfully = 1,
        mediaOperationCanceled = 2,
        unknownFutureValue = 3,
    };

    enum class recordCompletionReason {
        operationCanceled = 0,
        stopToneDetected = 1,
        maxRecordDurationReached = 2,
        initialSilenceTimeout = 3,
        maxSilenceTimeout = 4,
        playPromptFailed = 5,
        playBeepFailed = 6,
        mediaReceiveTimeout = 7,
        unspecifiedError = 8,
    };

    enum class recordingStatus {
        unknown = 0,
        notRecording = 1,
        recording = 2,
        failed = 3,
        unknownFutureValue = 4,
    };

    enum class rejectReason {
        none = 0,
        busy = 1,
        forbidden = 2,
        unknownFutureValue = 3,
    };

    enum class routingMode {
        oneToOne = 0,
        multicast = 1,
    };

    enum class routingPolicy {
        none = 0,
        noMissedCall = 1,
        disableForwardingExceptPhone = 2,
        disableForwarding = 3,
        preferSkypeForBusiness = 5,
        unknownFutureValue = 6,
    };

    enum class routingType {
        forwarded = 0,
        lookup = 1,
        selfFork = 2,
        unknownFutureValue = 3,
    };

    enum class screenSharingRole {
        viewer = 0,
        sharer = 1,
    };

    enum class tone {
        tone0 = 0,
        tone1 = 1,
        tone2 = 2,
        tone3 = 3,
        tone4 = 4,
        tone5 = 5,
        tone6 = 6,
        tone7 = 7,
        tone8 = 8,
        tone9 = 9,
        star = 10,
        pound = 11,
        a = 12,
        b = 13,
        c = 14,
        d = 15,
        flash = 16,
    };

    enum class attestationLevel {
        attested = 0,
        notAttested = 1,
        unknownFutureValue = 2,
    };

    enum class authenticationMethodKeyStrength {
        normal = 0,
        weak = 1,
        unknown = 2,
    };

    enum class authenticationMethodSignInState {
        notSupported = 0,
        notAllowedByPolicy = 1,
        notEnabled = 2,
        phoneNumberNotUnique = 3,
        ready = 4,
        notConfigured = 5,
        unknownFutureValue = 6,
    };

    enum class authenticationPhoneType {
        mobile = 0,
        alternateMobile = 1,
        office = 2,
        unknownFutureValue = 3,
    };

    enum class longRunningOperationStatus {
        notstarted = 0,
        running = 1,
        succeeded = 2,
        failed = 3,
    };

    enum class lifecycleEventType {
        missed = 0,
        subscriptionRemoved = 1,
        reauthorizationRequired = 2,
    };

    enum class binaryOperator {
        _or = 0,
        _and = 1,
    };

    enum class accessType {
        grant = 1,
        deny = 2,
    };

    enum class aclType {
        user = 1,
        group = 2,
        everyone = 3,
        everyoneExceptGuests = 4,
        externalGroup = 5,
        unknownFutureValue = 6,
    };

    enum class connectionOperationStatus {
        unspecified = 0,
        inprogress = 1,
        completed = 2,
        failed = 3,
    };

    enum class connectionState {
        draft = 1,
        ready = 2,
        obsolete = 3,
        limitExceeded = 4,
        unknownFutureValue = 5,
    };

    enum class externalGroupMemberType {
        user = 1,
        group = 2,
    };

    enum class externalItemContentType {
        text = 1,
        html = 2,
        unknownFutureValue = 3,
    };

    enum class identitySourceType {
        azureActiveDirectory = 1,
        external = 2,
    };

    enum class label {
        title = 0,
        url = 1,
        createdBy = 2,
        lastModifiedBy = 3,
        authors = 4,
        createdDateTime = 5,
        lastModifiedDateTime = 6,
        fileName = 7,
        fileExtension = 8,
    };

    enum class propertyType {
        string = 0,
        int64 = 1,
        _double = 2,
        dateTime = 3,
        boolean = 4,
        stringCollection = 5,
        int64Collection = 6,
        doubleCollection = 7,
        dateTimeCollection = 8,
    };

    enum class callRecordingStatus {
        success = 0,
        failure = 1,
        initial = 2,
        chunkFinished = 3,
        unknownFutureValue = 4,
    };

    enum class channelMembershipType {
        standard = 0,
        _private = 1,
        unknownFutureValue = 2,
        shared = 3,
    };

    enum class chatMessageImportance {
        normal = 0,
        high = 1,
        urgent = 2,
    };

    enum class chatMessagePolicyViolationDlpActionTypes {
        none = 0,
        notifySender = 1,
        blockAccess = 2,
        blockAccessExternal = 4,
    };

    enum class chatMessagePolicyViolationUserActionTypes {
        none = 0,
        override = 1,
        reportFalsePositive = 2,
    };

    enum class chatMessagePolicyViolationVerdictDetailsTypes {
        none = 0,
        allowFalsePositiveOverride = 1,
        allowOverrideWithoutJustification = 2,
        allowOverrideWithJustification = 4,
    };

    enum class chatMessageType {
        message = 0,
        chatEvent = 1,
        typing = 2,
        unknownFutureValue = 3,
        systemEventMessage = 4,
    };

    enum class chatType {
        oneOnOne = 0,
        group = 1,
        meeting = 2,
        unknownFutureValue = 3,
    };

    enum class clonableTeamParts {
        apps = 1,
        tabs = 2,
        settings = 4,
        channels = 8,
        members = 16,
    };

    enum class giphyRatingType {
        strict = 0,
        moderate = 1,
        unknownFutureValue = 2,
    };

    enum class replyRestriction {
        everyone = 0,
        authorAndModerators = 1,
        unknownFutureValue = 2,
    };

    enum class teamsAppDistributionMethod {
        store = 0,
        organization = 1,
        sideloaded = 2,
        unknownFutureValue = 3,
    };

    enum class teamsAppInstallationScopes {
        team = 1,
        groupChat = 2,
        personal = 4,
        unknownFutureValue = 8,
    };

    enum class teamsAppPublishingState {
        submitted = 0,
        rejected = 1,
        published = 2,
        unknownFutureValue = 3,
    };

    enum class teamsAsyncOperationStatus {
        invalid = 0,
        notStarted = 1,
        inProgress = 2,
        succeeded = 3,
        failed = 4,
        unknownFutureValue = 5,
    };

    enum class teamsAsyncOperationType {
        invalid = 0,
        cloneTeam = 1,
        archiveTeam = 2,
        unarchiveTeam = 3,
        createTeam = 4,
        unknownFutureValue = 5,
        teamifyGroup = 6,
        createChannel = 7,
        createChat = 8,
    };

    enum class teamSpecialization {
        none = 0,
        educationStandard = 1,
        educationClass = 2,
        educationProfessionalLearningCommunity = 3,
        educationStaff = 4,
        healthcareStandard = 5,
        healthcareCareCoordination = 6,
        unknownFutureValue = 7,
    };

    enum class teamVisibilityType {
        _private = 0,
        _public = 1,
        hiddenMembership = 2,
        unknownFutureValue = 3,
    };

    enum class teamworkActivityTopicSource {
        entityUrl = 0,
        text = 1,
    };

    enum class teamworkApplicationIdentityType {
        aadApplication = 0,
        bot = 1,
        tenantBot = 2,
        office365Connector = 3,
        outgoingWebhook = 4,
        unknownFutureValue = 5,
    };

    enum class teamworkCallEventType {
        call = 0,
        meeting = 1,
        screenShare = 2,
        unknownFutureValue = 3,
    };

    enum class teamworkConversationIdentityType {
        team = 0,
        channel = 1,
        chat = 2,
        unknownFutureValue = 3,
    };

    enum class teamworkTagType {
        standard = 0,
    };

    enum class teamworkUserIdentityType {
        aadUser = 0,
        onPremiseAadUser = 1,
        anonymousGuest = 2,
        federatedUser = 3,
        personalMicrosoftAccountUser = 4,
        skypeUser = 5,
        phoneUser = 6,
        unknownFutureValue = 7,
    };

    enum class userNewMessageRestriction {
        everyone = 0,
        everyoneExceptGuests = 1,
        moderators = 2,
        unknownFutureValue = 3,
    };

    enum class confirmedBy {
        none = 0,
        user = 1,
        manager = 2,
        unknownFutureValue = 1024,
    };

    enum class eligibilityFilteringEnabledEntities {
        none = 0,
        swapRequest = 1,
        offerShiftRequest = 2,
        unknownFutureValue = 4,
    };

    enum class scheduleChangeRequestActor {
        sender = 0,
        recipient = 1,
        manager = 2,
        system = 3,
        unknownFutureValue = 4,
    };

    enum class scheduleChangeState {
        pending = 0,
        approved = 1,
        declined = 2,
        unknownFutureValue = 3,
    };

    enum class scheduleEntityTheme {
        white = 0,
        blue = 1,
        green = 2,
        purple = 3,
        pink = 4,
        yellow = 5,
        gray = 6,
        darkBlue = 7,
        darkGreen = 8,
        darkPurple = 9,
        darkPink = 10,
        darkYellow = 11,
        unknownFutureValue = 12,
    };

    enum class timeCardState {
        clockedIn = 0,
        onBreak = 1,
        clockedOut = 2,
        unknownFutureValue = 3,
    };

    enum class timeOffReasonIconType {
        none = 0,
        car = 1,
        calendar = 2,
        running = 3,
        plane = 4,
        firstAid = 5,
        doctor = 6,
        notWorking = 7,
        clock = 8,
        juryDuty = 9,
        globe = 10,
        cup = 11,
        phone = 12,
        weather = 13,
        umbrella = 14,
        piggyBank = 15,
        dog = 16,
        cake = 17,
        trafficCone = 18,
        pin = 19,
        sunny = 20,
        unknownFutureValue = 21,
    };

    enum class workforceIntegrationEncryptionProtocol {
        sharedSecret = 0,
        unknownFutureValue = 1,
    };

    enum class workforceIntegrationSupportedEntities {
        none = 0,
        shift = 1,
        swapRequest = 2,
        userShiftPreferences = 8,
        openShift = 16,
        openShiftRequest = 32,
        offerShiftRequest = 64,
        unknownFutureValue = 1024,
        timeCard = 2048,
        timeOffReason = 4096,
        timeOff = 8192,
        timeOffRequest = 16384,
    };

    enum class mailDestinationRoutingReason {
        none = 0,
        mailFlowRule = 1,
        safeSender = 2,
        blockedSender = 3,
        advancedSpamFiltering = 4,
        domainAllowList = 5,
        domainBlockList = 6,
        notInAddressBook = 7,
        firstTimeSender = 8,
        autoPurgeToInbox = 9,
        autoPurgeToJunk = 10,
        autoPurgeToDeleted = 11,
        outbound = 12,
        notJunk = 13,
        junk = 14,
        unknownFutureValue = 15,
    };

    enum class threatAssessmentContentType {
        mail = 1,
        url = 2,
        file = 3,
    };

    enum class threatAssessmentRequestPivotProperty {
        threatCategory = 1,
        mailDestinationRoutingReason = 2,
    };

    enum class threatAssessmentRequestSource {
        undefined = 0,
        user = 1,
        administrator = 2,
    };

    enum class threatAssessmentResultType {
        checkPolicy = 1,
        rescan = 2,
        unknownFutureValue = 3,
    };

    enum class threatAssessmentStatus {
        pending = 1,
        completed = 2,
    };

    enum class threatCategory {
        undefined = 0,
        spam = 1,
        phishing = 2,
        malware = 3,
        unknownFutureValue = 4,
    };

    enum class threatExpectedAssessment {
        block = 1,
        unblock = 2,
    };

    enum class wellknownListName {
        none = 0,
        defaultList = 1,
        flaggedEmails = 2,
        unknownFutureValue = 3,
    };

    struct entity {
        QString id;
    };

    struct appIdentity {
        QString appId;
        QString displayName;
        QString servicePrincipalId;
        QString servicePrincipalName;
    };

    struct conditionalAccessRuleSatisfied {
        microsoft::graph::conditionalAccessConditions conditionalAccessCondition;
        microsoft::graph::conditionalAccessRule ruleSatisfied;
    };

    struct identity {
        QString displayName;
        QString id;
    };

    struct userIdentity : graph::identity {
        QString ipAddress;
        QString userPrincipalName;
    };

    struct authenticationDetail {
        QString authenticationMethod;
        QString authenticationMethodDetail;
        QDateTime authenticationStepDateTime;
        QString authenticationStepRequirement;
        QString authenticationStepResultDetail;
        bool succeeded;
    };

    struct authenticationRequirementPolicy {
        QString detail;
        microsoft::graph::requirementProvider requirementProvider;
    };

    struct detailsInfo {
    };

    struct deviceDetail {
        QString browser;
        QString browserId;
        QString deviceId;
        QString displayName;
        bool isCompliant;
        bool isManaged;
        QString operatingSystem;
        QString trustType;
    };

    struct featureUsageDetail {
        QString featureName;
        QDateTime lastConfiguredDateTime;
        QDateTime lastUsedDateTime;
        microsoft::graph::azureADLicenseType licenseAssigned;
        microsoft::graph::azureADLicenseType licenseRequired;
    };

    struct geoCoordinates {
        double altitude;
        double latitude;
        double longitude;
    };

    struct initiator : graph::identity {
        microsoft::graph::initiatorType initiatorType;
    };

    struct keyValue {
        QString key;
        QString value;
    };

    struct keyValuePair {
        QString name;
        QString value;
    };

    struct licenseInfoDetail {
        microsoft::graph::azureADLicenseType licenseType;
        int totalAssignedCount;
        int totalLicenseCount;
        int totalUsageCount;
    };

    struct mfaDetail {
        QString authDetail;
        QString authMethod;
    };

    struct modifiedProperty {
        QString displayName;
        QString newValue;
        QString oldValue;
    };

    struct networkLocationDetail {
        QList<QString> networkNames;
        microsoft::graph::networkType networkType;
    };

    struct privateLinkDetails {
        QString policyId;
        QString policyName;
        QString policyTenantId;
        QString resourceId;
    };

    struct provisionedIdentity : graph::identity {
        microsoft::graph::detailsInfo details;
        QString identityType;
    };

    struct provisioningErrorInfo {
        QString additionalDetails;
        microsoft::graph::provisioningStatusErrorCategory errorCategory;
        QString errorCode;
        QString reason;
        QString recommendedAction;
    };

    struct provisioningServicePrincipal : graph::identity {
    };

    struct provisioningStatusInfo {
        microsoft::graph::provisioningErrorInfo errorInformation;
        microsoft::graph::provisioningResult status;
    };

    struct provisioningStep {
        QString description;
        microsoft::graph::detailsInfo details;
        QString name;
        microsoft::graph::provisioningStepType provisioningStepType;
        microsoft::graph::provisioningResult status;
    };

    struct provisioningSystem : graph::identity {
        microsoft::graph::detailsInfo details;
    };

    struct sessionLifetimePolicy {
        QString detail;
        microsoft::graph::expirationRequirement expirationRequirement;
    };

    struct signInActivity {
        QDateTime lastNonInteractiveSignInDateTime;
        QString lastNonInteractiveSignInRequestId;
        QDateTime lastSignInDateTime;
        QString lastSignInRequestId;
    };

    struct signInLocation {
        QString city;
        QString countryOrRegion;
        microsoft::graph::geoCoordinates geoCoordinates;
        QString state;
    };

    struct signInStatus {
        QString additionalDetails;
        int errorCode;
        QString failureReason;
    };

    struct statusBase {
        microsoft::graph::provisioningResult status;
    };

    struct statusDetails : graph::statusBase {
        QString additionalDetails;
        microsoft::graph::provisioningStatusErrorCategory errorCategory;
        QString errorCode;
        QString reason;
        QString recommendedAction;
    };

    struct targetResource {
        QString displayName;
        microsoft::graph::groupType groupType;
        QString id;
        QList<microsoft::graph::modifiedProperty> modifiedProperties;
        QString type;
        QString userPrincipalName;
    };

    struct userRegistrationCount {
        long long registrationCount;
        microsoft::graph::registrationStatusType registrationStatus;
    };

    struct userRegistrationFeatureCount {
        microsoft::graph::authenticationMethodFeature feature;
        long long userCount;
    };

    struct userRegistrationFeatureSummary {
        long long totalUserCount;
        QList<microsoft::graph::userRegistrationFeatureCount> userRegistrationFeatureCounts;
        microsoft::graph::includedUserRoles userRoles;
        microsoft::graph::includedUserTypes userTypes;
    };

    struct userRegistrationMethodCount {
        QString authenticationMethod;
        long long userCount;
    };

    struct userRegistrationMethodSummary {
        long long totalUserCount;
        QList<microsoft::graph::userRegistrationMethodCount> userRegistrationMethodCounts;
        microsoft::graph::includedUserRoles userRoles;
        microsoft::graph::includedUserTypes userTypes;
    };

    struct applicationSignInDetailedSummary : graph::entity {
        QDateTime aggregatedEventDateTime;
        QString appDisplayName;
        QString appId;
        long long signInCount;
        microsoft::graph::signInStatus status;
    };

    struct applicationSignInSummary : graph::entity {
        QString appDisplayName;
        long long failedSignInCount;
        long long successfulSignInCount;
        double successPercentage;
    };

    struct provisioningObjectSummary : graph::entity {
        QString action;
        QDateTime activityDateTime;
        QString changeId;
        QString cycleId;
        int durationInMilliseconds;
        microsoft::graph::initiator initiatedBy;
        QString jobId;
        QList<microsoft::graph::modifiedProperty> modifiedProperties;
        microsoft::graph::provisioningAction provisioningAction;
        microsoft::graph::provisioningStatusInfo provisioningStatusInfo;
        QList<microsoft::graph::provisioningStep> provisioningSteps;
        microsoft::graph::provisioningServicePrincipal servicePrincipal;
        microsoft::graph::provisionedIdentity sourceIdentity;
        microsoft::graph::provisioningSystem sourceSystem;
        microsoft::graph::statusBase statusInfo;
        microsoft::graph::provisionedIdentity targetIdentity;
        microsoft::graph::provisioningSystem targetSystem;
        QString tenantId;
    };

    struct authenticationMethodsRoot : graph::entity {
    };

    struct azureADFeatureUsage : graph::entity {
        QString featureName;
        QDateTime snapshotDateTime;
        int usage;
    };

    struct azureADLicenseUsage : graph::entity {
        QList<microsoft::graph::licenseInfoDetail> licenseInfoDetails;
        QDateTime snapshotDateTime;
    };

    struct azureADUserFeatureUsage : graph::entity {
        QList<microsoft::graph::featureUsageDetail> featureUsageDetails;
        QDateTime lastUpdatedDateTime;
        microsoft::graph::azureADLicenseType licenseAssigned;
        microsoft::graph::azureADLicenseType licenseRecommended;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct credentialUsageSummary : graph::entity {
        microsoft::graph::usageAuthMethod authMethod;
        long long failureActivityCount;
        microsoft::graph::featureType feature;
        long long successfulActivityCount;
    };

    struct credentialUserRegistrationCount : graph::entity {
        long long totalUserCount;
        QList<microsoft::graph::userRegistrationCount> userRegistrationCounts;
    };

    struct credentialUserRegistrationDetails : graph::entity {
        QList<microsoft::graph::registrationAuthMethod> authMethods;
        bool isCapable;
        bool isEnabled;
        bool isMfaRegistered;
        bool isRegistered;
        QString userDisplayName;
        QString userPrincipalName;
    };

    struct relyingPartyDetailedSummary : graph::entity {
        long long failedSignInCount;
        microsoft::graph::migrationStatus migrationStatus;
        QList<microsoft::graph::keyValuePair> migrationValidationDetails;
        QString relyingPartyId;
        QString relyingPartyName;
        QList<QString> replyUrls;
        QString serviceId;
        double signInSuccessRate;
        long long successfulSignInCount;
        long long totalSignInCount;
        long long uniqueUserCount;
    };

    struct userCredentialUsageDetails : graph::entity {
        microsoft::graph::usageAuthMethod authMethod;
        QDateTime eventDateTime;
        QString failureReason;
        microsoft::graph::featureType feature;
        bool isSuccess;
        QString userDisplayName;
        QString userPrincipalName;
    };

    struct printUsage : graph::entity {
        long long completedBlackAndWhiteJobCount;
        long long completedColorJobCount;
        long long incompleteJobCount;
        QDate usageDate;
    };

    struct printUsageByPrinter : graph::printUsage {
        QString printerId;
    };

    struct printUsageByUser : graph::printUsage {
        QString userPrincipalName;
    };

    struct directoryObject : graph::entity {
        QDateTime deletedDateTime;
    };

    struct usageRight : graph::entity {
        QString catalogId;
        QString serviceIdentifier;
        microsoft::graph::usageRightState state;
    };

    struct assignedLicense {
        QList<QUuid> disabledPlans;
        QUuid skuId;
    };

    struct assignedPlan {
        QDateTime assignedDateTime;
        QString capabilityStatus;
        QString service;
        QUuid servicePlanId;
    };

    struct deviceKey {
        QUuid deviceId;
        QByteArray keyMaterial;
        QString keyType;
    };

    struct employeeOrgData {
        QString costCenter;
        QString division;
    };

    struct objectIdentity {
        QString issuer;
        QString issuerAssignedId;
        QString signInType;
    };

    struct licenseAssignmentState {
        QString assignedByGroup;
        QList<QUuid> disabledPlans;
        QString error;
        QUuid skuId;
        QString state;
    };

    struct onPremisesExtensionAttributes {
        QString extensionAttribute1;
        QString extensionAttribute10;
        QString extensionAttribute11;
        QString extensionAttribute12;
        QString extensionAttribute13;
        QString extensionAttribute14;
        QString extensionAttribute15;
        QString extensionAttribute2;
        QString extensionAttribute3;
        QString extensionAttribute4;
        QString extensionAttribute5;
        QString extensionAttribute6;
        QString extensionAttribute7;
        QString extensionAttribute8;
        QString extensionAttribute9;
    };

    struct onPremisesProvisioningError {
        QString category;
        QDateTime occurredDateTime;
        QString propertyCausingError;
        QString value;
    };

    struct passwordProfile {
        bool forceChangePasswordNextSignIn;
        bool forceChangePasswordNextSignInWithMfa;
        QString password;
    };

    struct provisionedPlan {
        QString capabilityStatus;
        QString provisioningStatus;
        QString service;
    };

    struct appRoleAssignment : graph::entity {
        QUuid appRoleId;
        QDateTime creationTimestamp;
        QString principalDisplayName;
        QUuid principalId;
        QString principalType;
        QString resourceDisplayName;
        QUuid resourceId;
    };

    struct oAuth2PermissionGrant : graph::entity {
        QString clientId;
        QString consentType;
        QDateTime expiryTime;
        QString principalId;
        QString resourceId;
        QString scope;
        QDateTime startTime;
    };

    struct scopedRoleMembership : graph::entity {
        QString administrativeUnitId;
        QString roleId;
        microsoft::graph::identity roleMemberInfo;
    };

    struct outlookItem : graph::entity {
        QList<QString> categories;
        QString changeKey;
        QDateTime createdDateTime;
        QDateTime lastModifiedDateTime;
    };

    struct extension : graph::entity {
    };

    struct agreementAcceptance : graph::entity {
        QString agreementFileId;
        QString agreementId;
        QString deviceDisplayName;
        QString deviceId;
        QString deviceOSType;
        QString deviceOSVersion;
        QDateTime expirationDateTime;
        QDateTime recordedDateTime;
        microsoft::graph::agreementAcceptanceState state;
        QString userDisplayName;
        QString userEmail;
        QString userId;
        QString userPrincipalName;
    };

    struct windowsInformationProtectionDeviceRegistration : graph::entity {
        QString deviceMacAddress;
        QString deviceName;
        QString deviceRegistrationId;
        QString deviceType;
        QDateTime lastCheckInDateTime;
        QString userId;
    };

    struct plannerDelta : graph::entity {
    };

    struct profilePhoto : graph::entity {
        int height;
        int width;
    };

    struct emailAddress {
        QString address;
        QString name;
    };

    struct recipient {
        microsoft::graph::emailAddress emailAddress;
    };

    struct settings {
        bool hasGraphMailbox;
        bool hasLicense;
        bool hasOptedOut;
    };

    struct activityStatistics : graph::entity {
        microsoft::graph::analyticsActivityType activity;
        std::chrono::system_clock::duration duration;
        QDate endDate;
        QDate startDate;
        QString timeZoneUsed;
    };

    struct callActivityStatistics : graph::activityStatistics {
        std::chrono::system_clock::duration afterHours;
    };

    struct chatActivityStatistics : graph::activityStatistics {
        std::chrono::system_clock::duration afterHours;
    };

    struct emailActivityStatistics : graph::activityStatistics {
        std::chrono::system_clock::duration afterHours;
        std::chrono::system_clock::duration readEmail;
        std::chrono::system_clock::duration sentEmail;
    };

    struct focusActivityStatistics : graph::activityStatistics {
    };

    struct meetingActivityStatistics : graph::activityStatistics {
        std::chrono::system_clock::duration afterHours;
        std::chrono::system_clock::duration conflicting;
        std::chrono::system_clock::duration _long;
        std::chrono::system_clock::duration multitasking;
        std::chrono::system_clock::duration organized;
        std::chrono::system_clock::duration recurring;
    };

    struct credential {
        QString fieldId;
        QString type;
        QString value;
    };

    struct passwordSingleSignOnCredentialSet {
        QList<microsoft::graph::credential> credentials;
        QString id;
    };

    struct passwordSingleSignOnField {
        QString customizedLabel;
        QString defaultLabel;
        QString fieldId;
        QString type;
    };

    struct passwordSingleSignOnSettings {
        QList<microsoft::graph::passwordSingleSignOnField> fields;
    };

    struct appRole {
        QList<QString> allowedMemberTypes;
        QString description;
        QString displayName;
        QUuid id;
        bool isEnabled;
        QString origin;
        QString value;
    };

    struct informationalUrl {
        QString logoUrl;
        QString marketingUrl;
        QString privacyStatementUrl;
        QString supportUrl;
        QString termsOfServiceUrl;
    };

    struct keyCredential {
        QByteArray customKeyIdentifier;
        QString displayName;
        QDateTime endDateTime;
        QByteArray key;
        QUuid keyId;
        QDateTime startDateTime;
        QString type;
        QString usage;
    };

    struct parentalControlSettings {
        QList<QString> countriesBlockedForMinors;
        QString legalAgeGroupRule;
    };

    struct passwordCredential {
        QByteArray customKeyIdentifier;
        QString displayName;
        QDateTime endDateTime;
        QString hint;
        QUuid keyId;
        QString secretText;
        QDateTime startDateTime;
    };

    struct publicClientApplication {
        QList<QString> redirectUris;
    };

    struct spaApplication {
        QList<QString> redirectUris;
    };

    struct verifiedPublisher {
        QDateTime addedDateTime;
        QString displayName;
        QString verifiedPublisherId;
    };

    struct policyBase : graph::directoryObject {
        QString description;
        QString displayName;
    };

    struct extensionProperty : graph::directoryObject {
        QString appDisplayName;
        QString dataType;
        bool isSyncedFromOnPremises;
        QString name;
        QList<QString> targetObjects;
    };

    struct stsPolicy : graph::policyBase {
        QList<QString> definition;
        bool isOrganizationDefault;
        QList<microsoft::graph::directoryObject> appliesTo;
    };

    struct homeRealmDiscoveryPolicy : graph::stsPolicy {
    };

    struct tokenIssuancePolicy : graph::stsPolicy {
    };

    struct tokenLifetimePolicy : graph::stsPolicy {
    };

    struct applicationTemplate : graph::entity {
        QList<QString> categories;
        QString description;
        QString displayName;
        QString homePageUrl;
        QString logoUrl;
        QString publisher;
        QList<QString> supportedProvisioningTypes;
        QList<QString> supportedSingleSignOnModes;
    };

    struct addIn {
        QUuid id;
        QList<microsoft::graph::keyValue> properties;
        QString type;
    };

    struct permissionScope {
        QString adminConsentDescription;
        QString adminConsentDisplayName;
        QUuid id;
        bool isEnabled;
        QString origin;
        QString type;
        QString userConsentDescription;
        QString userConsentDisplayName;
        QString value;
    };

    struct samlSingleSignOnSettings {
        QString relayState;
    };

    struct claimsMappingPolicy : graph::stsPolicy {
    };

    struct delegatedPermissionClassification : graph::entity {
        microsoft::graph::permissionClassificationType classification;
        QString permissionId;
        QString permissionName;
    };

    struct endpoint : graph::directoryObject {
        QString capability;
        QString providerId;
        QString providerName;
        QString providerResourceId;
        QString uri;
    };

    struct excludeTarget {
        QString id;
        microsoft::graph::authenticationMethodTargetType targetType;
    };

    struct authenticationMethodsRegistrationCampaignIncludeTarget {
        QString id;
        QString targetedAuthenticationMethod;
        microsoft::graph::authenticationMethodTargetType targetType;
    };

    struct fido2KeyRestrictions {
        QList<QString> aaGuids;
        microsoft::graph::fido2RestrictionEnforcementType enforcementType;
        bool isEnforced;
    };

    struct authenticationMethodConfiguration : graph::entity {
        microsoft::graph::authenticationMethodState state;
    };

    struct authenticationMethodTarget : graph::entity {
        bool isRegistrationRequired;
        microsoft::graph::authenticationMethodTargetType targetType;
    };

    struct emailAuthenticationMethodConfiguration : graph::authenticationMethodConfiguration {
        microsoft::graph::externalEmailOtpState allowExternalIdToUseEmailOtp;
        QList<microsoft::graph::authenticationMethodTarget> includeTargets;
    };

    struct fido2AuthenticationMethodConfiguration : graph::authenticationMethodConfiguration {
        bool isAttestationEnforced;
        bool isSelfServiceRegistrationAllowed;
        microsoft::graph::fido2KeyRestrictions keyRestrictions;
        QList<microsoft::graph::authenticationMethodTarget> includeTargets;
    };

    struct microsoftAuthenticatorAuthenticationMethodTarget : graph::authenticationMethodTarget {
        microsoft::graph::microsoftAuthenticatorAuthenticationMode authenticationMode;
        microsoft::graph::authenticatorAppFeatureSettings featureSettings;
    };

    struct b2cAuthenticationMethodsPolicy : graph::entity {
        bool isEmailPasswordAuthenticationEnabled;
        bool isPhoneOneTimePasswordAuthenticationEnabled;
        bool isUserNameAuthenticationEnabled;
    };

    struct activityBasedTimeoutPolicy : graph::stsPolicy {
    };

    struct featureRolloutPolicy : graph::entity {
        QString description;
        QString displayName;
        microsoft::graph::stagedFeatureName feature;
        bool isAppliedToOrganization;
        bool isEnabled;
        QList<microsoft::graph::directoryObject> appliesTo;
    };

    struct accessReviewPolicy : graph::entity {
        QString description;
        QString displayName;
        bool isGroupOwnerManagementEnabled;
    };

    struct identitySecurityDefaultsEnforcementPolicy : graph::policyBase {
        bool isEnabled;
    };

    struct smsAuthenticationMethodTarget : graph::authenticationMethodTarget {
        bool isUsableForSignIn;
    };

    struct temporaryAccessPassAuthenticationMethodConfiguration : graph::authenticationMethodConfiguration {
        int defaultLength;
        int defaultLifetimeInMinutes;
        bool isUsableOnce;
        int maximumLifetimeInMinutes;
        int minimumLifetimeInMinutes;
        QList<microsoft::graph::authenticationMethodTarget> includeTargets;
    };

    struct bitlockerRecoveryKey : graph::entity {
        QDateTime createdDateTime;
        QString deviceId;
        QString key;
        microsoft::graph::volumeType volumeType;
    };

    struct dataLossPreventionPolicy : graph::entity {
        QString name;
    };

    struct sensitivityPolicySettings : graph::entity {
        microsoft::graph::sensitivityLabelTarget applicableTo;
        bool downgradeSensitivityRequiresJustification;
        QString helpWebUrl;
        bool isMandatory;
    };

    struct bookingReminder {
        QString message;
        std::chrono::system_clock::duration offset;
        microsoft::graph::bookingReminderRecipients recipients;
    };

    struct bookingSchedulingPolicy {
        bool allowStaffSelection;
        std::chrono::system_clock::duration maximumAdvance;
        std::chrono::system_clock::duration minimumLeadTime;
        bool sendConfirmationsToOwner;
        std::chrono::system_clock::duration timeSlotInterval;
    };

    struct bookingWorkTimeSlot {
        QTime end;
        QTime start;
    };

    struct dateTimeTimeZone {
        QString dateTime;
        QString timeZone;
    };

    struct physicalAddress {
        QString city;
        QString countryOrRegion;
        QString postalCode;
        QString postOfficeBox;
        QString state;
        QString street;
        microsoft::graph::physicalAddressType type;
    };

    struct outlookGeoCoordinates {
        double accuracy;
        double altitude;
        double altitudeAccuracy;
        double latitude;
        double longitude;
    };

    struct timeSlot {
        microsoft::graph::dateTimeTimeZone end;
        microsoft::graph::dateTimeTimeZone start;
    };

    struct bookingNamedEntity : graph::entity {
        QString displayName;
    };

    struct bookingPerson : graph::bookingNamedEntity {
        QString emailAddress;
    };

    struct bookingCustomer : graph::bookingPerson {
    };

    struct bookingCurrency : graph::entity {
        QString symbol;
    };

    struct cloudPcUserRoleScopeTagInfo {
        QString displayName;
        QString roleScopeTagId;
    };

    struct cloudPcAuditProperty {
        QString displayName;
        QString newValue;
        QString oldValue;
    };

    struct cloudPcAuditResource {
        QString displayName;
        QList<microsoft::graph::cloudPcAuditProperty> modifiedProperties;
        QString resourceId;
        QString type;
    };

    struct cloudPcManagementAssignmentTarget {
    };

    struct cloudPcManagementGroupAssignmentTarget : graph::cloudPcManagementAssignmentTarget {
        QString groupId;
    };

    struct cloudPcOnPremisesConnectionHealthCheck {
        QString additionalDetails;
        QString displayName;
        QDateTime endDateTime;
        microsoft::graph::cloudPcOnPremisesConnectionHealthCheckErrorType errorType;
        QString recommendedAction;
        QDateTime startDateTime;
        microsoft::graph::cloudPcOnPremisesConnectionStatus status;
    };

    struct cloudPcOnPremisesConnectionStatusDetails {
        QDateTime endDateTime;
        QList<microsoft::graph::cloudPcOnPremisesConnectionHealthCheck> healthChecks;
        QDateTime startDateTime;
    };

    struct cloudPcStatusDetails {
        QList<microsoft::graph::keyValuePair> additionalInformation;
        QString code;
        QString message;
    };

    struct cloudPcSourceDeviceImage {
        QString displayName;
        QString id;
    };

    struct unifiedRolePermission {
        QList<QString> allowedResourceActions;
        QString condition;
        QList<QString> excludedResourceActions;
    };

    struct appScope : graph::entity {
        QString displayName;
        QString type;
    };

    struct cloudPC : graph::entity {
        QString displayName;
        QDateTime gracePeriodEndDateTime;
        QString imageDisplayName;
        QDateTime lastModifiedDateTime;
        QString managedDeviceId;
        QString managedDeviceName;
        QString onPremisesConnectionName;
        QString provisioningPolicyId;
        QString provisioningPolicyName;
        QString servicePlanId;
        QString servicePlanName;
        microsoft::graph::cloudPcStatus status;
        microsoft::graph::cloudPcStatusDetails statusDetails;
        QString userPrincipalName;
    };

    struct cloudPcDeviceImage : graph::entity {
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString operatingSystem;
        QString osBuildNumber;
        QString sourceImageResourceId;
        microsoft::graph::cloudPcDeviceImageStatus status;
        microsoft::graph::cloudPcDeviceImageStatusDetails statusDetails;
        QString version;
    };

    struct cloudPcOnPremisesConnection : graph::entity {
        QString adDomainName;
        QString adDomainPassword;
        QString adDomainUsername;
        QString displayName;
        microsoft::graph::cloudPcOnPremisesConnectionStatus healthCheckStatus;
        microsoft::graph::cloudPcOnPremisesConnectionStatusDetails healthCheckStatusDetails;
        bool inUse;
        QString organizationalUnit;
        QString resourceGroupId;
        QString subnetId;
        QString subscriptionId;
        QString subscriptionName;
        QString virtualNetworkId;
    };

    struct cloudPcProvisioningPolicyAssignment : graph::entity {
        microsoft::graph::cloudPcManagementAssignmentTarget target;
    };

    struct cloudPcUserSettingAssignment : graph::entity {
        QDateTime createdDateTime;
        microsoft::graph::cloudPcManagementAssignmentTarget target;
    };

    struct androidForWorkSettings : graph::entity {
        microsoft::graph::androidForWorkBindStatus bindStatus;
        bool deviceOwnerManagementEnabled;
        microsoft::graph::androidForWorkEnrollmentTarget enrollmentTarget;
        QDateTime lastAppSyncDateTime;
        microsoft::graph::androidForWorkSyncStatus lastAppSyncStatus;
        QDateTime lastModifiedDateTime;
        QString ownerOrganizationName;
        QString ownerUserPrincipalName;
        QList<QString> targetGroupIds;
    };

    struct deviceAndAppManagementAssignmentFilter : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        microsoft::graph::devicePlatformType platform;
        QList<QString> roleScopeTags;
        QString rule;
    };

    struct chromeOSOnboardingSettings : graph::entity {
        QDateTime lastDirectorySyncDateTime;
        QDateTime lastModifiedDateTime;
        microsoft::graph::onboardingStatus onboardingStatus;
        QString ownerUserPrincipalName;
    };

    struct deviceManagementSettings {
        bool androidDeviceAdministratorEnrollmentEnabled;
        microsoft::graph::derivedCredentialProviderType derivedCredentialProvider;
        QString derivedCredentialUrl;
        int deviceComplianceCheckinThresholdDays;
        int deviceInactivityBeforeRetirementInDay;
        bool enableLogCollection;
        bool enhancedJailBreak;
        bool ignoreDevicesForUnsupportedSettingsEnabled;
        bool isScheduledActionEnabled;
        bool secureByDefault;
    };

    struct cartToClassAssociation : graph::entity {
        QList<QString> classroomIds;
        QDateTime createdDateTime;
        QString description;
        QList<QString> deviceCartIds;
        QString displayName;
        QDateTime lastModifiedDateTime;
        int version;
    };

    struct deviceCompliancePolicyDeviceStateSummary : graph::entity {
        int compliantDeviceCount;
        int configManagerCount;
        int conflictDeviceCount;
        int errorDeviceCount;
        int inGracePeriodCount;
        int nonCompliantDeviceCount;
        int notApplicableDeviceCount;
        int remediatedDeviceCount;
        int unknownDeviceCount;
    };

    struct deviceConfigurationDeviceStateSummary : graph::entity {
        int compliantDeviceCount;
        int conflictDeviceCount;
        int errorDeviceCount;
        int nonCompliantDeviceCount;
        int notApplicableDeviceCount;
        int remediatedDeviceCount;
        int unknownDeviceCount;
    };

    struct managedAllDeviceCertificateState : graph::entity {
        QDateTime certificateExpirationDateTime;
        QString certificateExtendedKeyUsages;
        QDateTime certificateIssuanceDateTime;
        QString certificateIssuerName;
        int certificateKeyUsages;
        microsoft::graph::certificateRevocationStatus certificateRevokeStatus;
        QDateTime certificateRevokeStatusLastChangeDateTime;
        QString certificateSerialNumber;
        QString certificateSubjectName;
        QString certificateThumbprint;
        QString managedDeviceDisplayName;
        QString userPrincipalName;
    };

    struct deviceConfigurationUserStateSummary : graph::entity {
        int compliantUserCount;
        int conflictUserCount;
        int errorUserCount;
        int nonCompliantUserCount;
        int notApplicableUserCount;
        int remediatedUserCount;
        int unknownUserCount;
    };

    struct iosUpdateDeviceStatus : graph::entity {
        QDateTime complianceGracePeriodExpirationDateTime;
        QString deviceDisplayName;
        QString deviceId;
        QString deviceModel;
        microsoft::graph::iosUpdatesInstallStatus installStatus;
        QDateTime lastReportedDateTime;
        QString osVersion;
        int platform;
        microsoft::graph::complianceStatus status;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct ndesConnector : graph::entity {
        QString displayName;
        QDateTime lastConnectionDateTime;
        microsoft::graph::ndesConnectorState state;
    };

    struct softwareUpdateStatusSummary : graph::entity {
        int compliantDeviceCount;
        int compliantUserCount;
        int conflictDeviceCount;
        int conflictUserCount;
        QString displayName;
        int errorDeviceCount;
        int errorUserCount;
        int nonCompliantDeviceCount;
        int nonCompliantUserCount;
        int notApplicableDeviceCount;
        int notApplicableUserCount;
        int remediatedDeviceCount;
        int remediatedUserCount;
        int unknownDeviceCount;
        int unknownUserCount;
    };

    struct deviceManagementConfigurationCategory : graph::entity {
        QList<QString> childCategoryIds;
        QString description;
        QString displayName;
        QString helpText;
        QString name;
        QString parentCategoryId;
        microsoft::graph::deviceManagementConfigurationPlatforms platforms;
        QString rootCategoryId;
        microsoft::graph::deviceManagementConfigurationSettingUsage settingUsage;
        microsoft::graph::deviceManagementConfigurationTechnologies technologies;
    };

    struct onPremisesConditionalAccessSettings : graph::entity {
        bool enabled;
        QList<QUuid> excludedGroups;
        QList<QUuid> includedGroups;
        bool overrideDefaultRule;
    };

    struct deviceCategory : graph::entity {
        QString description;
        QString displayName;
        QList<QString> roleScopeTagIds;
    };

    struct deviceManagementExchangeConnector : graph::entity {
        QString connectorServerName;
        QString exchangeAlias;
        microsoft::graph::deviceManagementExchangeConnectorType exchangeConnectorType;
        QString exchangeOrganization;
        QDateTime lastSyncDateTime;
        QString primarySmtpAddress;
        QString serverName;
        microsoft::graph::deviceManagementExchangeConnectorStatus status;
        QString version;
    };

    struct mobileThreatDefenseConnector : graph::entity {
        bool allowPartnerToCollectIOSApplicationMetadata;
        bool androidDeviceBlockedOnMissingPartnerData;
        bool androidEnabled;
        bool androidMobileApplicationManagementEnabled;
        bool iosDeviceBlockedOnMissingPartnerData;
        bool iosEnabled;
        bool iosMobileApplicationManagementEnabled;
        QDateTime lastHeartbeatDateTime;
        bool macDeviceBlockedOnMissingPartnerData;
        bool macEnabled;
        bool microsoftDefenderForEndpointAttachEnabled;
        microsoft::graph::mobileThreatPartnerTenantState partnerState;
        int partnerUnresponsivenessThresholdInDays;
        bool partnerUnsupportedOsVersionBlocked;
        bool windowsDeviceBlockedOnMissingPartnerData;
        bool windowsEnabled;
    };

    struct adminConsent {
        microsoft::graph::adminConsentState shareAPNSData;
        microsoft::graph::adminConsentState shareUserExperienceAnalyticsData;
    };

    struct deviceProtectionOverview {
        int cleanDeviceCount;
        int criticalFailuresDeviceCount;
        int inactiveThreatAgentDeviceCount;
        int pendingFullScanDeviceCount;
        int pendingManualStepsDeviceCount;
        int pendingOfflineScanDeviceCount;
        int pendingQuickScanDeviceCount;
        int pendingRestartDeviceCount;
        int pendingSignatureUpdateDeviceCount;
        int totalReportedDeviceCount;
        int unknownStateThreatAgentDeviceCount;
    };

    struct managedDeviceCleanupSettings {
        QString deviceInactivityBeforeRetirementInDays;
    };

    struct userExperienceAnalyticsSettings {
        bool configurationManagerDataConnectorConfigured;
    };

    struct applePushNotificationCertificate : graph::entity {
        QString appleIdentifier;
        QString certificate;
        QString certificateSerialNumber;
        QString certificateUploadFailureReason;
        QString certificateUploadStatus;
        QDateTime expirationDateTime;
        QDateTime lastModifiedDateTime;
        QString topicIdentifier;
    };

    struct cloudPCConnectivityIssue : graph::entity {
        QString deviceId;
        QString errorCode;
        QDateTime errorDateTime;
        QString errorDescription;
        QString recommendedAction;
        QString userId;
    };

    struct comanagementEligibleDevice : graph::entity {
        microsoft::graph::deviceRegistrationState clientRegistrationStatus;
        QString deviceName;
        microsoft::graph::deviceType deviceType;
        int entitySource;
        microsoft::graph::managementAgentType managementAgents;
        microsoft::graph::managementState managementState;
        QString manufacturer;
        QString mdmStatus;
        QString model;
        QString osDescription;
        QString osVersion;
        microsoft::graph::ownerType ownerType;
        QString referenceId;
        QString serialNumber;
        microsoft::graph::comanagementEligibleType status;
        QString upn;
        QString userEmail;
        QString userId;
        QString userName;
    };

    struct dataSharingConsent : graph::entity {
        QDateTime grantDateTime;
        bool granted;
        QString grantedByUpn;
        QString grantedByUserId;
        QString serviceDisplayName;
        QString termsUrl;
    };

    struct remoteActionAudit : graph::entity {
        microsoft::graph::remoteAction action;
        microsoft::graph::actionState actionState;
        QString deviceDisplayName;
        QString deviceIMEI;
        QString deviceOwnerUserPrincipalName;
        QString initiatedByUserPrincipalName;
        QString managedDeviceId;
        QDateTime requestDateTime;
        QString userName;
    };

    struct userExperienceAnalyticsAppHealthApplicationPerformance : graph::entity {
        int activeDeviceCount;
        int appCrashCount;
        QString appDisplayName;
        int appHangCount;
        double appHealthScore;
        QString appHealthStatus;
        QString appName;
        QString appPublisher;
        int appUsageDuration;
        int meanTimeToFailureInMinutes;
    };

    struct userExperienceAnalyticsAppHealthAppPerformanceByAppVersion : graph::entity {
        int appCrashCount;
        QString appDisplayName;
        QString appName;
        QString appPublisher;
        int appUsageDuration;
        QString appVersion;
        int meanTimeToFailureInMinutes;
    };

    struct userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails : graph::entity {
        int appCrashCount;
        QString appDisplayName;
        QString appName;
        QString appPublisher;
        QString appVersion;
        int deviceCountWithCrashes;
        bool isLatestUsedVersion;
        bool isMostUsedVersion;
    };

    struct userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId : graph::entity {
        int appCrashCount;
        QString appDisplayName;
        QString appName;
        QString appPublisher;
        QString appVersion;
        QString deviceDisplayName;
        QString deviceId;
        QDateTime processedDateTime;
    };

    struct userExperienceAnalyticsAppHealthAppPerformanceByOSVersion : graph::entity {
        int activeDeviceCount;
        int appCrashCount;
        QString appDisplayName;
        QString appName;
        QString appPublisher;
        int appUsageDuration;
        int meanTimeToFailureInMinutes;
        QString osBuildNumber;
        QString osVersion;
    };

    struct userExperienceAnalyticsAppHealthDeviceModelPerformance : graph::entity {
        int activeDeviceCount;
        QString deviceManufacturer;
        QString deviceModel;
        int meanTimeToFailureInMinutes;
        double modelAppHealthScore;
        QString modelAppHealthStatus;
    };

    struct userExperienceAnalyticsAppHealthDevicePerformance : graph::entity {
        int appCrashCount;
        int appHangCount;
        int crashedAppCount;
        double deviceAppHealthScore;
        QString deviceAppHealthStatus;
        QString deviceDisplayName;
        QString deviceId;
        QString deviceManufacturer;
        QString deviceModel;
        int meanTimeToFailureInMinutes;
        QDateTime processedDateTime;
    };

    struct userExperienceAnalyticsAppHealthDevicePerformanceDetails : graph::entity {
        QString appDisplayName;
        QString appPublisher;
        QString appVersion;
        QString deviceDisplayName;
        QString deviceId;
        QDateTime eventDateTime;
        QString eventType;
    };

    struct userExperienceAnalyticsAppHealthOSVersionPerformance : graph::entity {
        int activeDeviceCount;
        int meanTimeToFailureInMinutes;
        QString osBuildNumber;
        QString osVersion;
        double osVersionAppHealthScore;
        QString osVersionAppHealthStatus;
    };

    struct userExperienceAnalyticsDevicePerformance : graph::entity {
        double averageBlueScreens;
        double averageRestarts;
        int blueScreenCount;
        int bootScore;
        int coreBootTimeInMs;
        int coreLoginTimeInMs;
        long long deviceCount;
        QString deviceName;
        microsoft::graph::diskType diskType;
        int groupPolicyBootTimeInMs;
        int groupPolicyLoginTimeInMs;
        microsoft::graph::userExperienceAnalyticsHealthState healthStatus;
        int loginScore;
        QString manufacturer;
        QString model;
        double modelStartupPerformanceScore;
        QString operatingSystemVersion;
        int responsiveDesktopTimeInMs;
        int restartCount;
        double startupPerformanceScore;
    };

    struct userExperienceAnalyticsDeviceScores : graph::entity {
        double appReliabilityScore;
        QString deviceName;
        double endpointAnalyticsScore;
        microsoft::graph::userExperienceAnalyticsHealthState healthStatus;
        QString manufacturer;
        QString model;
        double startupPerformanceScore;
        double workFromAnywhereScore;
    };

    struct userExperienceAnalyticsDeviceStartupHistory : graph::entity {
        int coreBootTimeInMs;
        int coreLoginTimeInMs;
        QString deviceId;
        int featureUpdateBootTimeInMs;
        int groupPolicyBootTimeInMs;
        int groupPolicyLoginTimeInMs;
        bool isFeatureUpdate;
        bool isFirstLogin;
        QString operatingSystemVersion;
        int responsiveDesktopTimeInMs;
        microsoft::graph::userExperienceAnalyticsOperatingSystemRestartCategory restartCategory;
        QString restartFaultBucket;
        QString restartStopCode;
        QDateTime startTime;
        int totalBootTimeInMs;
        int totalLoginTimeInMs;
    };

    struct userExperienceAnalyticsDeviceStartupProcess : graph::entity {
        QString managedDeviceId;
        QString processName;
        QString productName;
        QString publisher;
        int startupImpactInMs;
    };

    struct userExperienceAnalyticsDeviceStartupProcessPerformance : graph::entity {
        long long deviceCount;
        int medianImpactInMs;
        QString processName;
        QString productName;
        QString publisher;
        int totalImpactInMs;
    };

    struct userExperienceAnalyticsDeviceWithoutCloudIdentity : graph::entity {
        QString azureAdDeviceId;
        QString deviceName;
    };

    struct userExperienceAnalyticsImpactingProcess : graph::entity {
        QString category;
        QString description;
        QString deviceId;
        double impactValue;
        QString processName;
        QString publisher;
    };

    struct userExperienceAnalyticsModelScores : graph::entity {
        double appReliabilityScore;
        double endpointAnalyticsScore;
        microsoft::graph::userExperienceAnalyticsHealthState healthStatus;
        QString manufacturer;
        QString model;
        long long modelDeviceCount;
        double startupPerformanceScore;
    };

    struct userExperienceAnalyticsNotAutopilotReadyDevice : graph::entity {
        bool autoPilotProfileAssigned;
        bool autoPilotRegistered;
        QString azureAdJoinType;
        bool azureAdRegistered;
        QString deviceName;
        QString managedBy;
        QString manufacturer;
        QString model;
        QString serialNumber;
    };

    struct userExperienceAnalyticsRemoteConnection : graph::entity {
        double cloudPcFailurePercentage;
        double cloudPcRoundTripTime;
        double cloudPcSignInTime;
        double coreBootTime;
        double coreSignInTime;
        int deviceCount;
        QString deviceId;
        QString deviceName;
        QString manufacturer;
        QString model;
        double remoteSignInTime;
        QString userPrincipalName;
        QString virtualNetwork;
    };

    struct userExperienceAnalyticsResourcePerformance : graph::entity {
        int averageSpikeTimeScore;
        double cpuSpikeTimePercentage;
        double cpuSpikeTimePercentageThreshold;
        int cpuSpikeTimeScore;
        long long deviceCount;
        QString deviceId;
        QString deviceName;
        int deviceResourcePerformanceScore;
        QString manufacturer;
        QString model;
        double ramSpikeTimePercentage;
        double ramSpikeTimePercentageThreshold;
        int ramSpikeTimeScore;
    };

    struct userExperienceAnalyticsScoreHistory : graph::entity {
        QDateTime startupDateTime;
    };

    struct userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric : graph::entity {
        double osCheckFailedPercentage;
        double processor64BitCheckFailedPercentage;
        double processorCoreCountCheckFailedPercentage;
        double processorFamilyCheckFailedPercentage;
        double processorSpeedCheckFailedPercentage;
        double ramCheckFailedPercentage;
        double secureBootCheckFailedPercentage;
        double storageCheckFailedPercentage;
        int totalDeviceCount;
        double tpmCheckFailedPercentage;
        int upgradeEligibleDeviceCount;
    };

    struct deviceManagementDerivedCredentialSettings : graph::entity {
        QString displayName;
        QString helpUrl;
        microsoft::graph::deviceManagementDerivedCredentialIssuer issuer;
        microsoft::graph::deviceManagementDerivedCredentialNotificationType notificationType;
    };

    struct importedDeviceIdentity : graph::entity {
        QDateTime createdDateTime;
        QString description;
        microsoft::graph::enrollmentState enrollmentState;
        QString importedDeviceIdentifier;
        microsoft::graph::importedDeviceIdentityType importedDeviceIdentityType;
        QDateTime lastContactedDateTime;
        QDateTime lastModifiedDateTime;
        microsoft::graph::platform platform;
    };

    struct windowsAutopilotSettings : graph::entity {
        QDateTime lastManualSyncTriggerDateTime;
        QDateTime lastSyncDateTime;
        microsoft::graph::windowsAutopilotSyncStatus syncStatus;
    };

    struct groupPolicyObjectFile : graph::entity {
        QString content;
        QDateTime createdDateTime;
        QUuid groupPolicyObjectId;
        QDateTime lastModifiedDateTime;
        QString ouDistinguishedName;
    };

    struct microsoftTunnelConfiguration : graph::entity {
        QList<microsoft::graph::keyValuePair> advancedSettings;
        QString defaultDomainSuffix;
        QString description;
        QString displayName;
        QList<QString> dnsServers;
        QDateTime lastUpdateDateTime;
        int listenPort;
        QString network;
        QList<QString> roleScopeTagIds;
        QList<QString> routesExclude;
        QList<QString> routesInclude;
        QList<QString> splitDNS;
    };

    struct microsoftTunnelHealthThreshold : graph::entity {
        long long defaultHealthyThreshold;
        long long defaultUnhealthyThreshold;
        long long healthyThreshold;
        long long unhealthyThreshold;
    };

    struct microsoftTunnelServerLogCollectionResponse : graph::entity {
        QDateTime endDateTime;
        QDateTime expiryDateTime;
        QDateTime requestDateTime;
        QString serverId;
        long long sizeInBytes;
        QDateTime startDateTime;
        microsoft::graph::microsoftTunnelLogCollectionStatus status;
    };

    struct deviceManagementDomainJoinConnector : graph::entity {
        QString displayName;
        QDateTime lastConnectionDateTime;
        microsoft::graph::deviceManagementDomainJoinConnectorState state;
        QString version;
    };

    struct configManagerCollection : graph::entity {
        QString collectionIdentifier;
        QDateTime createdDateTime;
        QString displayName;
        QString hierarchyIdentifier;
        QString hierarchyName;
        QDateTime lastModifiedDateTime;
    };

    struct resourceOperation : graph::entity {
        QString actionName;
        QString description;
        bool enabledForScopeValidation;
        QString resource;
        QString resourceName;
    };

    struct remoteAssistancePartner : graph::entity {
        QString displayName;
        QDateTime lastConnectionDateTime;
        QDateTime onboardingRequestExpiryDateTime;
        microsoft::graph::remoteAssistanceOnboardingStatus onboardingStatus;
        QString onboardingUrl;
    };

    struct remoteAssistanceSettings : graph::entity {
        bool allowSessionsToUnenrolledDevices;
        microsoft::graph::remoteAssistanceState remoteAssistanceState;
    };

    struct telecomExpenseManagementPartner : graph::entity {
        bool appAuthorized;
        QString displayName;
        bool enabled;
        QDateTime lastConnectionDateTime;
        QString url;
    };

    struct windowsUpdateCatalogItem : graph::entity {
        QString displayName;
        QDateTime endOfSupportDate;
        QDateTime releaseDateTime;
    };

    struct windowsInformationProtectionAppLearningSummary : graph::entity {
        QString applicationName;
        microsoft::graph::applicationType applicationType;
        int deviceCount;
    };

    struct windowsInformationProtectionNetworkLearningSummary : graph::entity {
        int deviceCount;
        QString url;
    };

    struct userPFXCertificate : graph::entity {
        QDateTime createdDateTime;
        QByteArray encryptedPfxBlob;
        QString encryptedPfxPassword;
        QDateTime expirationDateTime;
        microsoft::graph::userPfxIntendedPurpose intendedPurpose;
        QString keyName;
        QDateTime lastModifiedDateTime;
        microsoft::graph::userPfxPaddingScheme paddingScheme;
        QString providerName;
        QDateTime startDateTime;
        QString thumbprint;
        QString userPrincipalName;
    };

    struct assignmentFilterEvaluationStatusDetails : graph::entity {
        QString payloadId;
    };

    struct chromeOSDeviceProperty {
        QString name;
        bool updatable;
        QString value;
        QString valueType;
    };

    struct configurationManagerClientEnabledFeatures {
        bool compliancePolicy;
        bool deviceConfiguration;
        bool endpointProtection;
        bool inventory;
        bool modernApps;
        bool officeApps;
        bool resourceAccess;
        bool windowsUpdateForBusiness;
    };

    struct configurationManagerClientHealthState {
        int errorCode;
        QDateTime lastSyncDateTime;
        microsoft::graph::configurationManagerClientState state;
    };

    struct configurationManagerClientInformation {
        QString clientIdentifier;
        bool isBlocked;
    };

    struct deviceActionResult {
        QString actionName;
        microsoft::graph::actionState actionState;
        QDateTime lastUpdatedDateTime;
        QDateTime startDateTime;
    };

    struct deviceHealthAttestationState {
        QString attestationIdentityKey;
        QString bitLockerStatus;
        QString bootAppSecurityVersion;
        QString bootDebugging;
        QString bootManagerSecurityVersion;
        QString bootManagerVersion;
        QString bootRevisionListInfo;
        QString codeIntegrity;
        QString codeIntegrityCheckVersion;
        QString codeIntegrityPolicy;
        QString contentNamespaceUrl;
        QString contentVersion;
        QString dataExcutionPolicy;
        QString deviceHealthAttestationStatus;
        QString earlyLaunchAntiMalwareDriverProtection;
        QString healthAttestationSupportedStatus;
        QString healthStatusMismatchInfo;
        QDateTime issuedDateTime;
        QString lastUpdateDateTime;
        QString operatingSystemKernelDebugging;
        QString operatingSystemRevListInfo;
        QString pcr0;
        QString pcrHashAlgorithm;
        long long resetCount;
        long long restartCount;
        QString safeMode;
        QString secureBoot;
        QString secureBootConfigurationPolicyFingerPrint;
        QString testSigning;
        QString tpmVersion;
        QString virtualSecureMode;
        QString windowsPE;
    };

    struct loggedOnUser {
        QDateTime lastLogOnDateTime;
        QString userId;
    };

    struct deviceLogCollectionResponse : graph::entity {
        long long errorCode;
        QDateTime expirationDateTimeUTC;
        QString initiatedByUserPrincipalName;
        QUuid managedDeviceId;
        QDateTime receivedDateTimeUTC;
        QDateTime requestedDateTimeUTC;
        double size;
        QString status;
    };

    struct unifiedRoleDefinition : graph::entity {
        QString description;
        QString displayName;
        bool isBuiltIn;
        bool isEnabled;
        QList<QString> resourceScopes;
        QList<microsoft::graph::unifiedRolePermission> rolePermissions;
        QString templateId;
        QString version;
        QList<microsoft::graph::unifiedRoleDefinition> inheritsPermissionsFrom;
    };

    struct unifiedRbacResourceScope : graph::entity {
        QString displayName;
        QString scope;
        QString type;
    };

    struct alternativeSecurityId {
        QString identityProvider;
        QByteArray key;
        int type;
    };

    struct identitySet {
        microsoft::graph::identity application;
        microsoft::graph::identity device;
        microsoft::graph::identity user;
    };

    struct itemBody {
        QString content;
        microsoft::graph::bodyType contentType;
    };

    struct publicErrorDetail {
        QString code;
        QString message;
        QString target;
    };

    struct publicInnerError {
        QString code;
        QList<microsoft::graph::publicErrorDetail> details;
        QString message;
        QString target;
    };

    struct teamDiscoverySettings {
        bool showInTeamsSearchAndSuggestions;
    };

    struct teamFunSettings {
        bool allowCustomMemes;
        bool allowGiphy;
        bool allowStickersAndMemes;
        microsoft::graph::giphyRatingType giphyContentRating;
    };

    struct teamGuestSettings {
        bool allowCreateUpdateChannels;
        bool allowDeleteChannels;
    };

    struct teamMemberSettings {
        bool allowAddRemoveApps;
        bool allowCreatePrivateChannels;
        bool allowCreateUpdateChannels;
        bool allowCreateUpdateRemoveConnectors;
        bool allowCreateUpdateRemoveTabs;
        bool allowDeleteChannels;
    };

    struct teamMessagingSettings {
        bool allowChannelMentions;
        bool allowOwnerDeleteMessages;
        bool allowTeamMentions;
        bool allowUserDeleteMessages;
        bool allowUserEditMessages;
    };

    struct conversationMember : graph::entity {
        QString displayName;
        QList<QString> roles;
        QDateTime visibleHistoryStartDateTime;
    };

    struct resourceSpecificPermissionGrant : graph::directoryObject {
        QString clientAppId;
        QString clientId;
        QString permission;
        QString permissionType;
        QString resourceAppId;
    };

    struct teamsTemplate : graph::entity {
    };

    struct resultInfo {
        int code;
        QString message;
        int subcode;
    };

    struct assignedLabel {
        QString displayName;
        QString labelId;
    };

    struct licenseProcessingState {
        QString state;
    };

    struct membershipRuleProcessingStatus {
        QString errorMessage;
        QDateTime lastMembershipUpdated;
        microsoft::graph::MembershipRuleProcessingStatusDetails status;
    };

    struct groupLifecyclePolicy : graph::entity {
        QString alternateNotificationEmails;
        int groupLifetimeInDays;
        QString managedGroupTypes;
    };

    struct deleted {
        QString state;
    };

    struct root {
    };

    struct sharepointIds {
        QString listId;
        QString listItemId;
        QString listItemUniqueId;
        QString siteId;
        QString siteUrl;
        QString tenantId;
        QString webId;
    };

    struct siteCollection {
        QString dataLocationCode;
        QString hostname;
        microsoft::graph::root root;
    };

    struct apiAuthenticationConfigurationBase {
    };

    struct assignmentOrder {
        QList<QString> order;
    };

    struct authenticationSourceFilter {
        QList<QString> includeApplications;
    };

    struct basicAuthentication : graph::apiAuthenticationConfigurationBase {
        QString password;
        QString username;
    };

    struct claimsMapping {
        QString displayName;
        QString email;
        QString givenName;
        QString surname;
        QString userId;
    };

    struct pkcs12CertificateInformation {
        bool isActive;
        long long notAfter;
        long long notBefore;
        QString thumbprint;
    };

    struct pkcs12Certificate : graph::apiAuthenticationConfigurationBase {
        QString password;
        QString pkcs12Value;
    };

    struct selfServiceSignUpAuthenticationFlowConfiguration {
        bool isEnabled;
    };

    struct trustFrameworkKey {
        QString d;
        QString dp;
        QString dq;
        QString e;
        long long exp;
        QString k;
        QString kid;
        QString kty;
        QString n;
        long long nbf;
        QString p;
        QString q;
        QString qi;
        QString use;
        QList<QString> x5c;
        QString x5t;
    };

    struct userAttributeValuesItem {
        bool isDefault;
        QString name;
        QString value;
    };

    struct identityApiConnector : graph::entity {
        microsoft::graph::apiAuthenticationConfigurationBase authenticationConfiguration;
        QString displayName;
        QString targetUrl;
    };

    struct authenticationListener : graph::entity {
        int priority;
        microsoft::graph::authenticationSourceFilter sourceFilter;
    };

    struct identityUserFlow : graph::entity {
        microsoft::graph::userFlowType userFlowType;
        float userFlowTypeVersion;
    };

    struct identityProvider : graph::entity {
        QString clientId;
        QString clientSecret;
        QString name;
        QString type;
    };

    struct identityProviderBase : graph::entity {
        QString displayName;
    };

    struct builtInIdentityProvider : graph::identityProviderBase {
        QString identityProviderType;
    };

    struct identityUserFlowAttribute : graph::entity {
        microsoft::graph::identityUserFlowAttributeDataType dataType;
        QString description;
        QString displayName;
        microsoft::graph::identityUserFlowAttributeType userFlowAttributeType;
    };

    struct identityBuiltInUserFlowAttribute : graph::identityUserFlowAttribute {
    };

    struct continuousAccessEvaluationPolicy : graph::entity {
        QString description;
        QString displayName;
        QList<QString> groups;
        bool isEnabled;
        QList<QString> users;
    };

    struct identityCustomUserFlowAttribute : graph::identityUserFlowAttribute {
    };

    struct openIdConnectIdentityProvider : graph::identityProviderBase {
        microsoft::graph::claimsMapping claimsMapping;
        QString clientId;
        QString clientSecret;
        QString domainHint;
        QString metadataUrl;
        microsoft::graph::openIdConnectResponseMode responseMode;
        microsoft::graph::openIdConnectResponseTypes responseType;
        QString scope;
    };

    struct openIdConnectProvider : graph::identityProvider {
        microsoft::graph::claimsMapping claimsMapping;
        QString domainHint;
        QString metadataUrl;
        microsoft::graph::openIdConnectResponseMode responseMode;
        microsoft::graph::openIdConnectResponseTypes responseType;
        QString scope;
    };

    struct socialIdentityProvider : graph::identityProviderBase {
        QString clientId;
        QString clientSecret;
        QString identityProviderType;
    };

    struct trustFrameworkKeySet : graph::entity {
        QList<microsoft::graph::trustFrameworkKey> keys;
    };

    struct trustFrameworkPolicy : graph::entity {
    };

    struct userFlowLanguagePage : graph::entity {
    };

    struct labelActionBase {
        QString name;
    };

    struct markContent : graph::labelActionBase {
        QString fontColor;
        long long fontSize;
        QString text;
    };

    struct addFooter : graph::markContent {
        microsoft::graph::alignment alignment;
        int margin;
    };

    struct addHeader : graph::markContent {
        microsoft::graph::alignment alignment;
        int margin;
    };

    struct addWatermark : graph::markContent {
        microsoft::graph::pageOrientation orientation;
    };

    struct autoLabeling {
        QString message;
        QList<QString> sensitiveTypeIds;
    };

    struct dlpActionInfo {
        microsoft::graph::dlpAction action;
    };

    struct blockAccessAction : graph::dlpActionInfo {
    };

    struct classificationInnerError {
        QString activityId;
        QString clientRequestId;
        QString code;
        QDateTime errorDateTime;
    };

    struct classificationAttribute {
        int confidence;
        int count;
    };

    struct contentMetadata {
    };

    struct contentProperties {
        QList<QString> extensions;
        QString lastModifiedBy;
        QDateTime lastModifiedDateTime;
        microsoft::graph::contentMetadata metadata;
    };

    struct currentLabel {
        microsoft::graph::applicationMode applicationMode;
        QString id;
    };

    struct detectedSensitiveContentBase {
        int confidence;
        QString displayName;
        QUuid id;
        int recommendedConfidence;
        int uniqueCount;
    };

    struct deviceRestrictionAction : graph::dlpActionInfo {
        QString message;
        microsoft::graph::restrictionAction restrictionAction;
        QList<microsoft::graph::restrictionTrigger> triggers;
    };

    struct discoveredSensitiveType {
        QList<microsoft::graph::classificationAttribute> classificationAttributes;
        int confidence;
        int count;
        QUuid id;
    };

    struct dlpEvaluationInput {
        microsoft::graph::accessScope accessScope;
        microsoft::graph::currentLabel currentLabel;
        QList<microsoft::graph::discoveredSensitiveType> discoveredSensitiveTypes;
    };

    struct dlpNotification {
        QString author;
    };

    struct dlpEvaluationWindowsDevicesInput : graph::dlpEvaluationInput {
        microsoft::graph::contentProperties contentProperties;
        QString sharedBy;
    };

    struct matchingDlpRule {
        QList<microsoft::graph::dlpActionInfo> actions;
        bool isMostRestrictive;
        QString policyId;
        QString policyName;
        int priority;
        QString ruleId;
        microsoft::graph::ruleMode ruleMode;
        QString ruleName;
    };

    struct dlpWindowsDevicesNotification : graph::dlpNotification {
        QString contentName;
        QString lastModfiedBy;
    };

    struct encryptContent : graph::labelActionBase {
        microsoft::graph::encryptWith encryptWith;
    };

    struct encryptWithTemplate : graph::encryptContent {
        bool availableForEncryption;
        QString templateId;
    };

    struct encryptWithUserDefinedRights : graph::encryptContent {
        bool allowAdHocPermissions;
        bool allowMailForwarding;
        QString decryptionRightsManagementTemplateId;
    };

    struct responsiblePolicy {
        QString id;
        QString name;
    };

    struct responsibleSensitiveType {
        QString description;
        QString id;
        QString name;
        QString publisherName;
        QString rulePackageId;
        QString rulePackageType;
    };

    struct matchingLabel {
        microsoft::graph::applicationMode applicationMode;
        QString description;
        QString displayName;
        QString id;
        bool isEndpointProtectionEnabled;
        QList<microsoft::graph::labelActionBase> labelActions;
        QString name;
        QString policyTip;
        int priority;
        QString toolTip;
    };

    struct evaluateSensitivityLabelsRequest {
        microsoft::graph::currentLabel currentLabel;
        QList<microsoft::graph::discoveredSensitiveType> discoveredSensitiveTypes;
    };

    struct labelPolicy {
        QString id;
        QString name;
    };

    struct lobbyBypassSettings {
        bool isDialInBypassEnabled;
        microsoft::graph::lobbyBypassScope scope;
    };

    struct notifyUserAction : graph::dlpActionInfo {
        QDateTime actionLastModifiedDateTime;
        QString emailText;
        microsoft::graph::overrideOption overrideOption;
        QString policyTip;
        QList<QString> recipients;
    };

    struct protectGroup : graph::labelActionBase {
        bool allowEmailFromGuestUsers;
        bool allowGuestUsers;
        microsoft::graph::groupPrivacy privacy;
    };

    struct protectOnlineMeetingAction : graph::labelActionBase {
        microsoft::graph::onlineMeetingForwarders allowedForwarders;
        microsoft::graph::onlineMeetingPresenters allowedPresenters;
        bool isCopyToClipboardEnabled;
        bool isLobbyEnabled;
        microsoft::graph::lobbyBypassSettings lobbyBypassSettings;
    };

    struct protectSite : graph::labelActionBase {
        microsoft::graph::siteAccessType accessType;
        QString conditionalAccessProtectionLevelId;
    };

    struct sensitiveContentEvidence {
        int length;
        QString match;
        int offset;
    };

    struct fileClassificationRequest : graph::entity {
        QByteArray file;
        QList<QString> sensitiveTypeIds;
    };

    struct textClassificationRequest : graph::entity {
        QString fileExtension;
        microsoft::graph::mlClassificationMatchTolerance matchTolerancesToInclude;
        microsoft::graph::sensitiveTypeScope scopesToRun;
        QList<QString> sensitiveTypeIds;
        QString text;
    };

    struct sensitiveType : graph::entity {
        microsoft::graph::classificationMethod classificationMethod;
        QString description;
        QString name;
        QString publisherName;
        QString rulePackageId;
        QString rulePackageType;
        microsoft::graph::sensitiveTypeScope scope;
        microsoft::graph::sensitiveTypeSource sensitiveTypeSource;
        QString state;
    };

    struct exactMatchUploadAgent : graph::entity {
        QDateTime creationDateTime;
        QString description;
    };

    struct preAuthorizedApplication {
        QString appId;
        QList<QString> permissionIds;
    };

    struct resourceSpecificPermission {
        QString description;
        QString displayName;
        QUuid id;
        bool isEnabled;
        QString value;
    };

    struct passwordCredentialConfiguration {
        std::chrono::system_clock::duration maxLifetime;
        QDateTime restrictForAppsCreatedAfterDateTime;
        microsoft::graph::appCredentialRestrictionType restrictionType;
    };

    struct appMetadataEntry {
        QString key;
        QByteArray value;
    };

    struct certificateAuthority {
        QByteArray certificate;
        QString certificateRevocationListUrl;
        QString deltaCertificateRevocationListUrl;
        bool isRootAuthority;
        QString issuer;
        QString issuerSki;
    };

    struct ComplexExtensionValue {
    };

    struct defaultUserRolePermissions {
        bool allowedToCreateApps;
        bool allowedToCreateSecurityGroups;
        bool allowedToReadOtherUsers;
    };

    struct directorySizeQuota {
        int total;
        int used;
    };

    struct domainState {
        QDateTime lastActionDateTime;
        QString operation;
        QString status;
    };

    struct implicitGrantSettings {
        bool enableAccessTokenIssuance;
        bool enableIdTokenIssuance;
    };

    struct resourcePermission {
        QString type;
        QString value;
    };

    struct licenseUnitsDetail {
        int enabled;
        int suspended;
        int warning;
    };

    struct loginPageTextVisibilitySettings {
        bool hideCannotAccessYourAccount;
        bool hideForgotMyPassword;
        bool hidePrivacyAndCookies;
        bool hideResetItNow;
        bool hideTermsOfUse;
    };

    struct optionalClaim {
        QList<QString> additionalProperties;
        bool essential;
        QString name;
        QString source;
    };

    struct phone {
        QString number;
        microsoft::graph::phoneType type;
    };

    struct physicalOfficeAddress {
        QString city;
        QString countryOrRegion;
        QString officeLocation;
        QString postalCode;
        QString state;
        QString street;
    };

    struct privacyProfile {
        QString contactEmail;
        QString statementUrl;
    };

    struct redirectUriSettings {
        int index;
        QString uri;
    };

    struct resourceAccess {
        QUuid id;
        QString type;
    };

    struct selfSignedCertificate {
        QByteArray customKeyIdentifier;
        QString displayName;
        QDateTime endDateTime;
        QByteArray key;
        QUuid keyId;
        QDateTime startDateTime;
        QString thumbprint;
        QString type;
        QString usage;
    };

    struct servicePlanInfo {
        QString appliesTo;
        QString provisioningStatus;
        QUuid servicePlanId;
        QString servicePlanName;
    };

    struct settingTemplateValue {
        QString defaultValue;
        QString description;
        QString name;
        QString type;
    };

    struct settingValue {
        QString name;
        QString value;
    };

    struct verifiedDomain {
        QString capabilities;
        bool isDefault;
        bool isInitial;
        QString name;
        QString type;
    };

    struct administrativeUnit : graph::directoryObject {
        QString description;
        QString displayName;
        QString visibility;
        QList<microsoft::graph::directoryObject> members;
        QList<microsoft::graph::scopedRoleMembership> scopedRoleMembers;
        QList<microsoft::graph::extension> extensions;
    };

    struct allowedDataLocation : graph::entity {
        QString appId;
        QString domain;
        bool isDefault;
        QString location;
    };

    struct certificateBasedAuthConfiguration : graph::entity {
        QList<microsoft::graph::certificateAuthority> certificateAuthorities;
    };

    struct contract : graph::directoryObject {
        QString contractType;
        QUuid customerId;
        QString defaultDomainName;
        QString displayName;
    };

    struct sharedEmailDomain : graph::entity {
        QString provisioningStatus;
    };

    struct directoryObjectPartnerReference : graph::directoryObject {
        QString description;
        QString displayName;
        QUuid externalPartnerTenantId;
        QString objectType;
    };

    struct directoryRole : graph::directoryObject {
        QString description;
        QString displayName;
        QString roleTemplateId;
        QList<microsoft::graph::directoryObject> members;
        QList<microsoft::graph::scopedRoleMembership> scopedMembers;
    };

    struct directoryRoleTemplate : graph::directoryObject {
        QString description;
        QString displayName;
    };

    struct directorySettingTemplate : graph::directoryObject {
        QString description;
        QString displayName;
        QList<microsoft::graph::settingTemplateValue> values;
    };

    struct domainDnsRecord : graph::entity {
        bool isOptional;
        QString label;
        QString recordType;
        QString supportedService;
        int ttl;
    };

    struct sharedEmailDomainInvitation : graph::entity {
        QDateTime expiryTime;
        QString invitationDomain;
        QString invitationStatus;
    };

    struct domainDnsCnameRecord : graph::domainDnsRecord {
        QString canonicalName;
    };

    struct domainDnsMxRecord : graph::domainDnsRecord {
        QString mailExchange;
        int preference;
    };

    struct domainDnsSrvRecord : graph::domainDnsRecord {
        QString nameTarget;
        int port;
        int priority;
        QString protocol;
        QString service;
        int weight;
    };

    struct domainDnsTxtRecord : graph::domainDnsRecord {
        QString text;
    };

    struct domainDnsUnavailableRecord : graph::domainDnsRecord {
        QString description;
    };

    struct organizationalBrandingProperties : graph::entity {
        QString backgroundColor;
        QByteArray backgroundImage;
        QString backgroundImageRelativeUrl;
        QByteArray bannerLogo;
        QString bannerLogoRelativeUrl;
        QList<QString> cdnList;
        QString customAccountResetCredentialsUrl;
        QString customCannotAccessYourAccountText;
        QString customCannotAccessYourAccountUrl;
        QString customForgotMyPasswordText;
        QString customPrivacyAndCookiesText;
        QString customPrivacyAndCookiesUrl;
        QString customResetItNowText;
        QString customTermsOfUseText;
        QString customTermsOfUseUrl;
        QByteArray favicon;
        QString faviconRelativeUrl;
        QString headerBackgroundColor;
        microsoft::graph::loginPageTextVisibilitySettings loginPageTextVisibilitySettings;
        QString signInPageText;
        QByteArray squareLogo;
        QString squareLogoRelativeUrl;
        QString usernameHintText;
    };

    struct certificateConnectorSetting {
        QDateTime certExpiryTime;
        QString connectorVersion;
        QString enrollmentError;
        QDateTime lastConnectorConnectionTime;
        long long lastUploadVersion;
        int status;
    };

    struct organizationalBrandingLocalization : graph::organizationalBrandingProperties {
    };

    struct orgContact : graph::directoryObject {
        QList<microsoft::graph::physicalOfficeAddress> addresses;
        QString companyName;
        QString department;
        QString displayName;
        QString givenName;
        QString jobTitle;
        QString mail;
        QString mailNickname;
        QDateTime onPremisesLastSyncDateTime;
        QList<microsoft::graph::onPremisesProvisioningError> onPremisesProvisioningErrors;
        bool onPremisesSyncEnabled;
        QList<microsoft::graph::phone> phones;
        QList<QString> proxyAddresses;
        QString surname;
        QList<microsoft::graph::directoryObject> directReports;
        std::unique_ptr<microsoft::graph::directoryObject> manager;
        QList<microsoft::graph::directoryObject> memberOf;
        QList<microsoft::graph::directoryObject> transitiveMemberOf;
        QList<microsoft::graph::directoryObject> transitiveReports;
    };

    struct permissionGrantConditionSet : graph::entity {
        QList<QString> clientApplicationIds;
        QList<QString> clientApplicationPublisherIds;
        bool clientApplicationsFromVerifiedPublisherOnly;
        QList<QString> clientApplicationTenantIds;
        QString permissionClassification;
        QList<QString> permissions;
        microsoft::graph::permissionType permissionType;
        QString resourceApplication;
    };

    struct unifiedRoleAssignment : graph::entity {
        QString appScopeId;
        QString condition;
        QString directoryScopeId;
        QString principalId;
        QString principalOrganizationId;
        QString resourceScope;
        QString roleDefinitionId;
        std::unique_ptr<microsoft::graph::appScope> appScope;
        std::unique_ptr<microsoft::graph::directoryObject> directoryScope;
        std::unique_ptr<microsoft::graph::directoryObject> principal;
        std::unique_ptr<microsoft::graph::unifiedRoleDefinition> roleDefinition;
    };

    struct unifiedRoleScheduleInstanceBase : graph::entity {
        QString appScopeId;
        QString directoryScopeId;
        QString principalId;
        QString roleDefinitionId;
        std::unique_ptr<microsoft::graph::appScope> appScope;
        std::unique_ptr<microsoft::graph::directoryObject> directoryScope;
        std::unique_ptr<microsoft::graph::directoryObject> principal;
        std::unique_ptr<microsoft::graph::unifiedRoleDefinition> roleDefinition;
    };

    struct request : graph::entity {
        QString approvalId;
        QDateTime completedDateTime;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString customData;
        QString status;
    };

    struct unifiedRoleScheduleBase : graph::entity {
        QString appScopeId;
        QDateTime createdDateTime;
        QString createdUsing;
        QString directoryScopeId;
        QDateTime modifiedDateTime;
        QString principalId;
        QString roleDefinitionId;
        QString status;
        std::unique_ptr<microsoft::graph::appScope> appScope;
        std::unique_ptr<microsoft::graph::directoryObject> directoryScope;
        std::unique_ptr<microsoft::graph::directoryObject> principal;
        std::unique_ptr<microsoft::graph::unifiedRoleDefinition> roleDefinition;
    };

    struct unifiedRoleEligibilityScheduleInstance : graph::unifiedRoleScheduleInstanceBase {
        QDateTime endDateTime;
        QString memberType;
        QString roleEligibilityScheduleId;
        QDateTime startDateTime;
    };

    struct subscribedSku : graph::entity {
        QString appliesTo;
        QString capabilityStatus;
        int consumedUnits;
        microsoft::graph::licenseUnitsDetail prepaidUnits;
        QList<microsoft::graph::servicePlanInfo> servicePlans;
        QUuid skuId;
        QString skuPartNumber;
    };

    struct educationAssignmentRecipient {
    };

    struct educationAssignmentClassRecipient : graph::educationAssignmentRecipient {
    };

    struct educationAssignmentGrade {
        microsoft::graph::identitySet gradedBy;
        QDateTime gradedDateTime;
    };

    struct educationAssignmentGradeType {
    };

    struct educationAssignmentGroupRecipient : graph::educationAssignmentRecipient {
    };

    struct educationAssignmentIndividualRecipient : graph::educationAssignmentRecipient {
        QList<QString> recipients;
    };

    struct educationAssignmentPointsGrade : graph::educationAssignmentGrade {
        float points;
    };

    struct educationAssignmentPointsGradeType : graph::educationAssignmentGradeType {
        float maxPoints;
    };

    struct educationResource {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString displayName;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
    };

    struct educationExcelResource : graph::educationResource {
        QString fileUrl;
    };

    struct educationItemBody {
        QString content;
        microsoft::graph::bodyType contentType;
    };

    struct educationFileResource : graph::educationResource {
        QString fileUrl;
    };

    struct educationLinkResource : graph::educationResource {
        QString link;
    };

    struct educationPowerPointResource : graph::educationResource {
        QString fileUrl;
    };

    struct educationSubmissionRecipient {
    };

    struct educationSubmissionIndividualRecipient : graph::educationSubmissionRecipient {
        QString userId;
    };

    struct educationWordResource : graph::educationResource {
        QString fileUrl;
    };

    struct rubricCriterion {
        microsoft::graph::educationItemBody description;
    };

    struct rubricLevel {
        microsoft::graph::educationItemBody description;
        QString displayName;
        microsoft::graph::educationAssignmentGradeType grading;
        QString levelId;
    };

    struct rubricQuality {
        QList<microsoft::graph::rubricCriterion> criteria;
        microsoft::graph::educationItemBody description;
        QString displayName;
        QString qualityId;
        float weight;
    };

    struct rubricQualityFeedbackModel {
        microsoft::graph::educationItemBody feedback;
        QString qualityId;
    };

    struct rubricQualitySelectedColumnModel {
        QString columnId;
        QString qualityId;
    };

    struct educationCategory : graph::entity {
        QString displayName;
    };

    struct educationAssignmentResource : graph::entity {
        bool distributeForStudentWork;
        microsoft::graph::educationResource resource;
    };

    struct educationRubric : graph::entity {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::educationItemBody description;
        QString displayName;
        microsoft::graph::educationAssignmentGradeType grading;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::rubricLevel> levels;
        QList<microsoft::graph::rubricQuality> qualities;
    };

    struct educationAssignmentDefaults : graph::entity {
        microsoft::graph::educationAddedStudentAction addedStudentAction;
        microsoft::graph::educationAddToCalendarOptions addToCalendarAction;
        QTime dueTime;
        QString notificationChannelUrl;
    };

    struct educationAssignmentSettings : graph::entity {
        bool submissionAnimationDisabled;
    };

    struct educationCourse {
        QString courseNumber;
        QString description;
        QString displayName;
        QString externalId;
        QString subject;
    };

    struct educationTerm {
        QString displayName;
        QDate endDate;
        QString externalId;
        QDate startDate;
    };

    struct educationOrganization : graph::entity {
        QString description;
        QString displayName;
        microsoft::graph::educationExternalSource externalSource;
        QString externalSourceDetail;
    };

    struct educationOutcome : graph::entity {
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
    };

    struct educationPointsOutcome : graph::educationOutcome {
        microsoft::graph::educationAssignmentPointsGrade points;
        microsoft::graph::educationAssignmentPointsGrade publishedPoints;
    };

    struct educationRubricOutcome : graph::educationOutcome {
        QList<microsoft::graph::rubricQualityFeedbackModel> publishedRubricQualityFeedback;
        QList<microsoft::graph::rubricQualitySelectedColumnModel> publishedRubricQualitySelectedLevels;
        QList<microsoft::graph::rubricQualityFeedbackModel> rubricQualityFeedback;
        QList<microsoft::graph::rubricQualitySelectedColumnModel> rubricQualitySelectedLevels;
    };

    struct educationSubmissionResource : graph::entity {
        QString assignmentResourceUrl;
        microsoft::graph::educationResource resource;
    };

    struct relatedContact {
        bool accessConsent;
        QString displayName;
        QString emailAddress;
        QString id;
        QString mobilePhone;
        microsoft::graph::contactRelationship relationship;
    };

    struct educationOnPremisesInfo {
        QString immutableId;
    };

    struct educationStudent {
        QDate birthDate;
        QString externalId;
        microsoft::graph::educationGender gender;
        QString grade;
        QString graduationYear;
        QString studentNumber;
    };

    struct educationTeacher {
        QString externalId;
        QString teacherNumber;
    };

    struct educationSynchronizationDataProvider {
    };

    struct educationSynchronizationCustomizationsBase {
    };

    struct educationFileSynchronizationVerificationMessage {
        QString description;
        QString fileName;
        QString type;
    };

    struct educationIdentitySynchronizationConfiguration {
    };

    struct educationIdentityDomain {
        microsoft::graph::educationUserRole appliesTo;
        QString name;
    };

    struct educationIdentityMatchingOptions {
        microsoft::graph::educationUserRole appliesTo;
        QString sourcePropertyName;
        QString targetDomain;
        QString targetPropertyName;
    };

    struct educationSynchronizationConnectionSettings {
        QString clientId;
        QString clientSecret;
    };

    struct educationSynchronizationCustomization {
        bool allowDisplayNameUpdate;
        bool isSyncDeferred;
        QList<QString> optionalPropertiesToSync;
        QDateTime synchronizationStartDate;
    };

    struct educationSynchronizationLicenseAssignment {
        microsoft::graph::educationUserRole appliesTo;
        QList<QString> skuIds;
    };

    struct educationSynchronizationOAuth1ConnectionSettings : graph::educationSynchronizationConnectionSettings {
    };

    struct educationSynchronizationOAuth2ClientCredentialsConnectionSettings : graph::educationSynchronizationConnectionSettings {
        QString scope;
        QString tokenUrl;
    };

    struct educationSynchronizationError : graph::entity {
        QString entryType;
        QString errorCode;
        QString errorMessage;
        QString joiningValue;
        QDateTime recordedDateTime;
        QString reportableIdentifier;
    };

    struct educationSynchronizationProfileStatus : graph::entity {
        long long errorCount;
        QDateTime lastActivityDateTime;
        QDateTime lastSynchronizationDateTime;
        microsoft::graph::educationSynchronizationStatus status;
        QString statusMessage;
    };

    struct matchLocation {
        int length;
        int offset;
    };

    struct dataStoreField {
        QString name;
        bool searchable;
        bool unique;
    };

    struct exactDataMatchStoreColumn {
        QList<QString> ignoredDelimiters;
        bool isCaseInsensitive;
        bool isSearchable;
        QString name;
    };

    struct lookupResultRow : graph::entity {
        QString row;
    };

    struct Json {
    };

    struct workbookIcon {
        int index;
        QString set;
    };

    struct workbookFilterDatetime {
        QString date;
        QString specificity;
    };

    struct workbookOperationError {
        QString code;
        std::unique_ptr<microsoft::graph::workbookOperationError> innerError;
        QString message;
    };

    struct workbookRangeReference {
        QString address;
    };

    struct workbookSessionInfo {
        QString id;
        bool persistChanges;
    };

    struct workbookSortField {
        bool ascending;
        QString color;
        QString dataOption;
        microsoft::graph::workbookIcon icon;
        int key;
        QString sortOn;
    };

    struct workbookWorksheetProtectionOptions {
        bool allowAutoFilter;
        bool allowDeleteColumns;
        bool allowDeleteRows;
        bool allowFormatCells;
        bool allowFormatColumns;
        bool allowFormatRows;
        bool allowInsertColumns;
        bool allowInsertHyperlinks;
        bool allowInsertRows;
        bool allowPivotTables;
        bool allowSort;
    };

    struct systemFacet {
    };

    struct audio {
        QString album;
        QString albumArtist;
        QString artist;
        long long bitrate;
        QString composers;
        QString copyright;
        short disc;
        short discCount;
        long long duration;
        QString genre;
        bool hasDrm;
        bool isVariableBitrate;
        QString title;
        int track;
        int trackCount;
        int year;
    };

    struct fileSystemInfo {
        QDateTime createdDateTime;
        QDateTime lastAccessedDateTime;
        QDateTime lastModifiedDateTime;
    };

    struct image {
        int height;
        int width;
    };

    struct package {
        QString type;
    };

    struct photo {
        QString cameraMake;
        QString cameraModel;
        double exposureDenominator;
        double exposureNumerator;
        double fNumber;
        double focalLength;
        int iso;
        short orientation;
        QDateTime takenDateTime;
    };

    struct publicationFacet {
        QString level;
        QString versionId;
    };

    struct searchResult {
        QString onClickTelemetryUrl;
    };

    struct shared {
        microsoft::graph::identitySet owner;
        QString scope;
        microsoft::graph::identitySet sharedBy;
        QDateTime sharedDateTime;
    };

    struct driveItemSource {
        microsoft::graph::driveItemSourceApplication application;
        QString externalId;
    };

    struct specialFolder {
        QString name;
    };

    struct video {
        int audioBitsPerSample;
        int audioChannels;
        QString audioFormat;
        int audioSamplesPerSecond;
        int bitrate;
        long long duration;
        QString fourCC;
        double frameRate;
        int height;
        int width;
    };

    struct subscription : graph::entity {
        QString applicationId;
        QString changeType;
        QString clientState;
        QString creatorId;
        QString encryptionCertificate;
        QString encryptionCertificateId;
        QDateTime expirationDateTime;
        bool includeResourceData;
        QString latestSupportedTlsVersion;
        QString lifecycleNotificationUrl;
        QString notificationContentType;
        QString notificationQueryOptions;
        QString notificationUrl;
        QString notificationUrlAppId;
        QString resource;
    };

    struct baseItemVersion : graph::entity {
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        microsoft::graph::publicationFacet publication;
    };

    struct driveItemVersion : graph::baseItemVersion {
        QByteArray content;
        long long size;
    };

    struct listInfo {
        bool contentTypesEnabled;
        bool hidden;
        QString _template;
    };

    struct workbookApplication : graph::entity {
        QString calculationMode;
    };

    struct workbookFunctions : graph::entity {
    };

    struct workbookOperation : graph::entity {
        microsoft::graph::workbookOperationError error;
        QString resourceLocation;
        microsoft::graph::workbookOperationStatus status;
    };

    struct workbookChartFill : graph::entity {
    };

    struct workbookChartFont : graph::entity {
        bool bold;
        QString color;
        bool italic;
        QString name;
        double size;
        QString underline;
    };

    struct workbookChartLineFormat : graph::entity {
        QString color;
    };

    struct workbookChartAxisTitleFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFont> font;
    };

    struct workbookChartDataLabelFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFill> fill;
        std::unique_ptr<microsoft::graph::workbookChartFont> font;
    };

    struct workbookChartGridlinesFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartLineFormat> line;
    };

    struct workbookChartLegendFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFill> fill;
        std::unique_ptr<microsoft::graph::workbookChartFont> font;
    };

    struct workbookChartPointFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFill> fill;
    };

    struct workbookChartSeriesFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFill> fill;
        std::unique_ptr<microsoft::graph::workbookChartLineFormat> line;
    };

    struct workbookChartTitleFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFill> fill;
        std::unique_ptr<microsoft::graph::workbookChartFont> font;
    };

    struct workbookCommentReply : graph::entity {
        QString content;
        QString contentType;
    };

    struct workbookFormatProtection : graph::entity {
        bool formulaHidden;
        bool locked;
    };

    struct workbookFunctionResult : graph::entity {
        QString error;
        microsoft::graph::Json value;
    };

    struct workbookRangeSort : graph::entity {
    };

    struct workbookRangeBorder : graph::entity {
        QString color;
        QString sideIndex;
        QString style;
        QString weight;
    };

    struct workbookRangeFill : graph::entity {
        QString color;
    };

    struct workbookRangeFont : graph::entity {
        bool bold;
        QString color;
        bool italic;
        QString name;
        double size;
        QString underline;
    };

    struct workbookRangeView : graph::entity {
        microsoft::graph::Json cellAddresses;
        int columnCount;
        microsoft::graph::Json formulas;
        microsoft::graph::Json formulasLocal;
        microsoft::graph::Json formulasR1C1;
        int index;
        microsoft::graph::Json numberFormat;
        int rowCount;
        microsoft::graph::Json text;
        microsoft::graph::Json values;
        microsoft::graph::Json valueTypes;
        QList<microsoft::graph::workbookRangeView> rows;
    };

    struct workbookTableRow : graph::entity {
        int index;
        microsoft::graph::Json values;
    };

    struct workbookTableSort : graph::entity {
        QList<microsoft::graph::workbookSortField> fields;
        bool matchCase;
        QString method;
    };

    struct workbookWorksheetProtection : graph::entity {
        microsoft::graph::workbookWorksheetProtectionOptions options;
        bool _protected;
    };

    struct attendeeBase : graph::recipient {
        microsoft::graph::attendeeType type;
    };

    struct timeConstraint {
        microsoft::graph::activityDomain activityDomain;
        QList<microsoft::graph::timeSlot> timeSlots;
    };

    struct place : graph::entity {
        microsoft::graph::physicalAddress address;
        QString displayName;
        microsoft::graph::outlookGeoCoordinates geoCoordinates;
        QString phone;
    };

    struct room : graph::place {
        QString audioDeviceName;
        microsoft::graph::bookingType bookingType;
        QString building;
        int capacity;
        QString displayDeviceName;
        QString emailAddress;
        QString floorLabel;
        int floorNumber;
        bool isWheelChairAccessible;
        QString label;
        QString nickname;
        QList<QString> tags;
        QString videoDeviceName;
    };

    struct roomList : graph::place {
        QString emailAddress;
        QList<microsoft::graph::room> rooms;
    };

    struct attachmentItem {
        microsoft::graph::attachmentType attachmentType;
        QString contentType;
        bool isInline;
        QString name;
        long long size;
    };

    struct responseStatus {
        microsoft::graph::responseType response;
        QDateTime time;
    };

    struct localeInfo {
        QString displayName;
        QString locale;
    };

    struct automaticRepliesSetting {
        microsoft::graph::externalAudienceScope externalAudience;
        QString externalReplyMessage;
        QString internalReplyMessage;
        microsoft::graph::dateTimeTimeZone scheduledEndDateTime;
        microsoft::graph::dateTimeTimeZone scheduledStartDateTime;
        microsoft::graph::automaticRepliesStatus status;
    };

    struct calendarSharingMessageAction {
        microsoft::graph::calendarSharingAction action;
        microsoft::graph::calendarSharingActionType actionType;
        microsoft::graph::calendarSharingActionImportance importance;
    };

    struct genericError {
        QString code;
        QString message;
    };

    struct timeZoneBase {
        QString name;
    };

    struct standardTimeZoneOffset {
        int dayOccurrence;
        microsoft::graph::dayOfWeek dayOfWeek;
        int month;
        QTime time;
        int year;
    };

    struct daylightTimeZoneOffset : graph::standardTimeZoneOffset {
        int daylightBias;
    };

    struct followupFlag {
        microsoft::graph::dateTimeTimeZone completedDateTime;
        microsoft::graph::dateTimeTimeZone dueDateTime;
        microsoft::graph::followupFlagStatus flagStatus;
        microsoft::graph::dateTimeTimeZone startDateTime;
    };

    struct freeBusyError {
        QString message;
        QString responseCode;
    };

    struct internetMessageHeader {
        QString name;
        QString value;
    };

    struct userPurpose {
        microsoft::graph::mailboxRecipientType value;
    };

    struct workingHours {
        QList<microsoft::graph::dayOfWeek> daysOfWeek;
        QTime endTime;
        QTime startTime;
        microsoft::graph::timeZoneBase timeZone;
    };

    struct mailTipsError {
        QString code;
        QString message;
    };

    struct mentionsPreview {
        bool isMentioned;
    };

    struct messageRuleActions {
        QList<QString> assignCategories;
        QString copyToFolder;
        bool _delete;
        QList<microsoft::graph::recipient> forwardAsAttachmentTo;
        QList<microsoft::graph::recipient> forwardTo;
        bool markAsRead;
        microsoft::graph::importance markImportance;
        QString moveToFolder;
        bool permanentDelete;
        QList<microsoft::graph::recipient> redirectTo;
        bool stopProcessingRules;
    };

    struct sizeRange {
        int maximumSize;
        int minimumSize;
    };

    struct onlineMeetingInfo {
        QString conferenceId;
        QString joinUrl;
        QList<microsoft::graph::phone> phones;
        QString quickDial;
        QList<QString> tollFreeNumbers;
        QString tollNumber;
    };

    struct recurrencePattern {
        int dayOfMonth;
        QList<microsoft::graph::dayOfWeek> daysOfWeek;
        microsoft::graph::dayOfWeek firstDayOfWeek;
        microsoft::graph::weekIndex index;
        int interval;
        int month;
        microsoft::graph::recurrencePatternType type;
    };

    struct recurrenceRange {
        QDate endDate;
        int numberOfOccurrences;
        QString recurrenceTimeZone;
        QDate startDate;
        microsoft::graph::recurrenceRangeType type;
    };

    struct personDataSource {
        QString type;
    };

    struct rankedEmailAddress {
        QString address;
        double rank;
    };

    struct scheduleItem {
        microsoft::graph::dateTimeTimeZone end;
        bool isPrivate;
        QString location;
        microsoft::graph::dateTimeTimeZone start;
        microsoft::graph::freeBusyStatus status;
        QString subject;
    };

    struct timeZoneInformation {
        QString alias;
        QString displayName;
    };

    struct typedEmailAddress : graph::emailAddress {
        QString otherLabel;
        microsoft::graph::emailType type;
    };

    struct uploadSession {
        QDateTime expirationDateTime;
        QList<QString> nextExpectedRanges;
        QString uploadUrl;
    };

    struct website {
        QString address;
        QString displayName;
        microsoft::graph::websiteType type;
    };

    struct attachment : graph::entity {
        QString contentType;
        bool isInline;
        QDateTime lastModifiedDateTime;
        QString name;
        int size;
    };

    struct calendarPermission : graph::entity {
        QList<microsoft::graph::calendarRoleType> allowedRoles;
        microsoft::graph::emailAddress emailAddress;
        bool isInsideOrganization;
        bool isRemovable;
        microsoft::graph::calendarRoleType role;
    };

    struct multiValueLegacyExtendedProperty : graph::entity {
        QList<QString> value;
    };

    struct singleValueLegacyExtendedProperty : graph::entity {
        QString value;
    };

    struct fileAttachment : graph::attachment {
        QByteArray contentBytes;
        QString contentId;
        QString contentLocation;
    };

    struct inferenceClassificationOverride : graph::entity {
        microsoft::graph::inferenceClassificationType classifyAs;
        microsoft::graph::emailAddress senderEmailAddress;
    };

    struct itemAttachment : graph::attachment {
        std::unique_ptr<microsoft::graph::outlookItem> item;
    };

    struct userConfiguration : graph::entity {
        QByteArray binaryData;
    };

    struct mention : graph::entity {
        QString application;
        QString clientReference;
        microsoft::graph::emailAddress createdBy;
        QDateTime createdDateTime;
        QString deepLink;
        microsoft::graph::emailAddress mentioned;
        QString mentionText;
        QDateTime serverCreatedDateTime;
    };

    struct note : graph::outlookItem {
        microsoft::graph::itemBody body;
        bool hasAttachments;
        bool isDeleted;
        QString subject;
        QList<microsoft::graph::attachment> attachments;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct openTypeExtension : graph::extension {
        QString extensionName;
    };

    struct outlookCategory : graph::entity {
        microsoft::graph::categoryColor color;
        QString displayName;
    };

    struct referenceAttachment : graph::attachment {
        bool isFolder;
        microsoft::graph::referenceAttachmentPermission permission;
        QString previewUrl;
        microsoft::graph::referenceAttachmentProvider providerType;
        QString sourceUrl;
        QString thumbnailUrl;
    };

    struct accessAction {
    };

    struct album {
        QString coverImageItemId;
    };

    struct booleanColumn {
    };

    struct calculatedColumn {
        QString format;
        QString formula;
        QString outputType;
    };

    struct choiceColumn {
        bool allowTextEntry;
        QList<QString> choices;
        QString displayAs;
    };

    struct displayNameLocalization {
        QString displayName;
        QString languageTag;
    };

    struct commentAction {
        bool isReply;
        microsoft::graph::identitySet parentAuthor;
        QList<microsoft::graph::identitySet> participants;
    };

    struct contentApprovalStatusColumn {
    };

    struct contentTypeInfo {
        QString id;
        QString name;
    };

    struct contentTypeOrder {
        bool _default;
        int position;
    };

    struct createAction {
    };

    struct currencyColumn {
        QString locale;
    };

    struct dateTimeColumn {
        QString displayAs;
        QString format;
    };

    struct defaultColumnValue {
        QString formula;
        QString value;
    };

    struct deleteAction {
        QString name;
        QString objectType;
    };

    struct documentSetContent {
        microsoft::graph::contentTypeInfo contentType;
        QString fileName;
        QString folderName;
    };

    struct driveItemUploadableProperties {
        QString description;
        long long fileSize;
        microsoft::graph::fileSystemInfo fileSystemInfo;
        QString name;
    };

    struct driveRecipient {
        QString alias;
        QString email;
        QString objectId;
    };

    struct editAction {
    };

    struct hashes {
        QString crc32Hash;
        QString quickXorHash;
        QString sha1Hash;
        QString sha256Hash;
    };

    struct flexSchemaContainer {
    };

    struct folderView {
        QString sortBy;
        QString sortOrder;
        QString viewType;
    };

    struct geolocationColumn {
    };

    struct hyperlinkOrPictureColumn {
        bool isPicture;
    };

    struct incompleteData {
        QDateTime missingDataBeforeDateTime;
        bool wasThrottled;
    };

    struct mentionAction {
        QList<microsoft::graph::identitySet> mentionees;
    };

    struct moveAction {
        QString from;
        QString to;
    };

    struct renameAction {
        QString newName;
        QString oldName;
    };

    struct restoreAction {
    };

    struct shareAction {
        QList<microsoft::graph::identitySet> recipients;
    };

    struct versionAction {
        QString newVersion;
    };

    struct itemActionStat {
        int actionCount;
        int actorCount;
    };

    struct itemActivityTimeSet {
        QDateTime lastRecordedDateTime;
        QDateTime observedDateTime;
        QDateTime recordedDateTime;
    };

    struct itemPreviewInfo {
        QString getUrl;
        QString postParameters;
        QString postUrl;
    };

    struct itemReference {
        QString driveId;
        QString driveType;
        QString id;
        QString name;
        QString path;
        QString shareId;
        microsoft::graph::sharepointIds sharepointIds;
        QString siteId;
    };

    struct lookupColumn {
        bool allowMultipleValues;
        bool allowUnlimitedLength;
        QString columnName;
        QString listId;
        QString primaryLookupColumnId;
    };

    struct mediaSource {
        microsoft::graph::mediaSourceContentCategory contentCategory;
    };

    struct numberColumn {
        QString decimalPlaces;
        QString displayAs;
        double maximum;
        double minimum;
    };

    struct pendingContentUpdate {
        QDateTime queuedDateTime;
    };

    struct personOrGroupColumn {
        bool allowMultipleSelection;
        QString chooseFromType;
        QString displayAs;
    };

    struct storagePlanInformation {
        bool upgradeAvailable;
    };

    struct sharingInvitation {
        QString email;
        microsoft::graph::identitySet invitedBy;
        QString redeemedBy;
        bool signInRequired;
    };

    struct sharingLink {
        microsoft::graph::identity application;
        QString configuratorUrl;
        bool preventsDownload;
        QString scope;
        QString type;
        QString webHtml;
        QString webUrl;
    };

    struct sitePageData {
    };

    struct termColumn {
        bool allowMultipleValues;
        bool showFullyQualifiedName;
    };

    struct textColumn {
        bool allowMultipleLines;
        bool appendChangesToExistingText;
        int linesForEditing;
        int maxLength;
        QString textType;
    };

    struct thumbnail {
        QByteArray content;
        int height;
        QString sourceItemId;
        QString url;
        int width;
    };

    struct thumbnailColumn {
    };

    struct webPart {
        microsoft::graph::sitePageData data;
        QString type;
    };

    struct columnLink : graph::entity {
        QString name;
    };

    struct fieldValueSet : graph::entity {
    };

    struct listItemVersion : graph::baseItemVersion {
        std::unique_ptr<microsoft::graph::fieldValueSet> fields;
    };

    struct extensionSchemaProperty {
        QString name;
        QString type;
    };

    struct schemaExtension : graph::entity {
        QString description;
        QString owner;
        QList<microsoft::graph::extensionSchemaProperty> properties;
        QString status;
        QList<QString> targetTypes;
    };

    struct updateWindow {
        QTime updateWindowEndTime;
        QTime updateWindowStartTime;
    };

    struct kerberosSignOnSettings {
        QString kerberosServicePrincipalName;
        microsoft::graph::kerberosSignOnMappingAttributeType kerberosSignOnMappingAttributeType;
    };

    struct onPremisesPublishingSingleSignOn {
        microsoft::graph::kerberosSignOnSettings kerberosSignOnSettings;
        microsoft::graph::singleSignOnMode singleSignOnMode;
    };

    struct verifiedCustomDomainCertificatesMetadata {
        QDateTime expiryDate;
        QDateTime issueDate;
        QString issuerName;
        QString subjectName;
        QString thumbprint;
    };

    struct propertyToEvaluate {
        QString propertyName;
        QString propertyValue;
    };

    struct stringKeyStringValuePair {
        QString key;
        QString value;
    };

    struct metadataEntry {
        QString key;
        QString value;
    };

    struct referencedObject {
        QString referencedObjectName;
        QString referencedProperty;
    };

    struct attributeMappingParameterSchema {
        bool allowMultipleOccurrences;
        QString name;
        bool required;
        microsoft::graph::attributeType type;
    };

    struct stringKeyObjectValuePair {
        QString key;
    };

    struct filterOperand {
        QList<QString> values;
    };

    struct stringKeyLongValuePair {
        QString key;
        long long value;
    };

    struct synchronizationError {
        QString code;
        QString message;
        bool tenantActionable;
    };

    struct synchronizationJobSubject {
        QString objectId;
        QString objectTypeName;
    };

    struct synchronizationJobRestartCriteria {
        microsoft::graph::synchronizationJobRestartScope resetScope;
    };

    struct synchronizationProgress {
        long long completedUnits;
        QDateTime progressObservationDateTime;
        long long totalUnits;
        QString units;
    };

    struct synchronizationQuarantine {
        QDateTime currentBegan;
        microsoft::graph::synchronizationError error;
        QDateTime nextAttempt;
        microsoft::graph::quarantineReason reason;
        QDateTime seriesBegan;
        long long seriesCount;
    };

    struct synchronizationSchedule {
        QDateTime expiration;
        std::chrono::system_clock::duration interval;
        microsoft::graph::synchronizationScheduleState state;
    };

    struct synchronizationSecretKeyStringValuePair {
        microsoft::graph::synchronizationSecret key;
        QString value;
    };

    struct synchronizationTaskExecution {
        QString activityIdentifier;
        long long countEntitled;
        long long countEntitledForProvisioning;
        long long countEscrowed;
        long long countEscrowedRaw;
        long long countExported;
        long long countExports;
        long long countImported;
        long long countImportedDeltas;
        long long countImportedReferenceDeltas;
        microsoft::graph::synchronizationError error;
        microsoft::graph::synchronizationTaskExecutionResult state;
        QDateTime timeBegan;
        QDateTime timeEnded;
    };

    struct attributeMappingFunctionSchema : graph::entity {
        QList<microsoft::graph::attributeMappingParameterSchema> parameters;
    };

    struct filterOperatorSchema : graph::entity {
        microsoft::graph::scopeOperatorType arity;
        microsoft::graph::scopeOperatorMultiValuedComparisonType multivaluedComparisonType;
        QList<microsoft::graph::attributeType> supportedAttributeTypes;
    };

    struct accessReviewApplyAction {
    };

    struct accessReviewError : graph::genericError {
    };

    struct accessReviewScope {
    };

    struct accessReviewQueryScope : graph::accessReviewScope {
        QString query;
        QString queryRoot;
        QString queryType;
    };

    struct accessReviewInactiveUsersQueryScope : graph::accessReviewQueryScope {
        std::chrono::system_clock::duration inactiveDuration;
    };

    struct accessReviewInstanceDecisionItemResource {
        QString displayName;
        QString id;
        QString type;
    };

    struct accessReviewInstanceDecisionItemTarget {
    };

    struct accessReviewInstanceDecisionItemServicePrincipalTarget : graph::accessReviewInstanceDecisionItemTarget {
        QString appId;
        QString servicePrincipalDisplayName;
        QString servicePrincipalId;
    };

    struct accessReviewInstanceDecisionItemUserTarget : graph::accessReviewInstanceDecisionItemTarget {
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct accessReviewNotificationRecipientScope {
    };

    struct accessReviewNotificationRecipientQueryScope : graph::accessReviewNotificationRecipientScope {
        QString query;
        QString queryRoot;
        QString queryType;
    };

    struct accessReviewRecurrenceSettings {
        int durationInDays;
        int recurrenceCount;
        QString recurrenceEndType;
        QString recurrenceType;
    };

    struct accessReviewReviewerScope : graph::accessReviewScope {
        QString query;
        QString queryRoot;
        QString queryType;
    };

    struct autoReviewSettings {
        QString notReviewedResult;
    };

    struct appConsentRequestScope {
        QString displayName;
    };

    struct disableAndDeleteUserApplyAction : graph::accessReviewApplyAction {
    };

    struct governanceCriteria {
    };

    struct governanceNotificationTemplate {
        QString culture;
        QString id;
        QString source;
        QString type;
        QString version;
    };

    struct groupMembershipGovernanceCriteria : graph::governanceCriteria {
        QString groupId;
    };

    struct principalResourceMembershipsScope : graph::accessReviewScope {
        QList<microsoft::graph::accessReviewScope> principalScopes;
        QList<microsoft::graph::accessReviewScope> resourceScopes;
    };

    struct programResource : graph::identity {
        QString type;
    };

    struct removeAccessApplyAction : graph::accessReviewApplyAction {
    };

    struct roleMembershipGovernanceCriteria : graph::governanceCriteria {
        QString roleId;
        QString roleTemplateId;
    };

    struct servicePrincipalIdentity : graph::identity {
        QString appId;
    };

    struct userGovernanceCriteria : graph::governanceCriteria {
        QString userId;
    };

    struct accessReviewDecision : graph::entity {
        QString accessRecommendation;
        QString accessReviewId;
        microsoft::graph::userIdentity appliedBy;
        QDateTime appliedDateTime;
        QString applyResult;
        QString justification;
        microsoft::graph::userIdentity reviewedBy;
        QDateTime reviewedDateTime;
        QString reviewResult;
    };

    struct accessReviewReviewer : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        QString userPrincipalName;
    };

    struct accessReviewHistoryDefinition : graph::entity {
        microsoft::graph::userIdentity createdBy;
        QDateTime createdDateTime;
        QList<microsoft::graph::accessReviewHistoryDecisionFilter> decisions;
        QString displayName;
        QString downloadUri;
        QDateTime fulfilledDateTime;
        QDateTime reviewHistoryPeriodEndDateTime;
        QDateTime reviewHistoryPeriodStartDateTime;
        QList<microsoft::graph::accessReviewScope> scopes;
        microsoft::graph::accessReviewHistoryStatus status;
    };

    struct accessReviewInstanceDecisionItem : graph::entity {
        QString accessReviewId;
        microsoft::graph::userIdentity appliedBy;
        QDateTime appliedDateTime;
        QString applyResult;
        QString decision;
        QString justification;
        microsoft::graph::identity principal;
        QString principalLink;
        QString recommendation;
        microsoft::graph::accessReviewInstanceDecisionItemResource resource;
        QString resourceLink;
        microsoft::graph::userIdentity reviewedBy;
        QDateTime reviewedDateTime;
        microsoft::graph::accessReviewInstanceDecisionItemTarget target;
    };

    struct approvalStep : graph::entity {
        bool assignedToMe;
        QString displayName;
        QString justification;
        microsoft::graph::identity reviewedBy;
        QDateTime reviewedDateTime;
        QString reviewResult;
        QString status;
    };

    struct businessFlowTemplate : graph::entity {
        QString displayName;
    };

    struct entitlementManagementSettings : graph::entity {
        int daysUntilExternalUserDeletedAfterBlocked;
        QString externalUserLifecycleAction;
    };

    struct programControlType : graph::entity {
        QString controlTypeGroupId;
        QString displayName;
    };

    struct agreementFileData {
        QByteArray data;
    };

    struct termsExpiration {
        std::chrono::system_clock::duration frequency;
        QDateTime startDateTime;
    };

    struct agreementFileProperties : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        microsoft::graph::agreementFileData fileData;
        QString fileName;
        bool isDefault;
        bool isMajorVersion;
        QString language;
    };

    struct agreementFileVersion : graph::agreementFileProperties {
    };

    struct conditionalAccessSessionControl {
        bool isEnabled;
    };

    struct applicationEnforcedRestrictionsSessionControl : graph::conditionalAccessSessionControl {
    };

    struct cloudAppSecuritySessionControl : graph::conditionalAccessSessionControl {
        microsoft::graph::cloudAppSecuritySessionControlType cloudAppSecurityType;
    };

    struct conditionalAccessApplications {
        QList<QString> excludeApplications;
        QList<QString> includeApplications;
        QList<QString> includeAuthenticationContextClassReferences;
        QList<QString> includeUserActions;
    };

    struct conditionalAccessClientApplications {
        QList<QString> excludeServicePrincipals;
        QList<QString> includeServicePrincipals;
    };

    struct conditionalAccessDeviceStates {
        QList<QString> excludeStates;
        QList<QString> includeStates;
    };

    struct conditionalAccessLocations {
        QList<QString> excludeLocations;
        QList<QString> includeLocations;
    };

    struct conditionalAccessPlatforms {
        QList<microsoft::graph::conditionalAccessDevicePlatform> excludePlatforms;
        QList<microsoft::graph::conditionalAccessDevicePlatform> includePlatforms;
    };

    struct conditionalAccessUsers {
        QList<QString> excludeGroups;
        QList<QString> excludeRoles;
        QList<QString> excludeUsers;
        QList<QString> includeGroups;
        QList<QString> includeRoles;
        QList<QString> includeUsers;
    };

    struct conditionalAccessFilter {
        microsoft::graph::filterMode mode;
        QString rule;
    };

    struct conditionalAccessGrantControls {
        QList<microsoft::graph::conditionalAccessGrantControl> builtInControls;
        QList<QString> customAuthenticationFactors;
        QString _operator;
        QList<QString> termsOfUse;
    };

    struct persistentBrowserSessionControl : graph::conditionalAccessSessionControl {
        microsoft::graph::persistentBrowserSessionMode mode;
    };

    struct signInFrequencySessionControl : graph::conditionalAccessSessionControl {
        microsoft::graph::signinFrequencyType type;
        int value;
    };

    struct ipRange {
    };

    struct iPv4CidrRange : graph::ipRange {
        QString cidrAddress;
    };

    struct iPv6CidrRange : graph::ipRange {
        QString cidrAddress;
    };

    struct riskUserActivity {
        microsoft::graph::riskDetail detail;
        QList<microsoft::graph::riskEventType> eventTypes;
        QList<QString> riskEventTypes;
    };

    struct authenticationContextClassReference : graph::entity {
        QString description;
        QString displayName;
        bool isAvailable;
    };

    struct namedLocation : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        QDateTime modifiedDateTime;
    };

    struct countryNamedLocation : graph::namedLocation {
        QList<QString> countriesAndRegions;
        microsoft::graph::countryLookupMethodType countryLookupMethod;
        bool includeUnknownCountriesAndRegions;
    };

    struct riskDetection : graph::entity {
        microsoft::graph::activityType activity;
        QDateTime activityDateTime;
        QString additionalInfo;
        QString correlationId;
        QDateTime detectedDateTime;
        microsoft::graph::riskDetectionTimingType detectionTimingType;
        QString ipAddress;
        QDateTime lastUpdatedDateTime;
        microsoft::graph::signInLocation location;
        QString requestId;
        microsoft::graph::riskDetail riskDetail;
        QString riskEventType;
        microsoft::graph::riskLevel riskLevel;
        microsoft::graph::riskState riskState;
        microsoft::graph::riskEventType riskType;
        QString source;
        microsoft::graph::tokenIssuerType tokenIssuerType;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct ipNamedLocation : graph::namedLocation {
        QList<microsoft::graph::ipRange> ipRanges;
        bool isTrusted;
    };

    struct accessPackageLocalizedText {
        QString languageCode;
        QString text;
    };

    struct accessPackageResourceAttributeDestination {
    };

    struct accessPackageResourceAttributeSource {
    };

    struct accessPackageUserDirectoryAttributeStore : graph::accessPackageResourceAttributeDestination {
    };

    struct userSet {
        bool isBackup;
    };

    struct assignmentReviewSettings {
        int durationInDays;
        bool isEnabled;
        QString recurrenceType;
        QList<microsoft::graph::userSet> reviewers;
        QString reviewerType;
        QDateTime startDateTime;
    };

    struct connectedOrganizationMembers : graph::userSet {
        QString description;
        QString id;
    };

    struct connectionInfo {
        QString url;
    };

    struct expirationPattern {
        std::chrono::system_clock::duration duration;
        QDateTime endDateTime;
        microsoft::graph::expirationPatternType type;
    };

    struct externalSponsors : graph::userSet {
    };

    struct groupMembers : graph::userSet {
        QString description;
        QString id;
    };

    struct internalSponsors : graph::userSet {
    };

    struct requestorManager : graph::userSet {
        int managerLevel;
    };

    struct requestorSettings {
        bool acceptRequests;
        QList<microsoft::graph::userSet> allowedRequestors;
        QString scopeType;
    };

    struct singleUser : graph::userSet {
        QString description;
        QString id;
    };

    struct identitySource {
    };

    struct azureActiveDirectoryTenant : graph::identitySource {
        QString displayName;
        QString tenantId;
    };

    struct domainIdentitySource : graph::identitySource {
        QString displayName;
        QString domainName;
    };

    struct externalDomainFederation : graph::identitySource {
        QString displayName;
        QString domainName;
        QString issuerUri;
    };

    struct informationProtectionAction {
    };

    struct addContentFooterAction : graph::informationProtectionAction {
        microsoft::graph::contentAlignment alignment;
        QString fontColor;
        QString fontName;
        int fontSize;
        int margin;
        QString text;
        QString uiElementName;
    };

    struct addContentHeaderAction : graph::informationProtectionAction {
        microsoft::graph::contentAlignment alignment;
        QString fontColor;
        QString fontName;
        int fontSize;
        int margin;
        QString text;
        QString uiElementName;
    };

    struct addWatermarkAction : graph::informationProtectionAction {
        QString fontColor;
        QString fontName;
        int fontSize;
        microsoft::graph::watermarkLayout layout;
        QString text;
        QString uiElementName;
    };

    struct parentLabelDetails {
        QString color;
        QString description;
        QString id;
        bool isActive;
        QString name;
        std::unique_ptr<microsoft::graph::parentLabelDetails> parent;
        int sensitivity;
        QString tooltip;
    };

    struct labelDetails : graph::parentLabelDetails {
    };

    struct bufferDecryptionResult {
        QByteArray decryptedBuffer;
    };

    struct bufferEncryptionResult {
        QByteArray encryptedBuffer;
        QByteArray publishingLicense;
    };

    struct classificationResult {
        int confidenceLevel;
        int count;
        QUuid sensitiveTypeId;
    };

    struct contentInfo {
        microsoft::graph::contentFormat format;
        QString identifier;
        QList<microsoft::graph::keyValuePair> metadata;
        microsoft::graph::contentState state;
    };

    struct customAction : graph::informationProtectionAction {
        QString name;
        QList<microsoft::graph::keyValuePair> properties;
    };

    struct downgradeJustification {
        bool isDowngradeJustified;
        QString justificationMessage;
    };

    struct informationProtectionContentLabel {
        microsoft::graph::assignmentMethod assignmentMethod;
        QDateTime creationDateTime;
        microsoft::graph::labelDetails label;
    };

    struct justifyAction : graph::informationProtectionAction {
    };

    struct labelingOptions {
        microsoft::graph::assignmentMethod assignmentMethod;
        microsoft::graph::downgradeJustification downgradeJustification;
        QList<microsoft::graph::keyValuePair> extendedProperties;
        QUuid labelId;
    };

    struct metadataAction : graph::informationProtectionAction {
        QList<microsoft::graph::keyValuePair> metadataToAdd;
        QList<QString> metadataToRemove;
    };

    struct protectAdhocAction : graph::informationProtectionAction {
    };

    struct protectByTemplateAction : graph::informationProtectionAction {
        QString templateId;
    };

    struct protectDoNotForwardAction : graph::informationProtectionAction {
    };

    struct recommendLabelAction : graph::informationProtectionAction {
        QList<microsoft::graph::informationProtectionAction> actions;
        microsoft::graph::actionSource actionSource;
        microsoft::graph::labelDetails label;
        QList<QUuid> responsibleSensitiveTypeIds;
    };

    struct removeContentFooterAction : graph::informationProtectionAction {
        QList<QString> uiElementNames;
    };

    struct removeContentHeaderAction : graph::informationProtectionAction {
        QList<QString> uiElementNames;
    };

    struct removeProtectionAction : graph::informationProtectionAction {
    };

    struct removeWatermarkAction : graph::informationProtectionAction {
        QList<QString> uiElementNames;
    };

    struct signingResult {
        QByteArray signature;
        QString signingKeyId;
    };

    struct verificationResult {
        bool signatureValid;
    };

    struct informationProtectionLabel : graph::entity {
        QString color;
        QString description;
        bool isActive;
        QString name;
        microsoft::graph::parentLabelDetails parent;
        int sensitivity;
        QString tooltip;
    };

    struct mimeContent {
        QString type;
        QByteArray value;
    };

    struct androidForWorkAppConfigurationSchemaItem {
        microsoft::graph::androidForWorkAppConfigurationSchemaItemDataType dataType;
        bool defaultBoolValue;
        int defaultIntValue;
        QList<QString> defaultStringArrayValue;
        QString defaultStringValue;
        QString description;
        QString displayName;
        QString schemaItemKey;
        QList<microsoft::graph::keyValuePair> selections;
    };

    struct androidManagedStoreAppConfigurationSchemaItem {
        microsoft::graph::androidManagedStoreAppConfigurationSchemaItemDataType dataType;
        bool defaultBoolValue;
        int defaultIntValue;
        QList<QString> defaultStringArrayValue;
        QString defaultStringValue;
        QString description;
        QString displayName;
        int index;
        int parentIndex;
        QString schemaItemKey;
        QList<microsoft::graph::keyValuePair> selections;
    };

    struct deviceAndAppManagementAssignmentTarget {
        QString deviceAndAppManagementAssignmentFilterId;
        microsoft::graph::deviceAndAppManagementAssignmentFilterType deviceAndAppManagementAssignmentFilterType;
    };

    struct allDevicesAssignmentTarget : graph::deviceAndAppManagementAssignmentTarget {
    };

    struct allLicensedUsersAssignmentTarget : graph::deviceAndAppManagementAssignmentTarget {
    };

    struct mobileAppAssignmentSettings {
    };

    struct androidManagedStoreAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        QList<QString> androidManagedStoreAppTrackIds;
    };

    struct androidManagedStoreAppTrack {
        QString trackAlias;
        QString trackId;
    };

    struct androidMinimumOperatingSystem {
        bool v10_0;
        bool v11_0;
        bool v4_0;
        bool v4_0_3;
        bool v4_1;
        bool v4_2;
        bool v4_3;
        bool v4_4;
        bool v5_0;
        bool v5_1;
        bool v6_0;
        bool v7_0;
        bool v7_1;
        bool v8_0;
        bool v8_1;
        bool v9_0;
    };

    struct androidPermissionAction {
        microsoft::graph::androidPermissionActionType action;
        QString permission;
    };

    struct appConfigurationSettingItem {
        QString appConfigKey;
        microsoft::graph::mdmAppConfigKeyType appConfigKeyType;
        QString appConfigKeyValue;
    };

    struct configurationManagerCollectionAssignmentTarget : graph::deviceAndAppManagementAssignmentTarget {
        QString collectionId;
    };

    struct excludedApps {
        bool access;
        bool bing;
        bool excel;
        bool groove;
        bool infoPath;
        bool lync;
        bool oneDrive;
        bool oneNote;
        bool outlook;
        bool powerPoint;
        bool publisher;
        bool sharePointDesigner;
        bool teams;
        bool visio;
        bool word;
    };

    struct groupAssignmentTarget : graph::deviceAndAppManagementAssignmentTarget {
        QString groupId;
    };

    struct exclusionGroupAssignmentTarget : graph::groupAssignmentTarget {
    };

    struct fileEncryptionInfo {
        QByteArray encryptionKey;
        QByteArray fileDigest;
        QString fileDigestAlgorithm;
        QByteArray initializationVector;
        QByteArray mac;
        QByteArray macKey;
        QString profileIdentifier;
    };

    struct iosDeviceType {
        bool iPad;
        bool iPhoneAndIPod;
    };

    struct iosLobAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool isRemovable;
        bool uninstallOnDeviceRemoval;
        QString vpnConfigurationId;
    };

    struct iosMinimumOperatingSystem {
        bool v10_0;
        bool v11_0;
        bool v12_0;
        bool v13_0;
        bool v14_0;
        bool v8_0;
        bool v9_0;
    };

    struct iosStoreAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool isRemovable;
        bool uninstallOnDeviceRemoval;
        QString vpnConfigurationId;
    };

    struct iosVppAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool isRemovable;
        bool uninstallOnDeviceRemoval;
        bool useDeviceLicensing;
        QString vpnConfigurationId;
    };

    struct iosVppAppRevokeLicensesActionResult {
        microsoft::graph::vppTokenActionFailureReason actionFailureReason;
        QString actionName;
        microsoft::graph::actionState actionState;
        int failedLicensesCount;
        QDateTime lastUpdatedDateTime;
        QString managedDeviceId;
        QDateTime startDateTime;
        int totalLicensesCount;
        QString userId;
    };

    struct macOsLobAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool uninstallOnDeviceRemoval;
    };

    struct macOSLobChildApp {
        QString buildNumber;
        QString bundleId;
        QString versionNumber;
    };

    struct macOSMinimumOperatingSystem {
        bool v10_10;
        bool v10_11;
        bool v10_12;
        bool v10_13;
        bool v10_14;
        bool v10_15;
        bool v10_7;
        bool v10_8;
        bool v10_9;
        bool v11_0;
        bool v12_0;
    };

    struct macOsVppAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool uninstallOnDeviceRemoval;
        bool useDeviceLicensing;
    };

    struct macOsVppAppRevokeLicensesActionResult {
        microsoft::graph::vppTokenActionFailureReason actionFailureReason;
        QString actionName;
        microsoft::graph::actionState actionState;
        int failedLicensesCount;
        QDateTime lastUpdatedDateTime;
        QString managedDeviceId;
        QDateTime startDateTime;
        int totalLicensesCount;
        QString userId;
    };

    struct microsoftStoreForBusinessAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool useDeviceContext;
    };

    struct mobileAppInstallTimeSettings {
        QDateTime deadlineDateTime;
        QDateTime startDateTime;
        bool useLocalTime;
    };

    struct mobileAppRelationshipState {
        QString deviceId;
        int errorCode;
        microsoft::graph::resultantAppState installState;
        microsoft::graph::resultantAppStateDetail installStateDetail;
        QList<QString> sourceIds;
        QString targetDisplayName;
        QString targetId;
        QDateTime targetLastSyncDateTime;
    };

    struct vppLicensingType {
        bool supportDeviceLicensing;
        bool supportsDeviceLicensing;
        bool supportsUserLicensing;
        bool supportUserLicensing;
    };

    struct win32LobAppRestartSettings {
        int countdownDisplayBeforeRestartInMinutes;
        int gracePeriodInMinutes;
        int restartNotificationSnoozeDurationInMinutes;
    };

    struct win32LobAppDetection {
    };

    struct win32LobAppFileSystemDetection : graph::win32LobAppDetection {
        bool check32BitOn64System;
        microsoft::graph::win32LobAppFileSystemDetectionType detectionType;
        QString detectionValue;
        QString fileOrFolderName;
        microsoft::graph::win32LobAppDetectionOperator _operator;
        QString path;
    };

    struct win32LobAppRequirement {
        QString detectionValue;
        microsoft::graph::win32LobAppDetectionOperator _operator;
    };

    struct win32LobAppFileSystemRequirement : graph::win32LobAppRequirement {
        bool check32BitOn64System;
        microsoft::graph::win32LobAppFileSystemDetectionType detectionType;
        QString fileOrFolderName;
        QString path;
    };

    struct win32LobAppRule {
        microsoft::graph::win32LobAppRuleType ruleType;
    };

    struct win32LobAppFileSystemRule : graph::win32LobAppRule {
        bool check32BitOn64System;
        QString comparisonValue;
        QString fileOrFolderName;
        microsoft::graph::win32LobAppFileSystemOperationType operationType;
        microsoft::graph::win32LobAppRuleOperator _operator;
        QString path;
    };

    struct win32LobAppInstallExperience {
        microsoft::graph::win32LobAppRestartBehavior deviceRestartBehavior;
        microsoft::graph::runAsAccountType runAsAccount;
    };

    struct win32LobAppMsiInformation {
        microsoft::graph::win32LobAppMsiPackageType packageType;
        QString productCode;
        QString productName;
        QString productVersion;
        QString publisher;
        bool requiresReboot;
        QString upgradeCode;
    };

    struct win32LobAppPowerShellScriptDetection : graph::win32LobAppDetection {
        bool enforceSignatureCheck;
        bool runAs32Bit;
        QString scriptContent;
    };

    struct win32LobAppPowerShellScriptRequirement : graph::win32LobAppRequirement {
        microsoft::graph::win32LobAppPowerShellScriptDetectionType detectionType;
        QString displayName;
        bool enforceSignatureCheck;
        bool runAs32Bit;
        microsoft::graph::runAsAccountType runAsAccount;
        QString scriptContent;
    };

    struct win32LobAppPowerShellScriptRule : graph::win32LobAppRule {
        QString comparisonValue;
        QString displayName;
        bool enforceSignatureCheck;
        microsoft::graph::win32LobAppPowerShellScriptRuleOperationType operationType;
        microsoft::graph::win32LobAppRuleOperator _operator;
        bool runAs32Bit;
        microsoft::graph::runAsAccountType runAsAccount;
        QString scriptContent;
    };

    struct win32LobAppProductCodeDetection : graph::win32LobAppDetection {
        QString productCode;
        QString productVersion;
        microsoft::graph::win32LobAppDetectionOperator productVersionOperator;
    };

    struct win32LobAppProductCodeRule : graph::win32LobAppRule {
        QString productCode;
        QString productVersion;
        microsoft::graph::win32LobAppRuleOperator productVersionOperator;
    };

    struct win32LobAppRegistryDetection : graph::win32LobAppDetection {
        bool check32BitOn64System;
        microsoft::graph::win32LobAppRegistryDetectionType detectionType;
        QString detectionValue;
        QString keyPath;
        microsoft::graph::win32LobAppDetectionOperator _operator;
        QString valueName;
    };

    struct win32LobAppRegistryRequirement : graph::win32LobAppRequirement {
        bool check32BitOn64System;
        microsoft::graph::win32LobAppRegistryDetectionType detectionType;
        QString keyPath;
        QString valueName;
    };

    struct win32LobAppRegistryRule : graph::win32LobAppRule {
        bool check32BitOn64System;
        QString comparisonValue;
        QString keyPath;
        microsoft::graph::win32LobAppRegistryRuleOperationType operationType;
        microsoft::graph::win32LobAppRuleOperator _operator;
        QString valueName;
    };

    struct win32LobAppReturnCode {
        int returnCode;
        microsoft::graph::win32LobAppReturnCodeType type;
    };

    struct windowsAppXAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool useDeviceContext;
    };

    struct windowsMinimumOperatingSystem {
        bool v10_0;
        bool v10_1607;
        bool v10_1703;
        bool v10_1709;
        bool v10_1803;
        bool v10_1809;
        bool v10_1903;
        bool v10_1909;
        bool v10_2004;
        bool v10_21H1;
        bool v10_2H20;
        bool v8_0;
        bool v8_1;
    };

    struct windowsPackageInformation {
        microsoft::graph::windowsArchitecture applicableArchitecture;
        QString displayName;
        QString identityName;
        QString identityPublisher;
        QString identityResourceIdentifier;
        QString identityVersion;
        microsoft::graph::windowsMinimumOperatingSystem minimumSupportedOperatingSystem;
    };

    struct windowsUniversalAppXAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        bool useDeviceContext;
    };

    struct managedEBookCategory : graph::entity {
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct enterpriseCodeSigningCertificate : graph::entity {
        QByteArray content;
        QDateTime expirationDateTime;
        QString issuer;
        QString issuerName;
        microsoft::graph::certificateStatus status;
        QString subject;
        QString subjectName;
        QDateTime uploadDateTime;
    };

    struct mobileAppCategory : graph::entity {
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct symantecCodeSigningCertificate : graph::entity {
        QByteArray content;
        QDateTime expirationDateTime;
        QString issuer;
        QString issuerName;
        QString password;
        microsoft::graph::certificateStatus status;
        QString subject;
        QString subjectName;
        QDateTime uploadDateTime;
    };

    struct sideLoadingKey : graph::entity {
        QString description;
        QString displayName;
        QString lastUpdatedDateTime;
        int totalActivation;
        QString value;
    };

    struct managedAppPolicy : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QString version;
    };

    struct managedAppProtection : graph::managedAppPolicy {
        QList<microsoft::graph::managedAppDataIngestionLocation> allowedDataIngestionLocations;
        QList<microsoft::graph::managedAppDataStorageLocation> allowedDataStorageLocations;
        microsoft::graph::managedAppDataTransferLevel allowedInboundDataTransferSources;
        int allowedOutboundClipboardSharingExceptionLength;
        microsoft::graph::managedAppClipboardSharingLevel allowedOutboundClipboardSharingLevel;
        microsoft::graph::managedAppDataTransferLevel allowedOutboundDataTransferDestinations;
        microsoft::graph::managedAppRemediationAction appActionIfDeviceComplianceRequired;
        microsoft::graph::managedAppRemediationAction appActionIfMaximumPinRetriesExceeded;
        microsoft::graph::managedAppRemediationAction appActionIfUnableToAuthenticateUser;
        bool blockDataIngestionIntoOrganizationDocuments;
        bool contactSyncBlocked;
        bool dataBackupBlocked;
        bool deviceComplianceRequired;
        microsoft::graph::managedAppPhoneNumberRedirectLevel dialerRestrictionLevel;
        bool disableAppPinIfDevicePinIsSet;
        bool fingerprintBlocked;
        microsoft::graph::managedBrowserType managedBrowser;
        bool managedBrowserToOpenLinksRequired;
        microsoft::graph::managedAppDeviceThreatLevel maximumAllowedDeviceThreatLevel;
        int maximumPinRetries;
        QString maximumRequiredOsVersion;
        QString maximumWarningOsVersion;
        QString maximumWipeOsVersion;
        int minimumPinLength;
        QString minimumRequiredAppVersion;
        QString minimumRequiredOsVersion;
        QString minimumWarningAppVersion;
        QString minimumWarningOsVersion;
        QString minimumWipeAppVersion;
        QString minimumWipeOsVersion;
        microsoft::graph::managedAppRemediationAction mobileThreatDefenseRemediationAction;
        microsoft::graph::managedAppNotificationRestriction notificationRestriction;
        bool organizationalCredentialsRequired;
        std::chrono::system_clock::duration periodBeforePinReset;
        std::chrono::system_clock::duration periodOfflineBeforeAccessCheck;
        std::chrono::system_clock::duration periodOfflineBeforeWipeIsEnforced;
        std::chrono::system_clock::duration periodOnlineBeforeAccessCheck;
        microsoft::graph::managedAppPinCharacterSet pinCharacterSet;
        bool pinRequired;
        std::chrono::system_clock::duration pinRequiredInsteadOfBiometricTimeout;
        int previousPinBlockCount;
        bool printBlocked;
        bool saveAsBlocked;
        bool simplePinBlocked;
    };

    struct managedAppStatus : graph::entity {
        QString displayName;
        QString version;
    };

    struct managedAppConfiguration : graph::managedAppPolicy {
        QList<microsoft::graph::keyValuePair> customSettings;
    };

    struct windowsInformationProtectionWipeAction : graph::entity {
        QDateTime lastCheckInDateTime;
        microsoft::graph::actionState status;
        QString targetedDeviceMacAddress;
        QString targetedDeviceName;
        QString targetedDeviceRegistrationId;
        QString targetedUserId;
    };

    struct deviceAppManagementTask : graph::entity {
        QString assignedTo;
        microsoft::graph::deviceAppManagementTaskCategory category;
        QDateTime createdDateTime;
        QString creator;
        QString creatorNotes;
        QString description;
        QString displayName;
        QDateTime dueDateTime;
        microsoft::graph::deviceAppManagementTaskPriority priority;
        microsoft::graph::deviceAppManagementTaskStatus status;
    };

    struct deviceManagementCachedReportConfiguration : graph::entity {
        QDateTime expirationDateTime;
        QString filter;
        QDateTime lastRefreshDateTime;
        QString metadata;
        QList<QString> orderBy;
        QString reportName;
        QList<QString> select;
        microsoft::graph::deviceManagementReportStatus status;
    };

    struct deviceManagementExportJob : graph::entity {
        QDateTime expirationDateTime;
        QString filter;
        microsoft::graph::deviceManagementReportFileFormat format;
        microsoft::graph::deviceManagementExportJobLocalizationType localizationType;
        QString reportName;
        QDateTime requestDateTime;
        QList<QString> select;
        QString snapshotId;
        microsoft::graph::deviceManagementReportStatus status;
        QString url;
    };

    struct deviceManagementReportSchedule : graph::entity {
        QList<QString> emails;
        QDateTime endDateTime;
        QString filter;
        microsoft::graph::deviceManagementReportFileFormat format;
        QList<QString> orderBy;
        microsoft::graph::deviceManagementScheduledReportRecurrence recurrence;
        QString reportName;
        QString reportScheduleName;
        QList<QString> select;
        QDateTime startDateTime;
        QString subject;
        QString userId;
    };

    struct iosLobAppProvisioningConfigurationAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct managedDeviceMobileAppConfigurationDeviceStatus : graph::entity {
        QDateTime complianceGracePeriodExpirationDateTime;
        QString deviceDisplayName;
        QString deviceModel;
        QDateTime lastReportedDateTime;
        int platform;
        microsoft::graph::complianceStatus status;
        QString userName;
        QString userPrincipalName;
    };

    struct mobileAppProvisioningConfigGroupAssignment : graph::entity {
        QString targetGroupId;
    };

    struct managedDeviceMobileAppConfigurationUserStatus : graph::entity {
        int devicesCount;
        QDateTime lastReportedDateTime;
        microsoft::graph::complianceStatus status;
        QString userDisplayName;
        QString userPrincipalName;
    };

    struct iosVppAppAssignedLicense : graph::entity {
        QString userEmailAddress;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct iosVppAppAssignedDeviceLicense : graph::iosVppAppAssignedLicense {
        QString deviceName;
        QString managedDeviceId;
    };

    struct iosVppAppAssignedUserLicense : graph::iosVppAppAssignedLicense {
    };

    struct macOsVppAppAssignedLicense : graph::entity {
        QString userEmailAddress;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct managedDeviceMobileAppConfigurationAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct managedDeviceMobileAppConfigurationDeviceSummary : graph::entity {
        int configurationVersion;
        int conflictCount;
        int errorCount;
        int failedCount;
        QDateTime lastUpdateDateTime;
        int notApplicableCount;
        int notApplicablePlatformCount;
        int pendingCount;
        int successCount;
    };

    struct managedDeviceMobileAppConfigurationUserSummary : graph::entity {
        int configurationVersion;
        int conflictCount;
        int errorCount;
        int failedCount;
        QDateTime lastUpdateDateTime;
        int notApplicableCount;
        int pendingCount;
        int successCount;
    };

    struct mobileContainedApp : graph::entity {
    };

    struct microsoftStoreForBusinessContainedApp : graph::mobileContainedApp {
        QString appUserModelId;
    };

    struct mobileAppAssignment : graph::entity {
        microsoft::graph::installIntent intent;
        microsoft::graph::mobileAppAssignmentSettings settings;
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct mobileAppInstallSummary : graph::entity {
        int failedDeviceCount;
        int failedUserCount;
        int installedDeviceCount;
        int installedUserCount;
        int notApplicableDeviceCount;
        int notApplicableUserCount;
        int notInstalledDeviceCount;
        int notInstalledUserCount;
        int pendingInstallDeviceCount;
        int pendingInstallUserCount;
    };

    struct mobileAppRelationship : graph::entity {
        QString targetDisplayName;
        QString targetDisplayVersion;
        QString targetId;
        QString targetPublisher;
        microsoft::graph::mobileAppRelationshipType targetType;
    };

    struct mobileAppContentFile : graph::entity {
        QString azureStorageUri;
        QDateTime azureStorageUriExpirationDateTime;
        QDateTime createdDateTime;
        bool isCommitted;
        bool isDependency;
        bool isFrameworkFile;
        QByteArray manifest;
        QString name;
        long long size;
        long long sizeEncrypted;
        microsoft::graph::mobileAppContentFileUploadState uploadState;
    };

    struct mobileAppDependency : graph::mobileAppRelationship {
        microsoft::graph::mobileAppDependencyType dependencyType;
        int dependentAppCount;
        int dependsOnAppCount;
    };

    struct mobileAppSupersedence : graph::mobileAppRelationship {
        int supersededAppCount;
        microsoft::graph::mobileAppSupersedenceType supersedenceType;
        int supersedingAppCount;
    };

    struct windowsUniversalAppXContainedApp : graph::mobileContainedApp {
        QString appUserModelId;
    };

    struct roleScopeTagInfo {
        QString displayName;
        QString roleScopeTagId;
    };

    struct auditProperty {
        QString displayName;
        QString newValue;
        QString oldValue;
    };

    struct auditResource {
        QString displayName;
        QList<microsoft::graph::auditProperty> modifiedProperties;
        QString resourceId;
        QString type;
    };

    struct deviceInstallState : graph::entity {
        QString deviceId;
        QString deviceName;
        QString errorCode;
        microsoft::graph::installState installState;
        QDateTime lastSyncDateTime;
        QString osDescription;
        QString osVersion;
        QString userName;
    };

    struct eBookInstallSummary : graph::entity {
        int failedDeviceCount;
        int failedUserCount;
        int installedDeviceCount;
        int installedUserCount;
        int notInstalledDeviceCount;
        int notInstalledUserCount;
    };

    struct managedEBookAssignment : graph::entity {
        microsoft::graph::installIntent installIntent;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct iosVppEBookAssignment : graph::managedEBookAssignment {
    };

    struct userInstallStateSummary : graph::entity {
        int failedDeviceCount;
        int installedDeviceCount;
        int notInstalledDeviceCount;
        QString userName;
        QList<microsoft::graph::deviceInstallState> deviceStates;
    };

    struct assignmentFilterTypeAndEvaluationResult {
        microsoft::graph::deviceAndAppManagementAssignmentFilterType assignmentFilterType;
        microsoft::graph::assignmentFilterEvaluationResult evaluationResult;
    };

    struct assignmentFilterState {
        bool enabled;
    };

    struct assignmentFilterSupportedProperty {
        QString dataType;
        bool isCollection;
        QString name;
        QString propertyRegexConstraint;
        QList<microsoft::graph::assignmentFilterOperator> supportedOperators;
        QList<QString> supportedValues;
    };

    struct assignmentFilterValidationResult {
        bool isValidRule;
    };

    struct hasPayloadLinkResultItem {
        QString error;
        bool hasLink;
        QString payloadId;
        QList<microsoft::graph::deviceAndAppManagementAssignmentSource> sources;
    };

    struct deviceCompliancePolicyAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct settingStateDeviceSummary : graph::entity {
        int compliantDeviceCount;
        int conflictDeviceCount;
        int errorDeviceCount;
        QString instancePath;
        int nonCompliantDeviceCount;
        int notApplicableDeviceCount;
        int remediatedDeviceCount;
        QString settingName;
        int unknownDeviceCount;
    };

    struct deviceComplianceDeviceStatus : graph::entity {
        QDateTime complianceGracePeriodExpirationDateTime;
        QString deviceDisplayName;
        QString deviceModel;
        QDateTime lastReportedDateTime;
        int platform;
        microsoft::graph::complianceStatus status;
        QString userName;
        QString userPrincipalName;
    };

    struct deviceComplianceDeviceOverview : graph::entity {
        int configurationVersion;
        int conflictCount;
        int errorCount;
        int failedCount;
        QDateTime lastUpdateDateTime;
        int notApplicableCount;
        int notApplicablePlatformCount;
        int pendingCount;
        int successCount;
    };

    struct deviceComplianceUserStatus : graph::entity {
        int devicesCount;
        QDateTime lastReportedDateTime;
        microsoft::graph::complianceStatus status;
        QString userDisplayName;
        QString userPrincipalName;
    };

    struct deviceComplianceUserOverview : graph::entity {
        int configurationVersion;
        int conflictCount;
        int errorCount;
        int failedCount;
        QDateTime lastUpdateDateTime;
        int notApplicableCount;
        int pendingCount;
        int successCount;
    };

    struct policySetItem : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        microsoft::graph::errorCode errorCode;
        QList<QString> guidedDeploymentTags;
        QString itemType;
        QDateTime lastModifiedDateTime;
        QString payloadId;
        microsoft::graph::policySetStatus status;
    };

    struct deviceCompliancePolicyPolicySetItem : graph::policySetItem {
    };

    struct deviceManagementApplicabilityRuleDeviceMode {
        microsoft::graph::windows10DeviceModeType deviceMode;
        QString name;
        microsoft::graph::deviceManagementApplicabilityRuleType ruleType;
    };

    struct deviceManagementApplicabilityRuleOsEdition {
        QString name;
        QList<microsoft::graph::windows10EditionType> osEditionTypes;
        microsoft::graph::deviceManagementApplicabilityRuleType ruleType;
    };

    struct deviceManagementApplicabilityRuleOsVersion {
        QString maxOSVersion;
        QString minOSVersion;
        QString name;
        microsoft::graph::deviceManagementApplicabilityRuleType ruleType;
    };

    struct deviceConfigurationAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct deviceConfigurationDeviceStatus : graph::entity {
        QDateTime complianceGracePeriodExpirationDateTime;
        QString deviceDisplayName;
        QString deviceModel;
        QDateTime lastReportedDateTime;
        int platform;
        microsoft::graph::complianceStatus status;
        QString userName;
        QString userPrincipalName;
    };

    struct deviceConfigurationDeviceOverview : graph::entity {
        int configurationVersion;
        int conflictCount;
        int errorCount;
        int failedCount;
        QDateTime lastUpdateDateTime;
        int notApplicableCount;
        int notApplicablePlatformCount;
        int pendingCount;
        int successCount;
    };

    struct deviceConfigurationUserStatus : graph::entity {
        int devicesCount;
        QDateTime lastReportedDateTime;
        microsoft::graph::complianceStatus status;
        QString userDisplayName;
        QString userPrincipalName;
    };

    struct deviceConfigurationUserOverview : graph::entity {
        int configurationVersion;
        int conflictCount;
        int errorCount;
        int failedCount;
        QDateTime lastUpdateDateTime;
        int notApplicableCount;
        int pendingCount;
        int successCount;
    };

    struct deviceConfigurationPolicySetItem : graph::policySetItem {
    };

    struct enrollmentConfigurationAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct deviceManagementConfigurationPolicyPolicySetItem : graph::policySetItem {
    };

    struct deviceManagementScriptAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct deviceManagementScriptGroupAssignment : graph::entity {
        QString targetGroupId;
    };

    struct deviceManagementScriptRunSummary : graph::entity {
        int errorDeviceCount;
        int errorUserCount;
        int successDeviceCount;
        int successUserCount;
    };

    struct deviceManagementScriptPolicySetItem : graph::policySetItem {
    };

    struct enrollmentRestrictionsConfigurationPolicySetItem : graph::policySetItem {
        int limit;
        int priority;
    };

    struct iosLobAppProvisioningConfigurationPolicySetItem : graph::policySetItem {
    };

    struct managedAppProtectionPolicySetItem : graph::policySetItem {
        QString targetedAppManagementLevels;
    };

    struct managedDeviceMobileAppConfigurationPolicySetItem : graph::policySetItem {
    };

    struct mdmWindowsInformationProtectionPolicyPolicySetItem : graph::policySetItem {
    };

    struct mobileAppPolicySetItem : graph::policySetItem {
        microsoft::graph::installIntent intent;
        microsoft::graph::mobileAppAssignmentSettings settings;
    };

    struct payloadCompatibleAssignmentFilter : graph::deviceAndAppManagementAssignmentFilter {
        microsoft::graph::assignmentFilterPayloadType payloadType;
    };

    struct policySetAssignment : graph::entity {
        QDateTime lastModifiedDateTime;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct targetedManagedAppPolicyAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct targetedManagedAppConfigurationPolicySetItem : graph::policySetItem {
    };

    struct windows10EnrollmentCompletionPageConfigurationPolicySetItem : graph::policySetItem {
        int priority;
    };

    struct windowsEnrollmentStatusScreenSettings {
        bool allowDeviceUseBeforeProfileAndAppInstallComplete;
        bool allowDeviceUseOnInstallFailure;
        bool allowLogCollectionOnInstallFailure;
        bool blockDeviceSetupRetryByUser;
        QString customErrorMessage;
        bool hideInstallationProgress;
        int installProgressTimeoutInMinutes;
    };

    struct outOfBoxExperienceSettings {
        microsoft::graph::windowsDeviceUsageType deviceUsageType;
        bool hideEscapeLink;
        bool hideEULA;
        bool hidePrivacySettings;
        bool skipKeyboardSelectionPage;
        microsoft::graph::windowsUserType userType;
    };

    struct windowsAutopilotDeploymentProfileAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct windowsAutopilotDeploymentProfilePolicySetItem : graph::policySetItem {
    };

    struct officeClientCheckinStatus {
        QList<QString> appliedPolicies;
        QDateTime checkinDateTime;
        QString deviceName;
        QString devicePlatform;
        QString devicePlatformVersion;
        QString errorMessage;
        QString userId;
        QString userPrincipalName;
        bool wasSuccessful;
    };

    struct officeConfigurationAssignmentTarget {
    };

    struct officeConfigurationGroupAssignmentTarget : graph::officeConfigurationAssignmentTarget {
        QString groupId;
    };

    struct officeUserCheckinSummary {
        int failedUserCount;
        int succeededUserCount;
    };

    struct officeClientConfigurationAssignment : graph::entity {
        microsoft::graph::officeConfigurationAssignmentTarget target;
    };

    struct termsAndConditionsAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct airPrintDestination {
        bool forceTls;
        QString ipAddress;
        int port;
        QString resourcePath;
    };

    struct androidDeviceOwnerGlobalProxy {
    };

    struct androidDeviceOwnerGlobalProxyAutoConfig : graph::androidDeviceOwnerGlobalProxy {
        QString proxyAutoConfigURL;
    };

    struct androidDeviceOwnerGlobalProxyDirect : graph::androidDeviceOwnerGlobalProxy {
        QList<QString> excludedHosts;
        QString host;
        int port;
    };

    struct androidDeviceOwnerKioskModeHomeScreenItem {
    };

    struct androidDeviceOwnerKioskModeFolderItem : graph::androidDeviceOwnerKioskModeHomeScreenItem {
    };

    struct androidDeviceOwnerKioskModeApp : graph::androidDeviceOwnerKioskModeFolderItem {
        QString className;
        QString package;
    };

    struct androidDeviceOwnerKioskModeAppPositionItem {
        microsoft::graph::androidDeviceOwnerKioskModeHomeScreenItem item;
        int position;
    };

    struct androidDeviceOwnerKioskModeManagedFolder {
        QString folderIdentifier;
        QString folderName;
        QList<microsoft::graph::androidDeviceOwnerKioskModeFolderItem> items;
    };

    struct androidDeviceOwnerKioskModeManagedFolderReference : graph::androidDeviceOwnerKioskModeHomeScreenItem {
        QString folderIdentifier;
        QString folderName;
    };

    struct androidDeviceOwnerKioskModeWeblink : graph::androidDeviceOwnerKioskModeFolderItem {
        QString label;
        QString link;
    };

    struct appListItem {
        QString appId;
        QString appStoreUrl;
        QString name;
        QString publisher;
    };

    struct appleAppListItem : graph::appListItem {
    };

    struct specifiedCaptiveNetworkPlugins {
        QList<QString> allowedBundleIdentifiers;
    };

    struct bitLockerRecoveryOptions {
        bool blockDataRecoveryAgent;
        bool enableBitLockerAfterRecoveryInformationToStore;
        bool enableRecoveryInformationSaveToStore;
        bool hideRecoveryOptions;
        microsoft::graph::bitLockerRecoveryInformationType recoveryInformationToStore;
        microsoft::graph::configurationUsage recoveryKeyUsage;
        microsoft::graph::configurationUsage recoveryPasswordUsage;
    };

    struct bitLockerRemovableDrivePolicy {
        bool blockCrossOrganizationWriteAccess;
        microsoft::graph::bitLockerEncryptionMethod encryptionMethod;
        bool requireEncryptionForWriteAccess;
    };

    struct bitLockerSystemDrivePolicy {
        microsoft::graph::bitLockerEncryptionMethod encryptionMethod;
        int minimumPinLength;
        bool prebootRecoveryEnableMessageAndUrl;
        QString prebootRecoveryMessage;
        QString prebootRecoveryUrl;
        microsoft::graph::bitLockerRecoveryOptions recoveryOptions;
        bool startupAuthenticationBlockWithoutTpmChip;
        bool startupAuthenticationRequired;
        microsoft::graph::configurationUsage startupAuthenticationTpmKeyUsage;
        microsoft::graph::configurationUsage startupAuthenticationTpmPinAndKeyUsage;
        microsoft::graph::configurationUsage startupAuthenticationTpmPinUsage;
        microsoft::graph::configurationUsage startupAuthenticationTpmUsage;
    };

    struct singleSignOnExtension {
    };

    struct keyTypedValuePair {
        QString key;
    };

    struct cryptographySuite {
        microsoft::graph::authenticationTransformConstant authenticationTransformConstants;
        microsoft::graph::vpnEncryptionAlgorithmType cipherTransformConstants;
        microsoft::graph::diffieHellmanGroup dhGroup;
        microsoft::graph::vpnEncryptionAlgorithmType encryptionMethod;
        microsoft::graph::vpnIntegrityAlgorithmType integrityCheckMethod;
        microsoft::graph::perfectForwardSecrecyGroup pfsGroup;
    };

    struct customSubjectAlternativeName {
        QString name;
        microsoft::graph::subjectAlternativeNameType sanType;
    };

    struct customUpdateTimeWindow {
        microsoft::graph::dayOfWeek endDay;
        QTime endTime;
        microsoft::graph::dayOfWeek startDay;
        QTime startTime;
    };

    struct defenderDetectedMalwareActions {
        microsoft::graph::defenderThreatAction highSeverity;
        microsoft::graph::defenderThreatAction lowSeverity;
        microsoft::graph::defenderThreatAction moderateSeverity;
        microsoft::graph::defenderThreatAction severeSeverity;
    };

    struct deliveryOptimizationBandwidth {
    };

    struct deliveryOptimizationBandwidthAbsolute : graph::deliveryOptimizationBandwidth {
        long long maximumDownloadBandwidthInKilobytesPerSecond;
        long long maximumUploadBandwidthInKilobytesPerSecond;
    };

    struct deliveryOptimizationBandwidthBusinessHoursLimit {
        int bandwidthBeginBusinessHours;
        int bandwidthEndBusinessHours;
        int bandwidthPercentageDuringBusinessHours;
        int bandwidthPercentageOutsideBusinessHours;
    };

    struct deliveryOptimizationBandwidthHoursWithPercentage : graph::deliveryOptimizationBandwidth {
        microsoft::graph::deliveryOptimizationBandwidthBusinessHoursLimit bandwidthBackgroundPercentageHours;
        microsoft::graph::deliveryOptimizationBandwidthBusinessHoursLimit bandwidthForegroundPercentageHours;
    };

    struct deliveryOptimizationBandwidthPercentage : graph::deliveryOptimizationBandwidth {
        int maximumBackgroundBandwidthPercentage;
        int maximumForegroundBandwidthPercentage;
    };

    struct deliveryOptimizationGroupIdSource {
    };

    struct deliveryOptimizationGroupIdCustom : graph::deliveryOptimizationGroupIdSource {
        QString groupIdCustom;
    };

    struct deliveryOptimizationGroupIdSourceOptions : graph::deliveryOptimizationGroupIdSource {
        microsoft::graph::deliveryOptimizationGroupIdOptionsType groupIdSourceOption;
    };

    struct deliveryOptimizationMaxCacheSize {
    };

    struct deliveryOptimizationMaxCacheSizeAbsolute : graph::deliveryOptimizationMaxCacheSize {
        long long maximumCacheSizeInGigabytes;
    };

    struct deliveryOptimizationMaxCacheSizePercentage : graph::deliveryOptimizationMaxCacheSize {
        int maximumCacheSizePercentage;
    };

    struct deviceCompliancePolicyScript {
        QString deviceComplianceScriptId;
        QByteArray rulesContent;
    };

    struct settingSource {
        QString displayName;
        QString id;
        microsoft::graph::settingSourceType sourceType;
    };

    struct deviceComplianceScriptError {
        microsoft::graph::code code;
        microsoft::graph::deviceComplianceScriptRulesValidationError deviceComplianceScriptRulesValidationError;
        QString message;
    };

    struct deviceComplianceScriptRule {
        microsoft::graph::dataType dataType;
        microsoft::graph::deviceComplianceScriptRuleDataType deviceComplianceScriptRuleDataType;
        microsoft::graph::deviceComplianceScriptRulOperator deviceComplianceScriptRulOperator;
        QString operand;
        microsoft::graph::_operator _operator;
        QString settingName;
    };

    struct deviceComplianceScriptRuleError : graph::deviceComplianceScriptError {
        QString settingName;
    };

    struct deviceComplianceScriptValidationResult {
        QList<microsoft::graph::deviceComplianceScriptRuleError> ruleErrors;
        QList<microsoft::graph::deviceComplianceScriptRule> rules;
        QList<microsoft::graph::deviceComplianceScriptError> scriptErrors;
    };

    struct deviceConfigurationSettingState {
        QString currentValue;
        long long errorCode;
        QString errorDescription;
        QString instanceDisplayName;
        QString setting;
        QString settingInstanceId;
        QString settingName;
        QList<microsoft::graph::settingSource> sources;
        microsoft::graph::complianceStatus state;
        QString userEmail;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct deviceConfigurationTargetedUserAndDevice {
        QString deviceId;
        QString deviceName;
        QDateTime lastCheckinDateTime;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct deviceManagementUserRightsLocalUserOrGroup {
        QString description;
        QString name;
        QString securityIdentifier;
    };

    struct deviceManagementUserRightsSetting {
        QList<microsoft::graph::deviceManagementUserRightsLocalUserOrGroup> localUsersOrGroups;
        microsoft::graph::stateManagementSetting state;
    };

    struct edgeHomeButtonConfiguration {
    };

    struct edgeHomeButtonHidden : graph::edgeHomeButtonConfiguration {
    };

    struct edgeHomeButtonLoadsStartPage : graph::edgeHomeButtonConfiguration {
    };

    struct edgeHomeButtonOpensCustomURL : graph::edgeHomeButtonConfiguration {
        QString homeButtonCustomURL;
    };

    struct edgeHomeButtonOpensNewTab : graph::edgeHomeButtonConfiguration {
    };

    struct edgeSearchEngineBase {
    };

    struct edgeSearchEngine : graph::edgeSearchEngineBase {
        microsoft::graph::edgeSearchEngineType edgeSearchEngineType;
    };

    struct edgeSearchEngineCustom : graph::edgeSearchEngineBase {
        QString edgeSearchEngineOpenSearchXmlUrl;
    };

    struct encryptionReportPolicyDetails {
        QString policyId;
        QString policyName;
    };

    struct extendedKeyUsage {
        QString name;
        QString objectIdentifier;
    };

    struct iosSingleSignOnExtension : graph::singleSignOnExtension {
    };

    struct iosAzureAdSingleSignOnExtension : graph::iosSingleSignOnExtension {
        QList<QString> bundleIdAccessControlList;
        QList<microsoft::graph::keyTypedValuePair> configurations;
        bool enableSharedDeviceMode;
    };

    struct iosBookmark {
        QString bookmarkFolder;
        QString displayName;
        QString url;
    };

    struct iosCredentialSingleSignOnExtension : graph::iosSingleSignOnExtension {
        QList<microsoft::graph::keyTypedValuePair> configurations;
        QList<QString> domains;
        QString extensionIdentifier;
        QString realm;
        QString teamIdentifier;
    };

    struct iosEduCertificateSettings {
        QString certFileName;
        QString certificateTemplateName;
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QString certificationAuthority;
        QString certificationAuthorityName;
        int renewalThresholdPercentage;
        QByteArray trustedRootCertificate;
    };

    struct iosHomeScreenItem {
        QString displayName;
    };

    struct iosHomeScreenApp : graph::iosHomeScreenItem {
        QString bundleID;
        bool isWebClip;
    };

    struct iosHomeScreenFolderPage {
        QList<microsoft::graph::iosHomeScreenApp> apps;
        QString displayName;
    };

    struct iosHomeScreenPage {
        QString displayName;
        QList<microsoft::graph::iosHomeScreenItem> icons;
    };

    struct iosKerberosSingleSignOnExtension : graph::iosSingleSignOnExtension {
        QString activeDirectorySiteCode;
        bool blockActiveDirectorySiteAutoDiscovery;
        bool blockAutomaticLogin;
        QString cacheName;
        QList<QString> credentialBundleIdAccessControlList;
        QList<QString> domainRealms;
        QList<QString> domains;
        bool isDefaultRealm;
        bool passwordBlockModification;
        QString passwordChangeUrl;
        bool passwordEnableLocalSync;
        int passwordExpirationDays;
        int passwordExpirationNotificationDays;
        int passwordMinimumAgeDays;
        int passwordMinimumLength;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequireActiveDirectoryComplexity;
        QString passwordRequirementsDescription;
        QString realm;
        bool requireUserPresence;
        QString userPrincipalName;
    };

    struct iosNetworkUsageRule {
        bool cellularDataBlocked;
        bool cellularDataBlockWhenRoaming;
        QList<microsoft::graph::appListItem> managedApps;
    };

    struct iosNotificationSettings {
        microsoft::graph::iosNotificationAlertType alertType;
        QString appName;
        bool badgesEnabled;
        QString bundleID;
        bool enabled;
        microsoft::graph::iosNotificationPreviewVisibility previewVisibility;
        QString publisher;
        bool showInNotificationCenter;
        bool showOnLockScreen;
        bool soundsEnabled;
    };

    struct iosRedirectSingleSignOnExtension : graph::iosSingleSignOnExtension {
        QList<microsoft::graph::keyTypedValuePair> configurations;
        QString extensionIdentifier;
        QString teamIdentifier;
        QList<QString> urlPrefixes;
    };

    struct iosSingleSignOnSettings {
        QList<microsoft::graph::appListItem> allowedAppsList;
        QList<QString> allowedUrls;
        QString displayName;
        QString kerberosPrincipalName;
        QString kerberosRealm;
    };

    struct iosVpnSecurityAssociationParameters {
        int lifetimeInMinutes;
        int securityDiffieHellmanGroup;
        microsoft::graph::vpnEncryptionAlgorithmType securityEncryptionAlgorithm;
        microsoft::graph::vpnIntegrityAlgorithmType securityIntegrityAlgorithm;
    };

    struct iosWebContentFilterBase {
    };

    struct iosWebContentFilterAutoFilter : graph::iosWebContentFilterBase {
        QList<QString> allowedUrls;
        QList<QString> blockedUrls;
    };

    struct iosWebContentFilterSpecificWebsitesAccess : graph::iosWebContentFilterBase {
        QList<microsoft::graph::iosBookmark> specificWebsitesOnly;
        QList<microsoft::graph::iosBookmark> websiteList;
    };

    struct iPv4Range : graph::ipRange {
        QString lowerAddress;
        QString upperAddress;
    };

    struct iPv6Range : graph::ipRange {
        QString lowerAddress;
        QString upperAddress;
    };

    struct kerberosSingleSignOnExtension : graph::singleSignOnExtension {
        QString activeDirectorySiteCode;
        bool blockActiveDirectorySiteAutoDiscovery;
        bool blockAutomaticLogin;
        QString cacheName;
        QList<QString> credentialBundleIdAccessControlList;
        QList<QString> domainRealms;
        QList<QString> domains;
        bool isDefaultRealm;
        bool passwordBlockModification;
        QString passwordChangeUrl;
        bool passwordEnableLocalSync;
        int passwordExpirationDays;
        int passwordExpirationNotificationDays;
        int passwordMinimumAgeDays;
        int passwordMinimumLength;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequireActiveDirectoryComplexity;
        QString passwordRequirementsDescription;
        QString realm;
        bool requireUserPresence;
        QString userPrincipalName;
    };

    struct keyBooleanValuePair : graph::keyTypedValuePair {
        bool value;
    };

    struct keyIntegerValuePair : graph::keyTypedValuePair {
        int value;
    };

    struct keyRealValuePair : graph::keyTypedValuePair {
        double value;
    };

    struct keyStringValuePair : graph::keyTypedValuePair {
        QString value;
    };

    struct macOSAppleEventReceiver {
        bool allowed;
        QString codeRequirement;
        QString identifier;
        microsoft::graph::macOSProcessIdentifierType identifierType;
    };

    struct macOSAssociatedDomainsItem {
        QString applicationIdentifier;
        bool directDownloadsEnabled;
        QList<QString> domains;
    };

    struct macOSSingleSignOnExtension : graph::singleSignOnExtension {
    };

    struct macOSAzureAdSingleSignOnExtension : graph::macOSSingleSignOnExtension {
        QList<QString> bundleIdAccessControlList;
        QList<microsoft::graph::keyTypedValuePair> configurations;
        bool enableSharedDeviceMode;
    };

    struct macOSCredentialSingleSignOnExtension : graph::macOSSingleSignOnExtension {
        QList<microsoft::graph::keyTypedValuePair> configurations;
        QList<QString> domains;
        QString extensionIdentifier;
        QString realm;
        QString teamIdentifier;
    };

    struct macOSFirewallApplication {
        bool allowsIncomingConnections;
        QString bundleId;
    };

    struct macOSKerberosSingleSignOnExtension : graph::macOSSingleSignOnExtension {
        QString activeDirectorySiteCode;
        bool blockActiveDirectorySiteAutoDiscovery;
        bool blockAutomaticLogin;
        QString cacheName;
        QList<QString> credentialBundleIdAccessControlList;
        QList<QString> domainRealms;
        QList<QString> domains;
        bool isDefaultRealm;
        bool passwordBlockModification;
        QString passwordChangeUrl;
        bool passwordEnableLocalSync;
        int passwordExpirationDays;
        int passwordExpirationNotificationDays;
        int passwordMinimumAgeDays;
        int passwordMinimumLength;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequireActiveDirectoryComplexity;
        QString passwordRequirementsDescription;
        QString realm;
        bool requireUserPresence;
        QString userPrincipalName;
    };

    struct macOSKernelExtension {
        QString bundleId;
        QString teamIdentifier;
    };

    struct macOSLaunchItem {
        bool hide;
        QString path;
    };

    struct macOSPrivacyAccessControlItem {
        microsoft::graph::enablement accessibility;
        microsoft::graph::enablement addressBook;
        QList<microsoft::graph::macOSAppleEventReceiver> appleEventsAllowedReceivers;
        bool blockCamera;
        bool blockListenEvent;
        bool blockMicrophone;
        bool blockScreenCapture;
        microsoft::graph::enablement calendar;
        QString codeRequirement;
        QString displayName;
        microsoft::graph::enablement fileProviderPresence;
        QString identifier;
        microsoft::graph::macOSProcessIdentifierType identifierType;
        microsoft::graph::enablement mediaLibrary;
        microsoft::graph::enablement photos;
        microsoft::graph::enablement postEvent;
        microsoft::graph::enablement reminders;
        microsoft::graph::enablement speechRecognition;
        bool staticCodeValidation;
        microsoft::graph::enablement systemPolicyAllFiles;
        microsoft::graph::enablement systemPolicyDesktopFolder;
        microsoft::graph::enablement systemPolicyDocumentsFolder;
        microsoft::graph::enablement systemPolicyDownloadsFolder;
        microsoft::graph::enablement systemPolicyNetworkVolumes;
        microsoft::graph::enablement systemPolicyRemovableVolumes;
        microsoft::graph::enablement systemPolicySystemAdminFiles;
    };

    struct macOSRedirectSingleSignOnExtension : graph::macOSSingleSignOnExtension {
        QList<microsoft::graph::keyTypedValuePair> configurations;
        QString extensionIdentifier;
        QString teamIdentifier;
        QList<QString> urlPrefixes;
    };

    struct macOSSystemExtension {
        QString bundleId;
        QString teamIdentifier;
    };

    struct macOSSystemExtensionTypeMapping {
        microsoft::graph::macOSSystemExtensionType allowedTypes;
        QString teamIdentifier;
    };

    struct managedDeviceMobileAppConfigurationSettingState {
        QString currentValue;
        long long errorCode;
        QString errorDescription;
        QString instanceDisplayName;
        QString setting;
        QString settingInstanceId;
        QString settingName;
        QList<microsoft::graph::settingSource> sources;
        microsoft::graph::complianceStatus state;
        QString userEmail;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct managedDeviceReportedApp {
        QString appId;
    };

    struct mediaContentRatingAustralia {
        microsoft::graph::ratingAustraliaMoviesType movieRating;
        microsoft::graph::ratingAustraliaTelevisionType tvRating;
    };

    struct mediaContentRatingCanada {
        microsoft::graph::ratingCanadaMoviesType movieRating;
        microsoft::graph::ratingCanadaTelevisionType tvRating;
    };

    struct mediaContentRatingFrance {
        microsoft::graph::ratingFranceMoviesType movieRating;
        microsoft::graph::ratingFranceTelevisionType tvRating;
    };

    struct mediaContentRatingGermany {
        microsoft::graph::ratingGermanyMoviesType movieRating;
        microsoft::graph::ratingGermanyTelevisionType tvRating;
    };

    struct mediaContentRatingIreland {
        microsoft::graph::ratingIrelandMoviesType movieRating;
        microsoft::graph::ratingIrelandTelevisionType tvRating;
    };

    struct mediaContentRatingJapan {
        microsoft::graph::ratingJapanMoviesType movieRating;
        microsoft::graph::ratingJapanTelevisionType tvRating;
    };

    struct mediaContentRatingNewZealand {
        microsoft::graph::ratingNewZealandMoviesType movieRating;
        microsoft::graph::ratingNewZealandTelevisionType tvRating;
    };

    struct mediaContentRatingUnitedKingdom {
        microsoft::graph::ratingUnitedKingdomMoviesType movieRating;
        microsoft::graph::ratingUnitedKingdomTelevisionType tvRating;
    };

    struct mediaContentRatingUnitedStates {
        microsoft::graph::ratingUnitedStatesMoviesType movieRating;
        microsoft::graph::ratingUnitedStatesTelevisionType tvRating;
    };

    struct numberRange {
        int lowerNumber;
        int upperNumber;
    };

    struct omaSetting {
        QString description;
        QString displayName;
        bool isEncrypted;
        QString omaUri;
        QString secretReferenceValueId;
    };

    struct omaSettingBase64 : graph::omaSetting {
        QString fileName;
        QString value;
    };

    struct omaSettingBoolean : graph::omaSetting {
        bool value;
    };

    struct omaSettingDateTime : graph::omaSetting {
        QDateTime value;
    };

    struct omaSettingFloatingPoint : graph::omaSetting {
        float value;
    };

    struct omaSettingInteger : graph::omaSetting {
        bool isReadOnly;
        int value;
    };

    struct omaSettingString : graph::omaSetting {
        QString value;
    };

    struct omaSettingStringXml : graph::omaSetting {
        QString fileName;
        QByteArray value;
    };

    struct operatingSystemVersionRange {
        QString description;
        QString highestVersion;
        QString lowestVersion;
    };

    struct proxiedDomain {
        QString ipAddressOrFQDN;
        QString proxy;
    };

    struct redirectSingleSignOnExtension : graph::singleSignOnExtension {
        QList<microsoft::graph::keyTypedValuePair> configurations;
        QString extensionIdentifier;
        QString teamIdentifier;
        QList<QString> urlPrefixes;
    };

    struct report {
        QByteArray content;
    };

    struct retireScheduledManagedDevice {
        microsoft::graph::complianceStatus complianceState;
        QString deviceCompliancePolicyId;
        QString deviceCompliancePolicyName;
        microsoft::graph::deviceType deviceType;
        QString id;
        QString managedDeviceId;
        QString managedDeviceName;
        microsoft::graph::managementAgentType managementAgent;
        microsoft::graph::managedDeviceOwnerType ownerType;
        QDateTime retireAfterDateTime;
        QList<QString> roleScopeTagIds;
    };

    struct sharedPCAccountManagerPolicy {
        microsoft::graph::sharedPCAccountDeletionPolicyType accountDeletionPolicy;
        int cacheAccountsAboveDiskFreePercentage;
        int inactiveThresholdDays;
        int removeAccountsBelowDiskFreePercentage;
    };

    struct unsupportedDeviceConfigurationDetail {
        QString message;
        QString propertyName;
    };

    struct vpnDnsRule {
        bool autoTrigger;
        QString name;
        bool persistent;
        QString proxyServerUri;
        QList<QString> servers;
    };

    struct vpnOnDemandRule {
        microsoft::graph::vpnOnDemandRuleConnectionAction action;
        QList<QString> dnsSearchDomains;
        microsoft::graph::vpnOnDemandRuleConnectionDomainAction domainAction;
        QList<QString> domains;
        QString probeRequiredUrl;
        QString probeUrl;
        QList<QString> ssids;
    };

    struct vpnProxyServer {
        QString address;
        QString automaticConfigurationScriptUrl;
        int port;
    };

    struct vpnRoute {
        QString destinationPrefix;
        int prefixSize;
    };

    struct vpnServer {
        QString address;
        QString description;
        bool isDefaultServer;
    };

    struct vpnTrafficRule {
        QString appId;
        microsoft::graph::vpnTrafficRuleAppType appType;
        QString claims;
        QList<microsoft::graph::iPv4Range> localAddressRanges;
        QList<microsoft::graph::numberRange> localPortRanges;
        QString name;
        int protocols;
        QList<microsoft::graph::iPv4Range> remoteAddressRanges;
        QList<microsoft::graph::numberRange> remotePortRanges;
        microsoft::graph::vpnTrafficRuleRoutingPolicyType routingPolicyType;
    };

    struct windows10AppsForceUpdateSchedule {
        microsoft::graph::windows10AppsUpdateRecurrence recurrence;
        bool runImmediatelyIfAfterStartDateTime;
        QDateTime startDateTime;
    };

    struct windows10AssociatedApps {
        microsoft::graph::windows10AppType appType;
        QString identifier;
    };

    struct windows10NetworkProxyServer {
        QString address;
        QList<QString> exceptions;
        bool useForLocalAddresses;
    };

    struct windows10VpnProxyServer : graph::vpnProxyServer {
        bool bypassProxyServerForLocalAddress;
    };

    struct windows81VpnProxyServer : graph::vpnProxyServer {
        bool automaticallyDetectProxySettings;
        bool bypassProxyServerForLocalAddress;
    };

    struct windowsFirewallNetworkProfile {
        bool authorizedApplicationRulesFromGroupPolicyMerged;
        bool authorizedApplicationRulesFromGroupPolicyNotMerged;
        bool connectionSecurityRulesFromGroupPolicyMerged;
        bool connectionSecurityRulesFromGroupPolicyNotMerged;
        microsoft::graph::stateManagementSetting firewallEnabled;
        bool globalPortRulesFromGroupPolicyMerged;
        bool globalPortRulesFromGroupPolicyNotMerged;
        bool inboundConnectionsBlocked;
        bool inboundConnectionsRequired;
        bool inboundNotificationsBlocked;
        bool inboundNotificationsRequired;
        bool incomingTrafficBlocked;
        bool incomingTrafficRequired;
        bool outboundConnectionsBlocked;
        bool outboundConnectionsRequired;
        bool policyRulesFromGroupPolicyMerged;
        bool policyRulesFromGroupPolicyNotMerged;
        bool securedPacketExemptionAllowed;
        bool securedPacketExemptionBlocked;
        bool stealthModeBlocked;
        bool stealthModeRequired;
        bool unicastResponsesToMulticastBroadcastsBlocked;
        bool unicastResponsesToMulticastBroadcastsRequired;
    };

    struct windowsFirewallRule {
        microsoft::graph::stateManagementSetting action;
        QString description;
        QString displayName;
        microsoft::graph::stateManagementSetting edgeTraversal;
        QString filePath;
        microsoft::graph::windowsFirewallRuleInterfaceTypes interfaceTypes;
        QList<QString> localAddressRanges;
        QList<QString> localPortRanges;
        QString localUserAuthorizations;
        QString packageFamilyName;
        microsoft::graph::windowsFirewallRuleNetworkProfileTypes profileTypes;
        int protocol;
        QList<QString> remoteAddressRanges;
        QList<QString> remotePortRanges;
        QString serviceName;
        microsoft::graph::windowsFirewallRuleTrafficDirectionType trafficDirection;
    };

    struct windowsKioskUser {
    };

    struct windowsKioskActiveDirectoryGroup : graph::windowsKioskUser {
        QString groupName;
    };

    struct windowsKioskAppBase {
        microsoft::graph::windowsKioskAppType appType;
        bool autoLaunch;
        QString name;
        microsoft::graph::windowsAppStartLayoutTileSize startLayoutTileSize;
    };

    struct windowsKioskAppConfiguration {
    };

    struct windowsKioskAutologon : graph::windowsKioskUser {
    };

    struct windowsKioskAzureADGroup : graph::windowsKioskUser {
        QString displayName;
        QString groupId;
    };

    struct windowsKioskAzureADUser : graph::windowsKioskUser {
        QString userId;
        QString userPrincipalName;
    };

    struct windowsKioskDesktopApp : graph::windowsKioskAppBase {
        QString desktopApplicationId;
        QString desktopApplicationLinkPath;
        QString path;
    };

    struct windowsKioskForceUpdateSchedule {
        int dayofMonth;
        microsoft::graph::dayOfWeek dayofWeek;
        microsoft::graph::windows10AppsUpdateRecurrence recurrence;
        bool runImmediatelyIfAfterStartDateTime;
        QDateTime startDateTime;
    };

    struct windowsKioskLocalGroup : graph::windowsKioskUser {
        QString groupName;
    };

    struct windowsKioskLocalUser : graph::windowsKioskUser {
        QString userName;
    };

    struct windowsKioskMultipleApps : graph::windowsKioskAppConfiguration {
        bool allowAccessToDownloadsFolder;
        QList<microsoft::graph::windowsKioskAppBase> apps;
        bool disallowDesktopApps;
        bool showTaskBar;
        QByteArray startMenuLayoutXml;
    };

    struct windowsKioskProfile {
        microsoft::graph::windowsKioskAppConfiguration appConfiguration;
        QString profileId;
        QString profileName;
        QList<microsoft::graph::windowsKioskUser> userAccountsConfiguration;
    };

    struct windowsKioskUWPApp : graph::windowsKioskAppBase {
        QString appId;
        QString appUserModelId;
        QString containedAppId;
    };

    struct windowsKioskWin32App : graph::windowsKioskAppBase {
        QString classicAppPath;
        QString edgeKiosk;
        int edgeKioskIdleTimeoutMinutes;
        microsoft::graph::windowsEdgeKioskType edgeKioskType;
        bool edgeNoFirstRun;
    };

    struct windowsKioskVisitor : graph::windowsKioskUser {
    };

    struct windowsNetworkIsolationPolicy {
        QList<microsoft::graph::proxiedDomain> enterpriseCloudResources;
        QList<QString> enterpriseInternalProxyServers;
        QList<microsoft::graph::ipRange> enterpriseIPRanges;
        bool enterpriseIPRangesAreAuthoritative;
        QList<QString> enterpriseNetworkDomainNames;
        QList<QString> enterpriseProxyServers;
        bool enterpriseProxyServersAreAuthoritative;
        QList<QString> neutralDomainResources;
    };

    struct windowsUpdateInstallScheduleType {
    };

    struct windowsUpdateActiveHoursInstall : graph::windowsUpdateInstallScheduleType {
        QTime activeHoursEnd;
        QTime activeHoursStart;
    };

    struct windowsUpdateScheduledInstall : graph::windowsUpdateInstallScheduleType {
        microsoft::graph::weeklySchedule scheduledInstallDay;
        QTime scheduledInstallTime;
    };

    struct advancedThreatProtectionOnboardingDeviceSettingState : graph::entity {
        QDateTime complianceGracePeriodExpirationDateTime;
        QString deviceId;
        QString deviceModel;
        QString deviceName;
        microsoft::graph::deviceType platformType;
        QString setting;
        QString settingName;
        microsoft::graph::complianceStatus state;
        QString userEmail;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct androidDeviceComplianceLocalActionBase : graph::entity {
        int gracePeriodInMinutes;
    };

    struct androidDeviceComplianceLocalActionLockDevice : graph::androidDeviceComplianceLocalActionBase {
    };

    struct androidDeviceComplianceLocalActionLockDeviceWithPasscode : graph::androidDeviceComplianceLocalActionBase {
        QString passcode;
        int passcodeSignInFailureCountBeforeWipe;
    };

    struct managedDeviceCertificateState : graph::entity {
        QString certificateEnhancedKeyUsage;
        int certificateErrorCode;
        QDateTime certificateExpirationDateTime;
        QDateTime certificateIssuanceDateTime;
        microsoft::graph::certificateIssuanceStates certificateIssuanceState;
        QString certificateIssuer;
        int certificateKeyLength;
        microsoft::graph::keyStorageProviderOption certificateKeyStorageProvider;
        microsoft::graph::keyUsages certificateKeyUsage;
        QDateTime certificateLastIssuanceStateChangedDateTime;
        QString certificateProfileDisplayName;
        microsoft::graph::certificateRevocationStatus certificateRevokeStatus;
        QString certificateSerialNumber;
        microsoft::graph::subjectAlternativeNameType certificateSubjectAlternativeNameFormat;
        QString certificateSubjectAlternativeNameFormatString;
        microsoft::graph::subjectNameFormat certificateSubjectNameFormat;
        QString certificateSubjectNameFormatString;
        QString certificateThumbprint;
        int certificateValidityPeriod;
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodUnits;
        QString deviceDisplayName;
        microsoft::graph::devicePlatformType devicePlatform;
        QDateTime lastCertificateStateChangeDateTime;
        QString userDisplayName;
    };

    struct deviceComplianceActionItem : graph::entity {
        microsoft::graph::deviceComplianceActionType actionType;
        int gracePeriodHours;
        QList<QString> notificationMessageCCList;
        QString notificationTemplateId;
    };

    struct deviceComplianceSettingState : graph::entity {
        QDateTime complianceGracePeriodExpirationDateTime;
        QString deviceId;
        QString deviceModel;
        QString deviceName;
        microsoft::graph::deviceType platformType;
        QString setting;
        QString settingName;
        microsoft::graph::complianceStatus state;
        QString userEmail;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct deviceSetupConfiguration : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        int version;
    };

    struct macOSSoftwareUpdateStateSummary : graph::entity {
        QString displayName;
        QDateTime lastUpdatedDateTime;
        QString productKey;
        microsoft::graph::macOSSoftwareUpdateState state;
        microsoft::graph::macOSSoftwareUpdateCategory updateCategory;
        QString updateVersion;
    };

    struct windowsPrivacyDataAccessControlItem : graph::entity {
        microsoft::graph::windowsPrivacyDataAccessLevel accessLevel;
        QString appDisplayName;
        QString appPackageFamilyName;
        microsoft::graph::windowsPrivacyDataCategory dataCategory;
    };

    struct windowsAssignedAccessProfile : graph::entity {
        QList<QString> appUserModelIds;
        QList<QString> desktopAppPaths;
        QString profileName;
        bool showTaskBar;
        QByteArray startMenuLayoutXml;
        QList<QString> userAccounts;
    };

    struct windowsUpdateState : graph::entity {
        QString deviceDisplayName;
        QString deviceId;
        QString featureUpdateVersion;
        QDateTime lastScanDateTime;
        QDateTime lastSyncDateTime;
        QString qualityUpdateVersion;
        microsoft::graph::windowsUpdateStatus status;
        QString userId;
        QString userPrincipalName;
    };

    struct deviceManagementConfigurationSettingInstanceTemplate {
        bool isRequired;
        QString settingDefinitionId;
        QString settingInstanceTemplateId;
    };

    struct deviceManagementConfigurationChoiceSettingValueDefaultTemplate {
    };

    struct deviceManagementConfigurationChoiceSettingValueConstantDefaultTemplate : graph::deviceManagementConfigurationChoiceSettingValueDefaultTemplate {
        QList<microsoft::graph::deviceManagementConfigurationSettingInstanceTemplate> children;
        QString settingDefinitionOptionId;
    };

    struct deviceManagementConfigurationOptionDefinitionTemplate {
        QList<microsoft::graph::deviceManagementConfigurationSettingInstanceTemplate> children;
        QString itemId;
    };

    struct deviceManagementConfigurationDependentOn {
        QString dependentOn;
        QString parentSettingId;
    };

    struct deviceManagementConfigurationSettingApplicability {
        QString description;
        microsoft::graph::deviceManagementConfigurationDeviceMode deviceMode;
        microsoft::graph::deviceManagementConfigurationPlatforms platform;
        microsoft::graph::deviceManagementConfigurationTechnologies technologies;
    };

    struct deviceManagementConfigurationExchangeOnlineSettingApplicability : graph::deviceManagementConfigurationSettingApplicability {
    };

    struct deviceManagementConfigurationGroupSettingValueTemplate {
        QList<microsoft::graph::deviceManagementConfigurationSettingInstanceTemplate> children;
        QString settingValueTemplateId;
    };

    struct deviceManagementConfigurationGroupSettingInstanceTemplate : graph::deviceManagementConfigurationSettingInstanceTemplate {
        microsoft::graph::deviceManagementConfigurationGroupSettingValueTemplate groupSettingValueTemplate;
    };

    struct deviceManagementConfigurationIntegerSettingValueDefaultTemplate {
    };

    struct deviceManagementConfigurationIntegerSettingValueConstantDefaultTemplate : graph::deviceManagementConfigurationIntegerSettingValueDefaultTemplate {
        int constantValue;
    };

    struct deviceManagementConfigurationSettingValueDefinition {
    };

    struct deviceManagementConfigurationIntegerSettingValueDefinition : graph::deviceManagementConfigurationSettingValueDefinition {
        long long maximumValue;
        long long minimumValue;
    };

    struct deviceManagementConfigurationIntegerSettingValueDefinitionTemplate {
        int maxValue;
        int minValue;
    };

    struct deviceManagementConfigurationSimpleSettingValueTemplate {
        QString settingValueTemplateId;
    };

    struct deviceManagementConfigurationIntegerSettingValueTemplate : graph::deviceManagementConfigurationSimpleSettingValueTemplate {
        microsoft::graph::deviceManagementConfigurationIntegerSettingValueDefaultTemplate defaultValue;
        microsoft::graph::deviceManagementConfigurationIntegerSettingValueDefinitionTemplate recommendedValueDefinition;
        microsoft::graph::deviceManagementConfigurationIntegerSettingValueDefinitionTemplate requiredValueDefinition;
    };

    struct deviceManagementConfigurationSettingDependedOnBy {
        QString dependedOnBy;
        bool required;
    };

    struct deviceManagementConfigurationPolicyTemplateReference {
        QString templateDisplayName;
        QString templateDisplayVersion;
        microsoft::graph::deviceManagementConfigurationTemplateFamily templateFamily;
        QString templateId;
    };

    struct deviceManagementConfigurationReferredSettingInformation {
        QString settingDefinitionId;
    };

    struct deviceManagementConfigurationSettingInstanceTemplateReference {
        QString settingInstanceTemplateId;
    };

    struct deviceManagementConfigurationSettingOccurrence {
        int maxDeviceOccurrence;
        int minDeviceOccurrence;
    };

    struct deviceManagementConfigurationSettingValueTemplateReference {
        QString settingValueTemplateId;
        bool useTemplateDefault;
    };

    struct deviceManagementConfigurationSimpleSettingCollectionInstanceTemplate : graph::deviceManagementConfigurationSettingInstanceTemplate {
        bool allowUnmanagedValues;
        QList<microsoft::graph::deviceManagementConfigurationSimpleSettingValueTemplate> simpleSettingCollectionValueTemplate;
    };

    struct deviceManagementConfigurationSimpleSettingInstanceTemplate : graph::deviceManagementConfigurationSettingInstanceTemplate {
        microsoft::graph::deviceManagementConfigurationSimpleSettingValueTemplate simpleSettingValueTemplate;
    };

    struct deviceManagementConfigurationStringSettingValueDefaultTemplate {
    };

    struct deviceManagementConfigurationStringSettingValueConstantDefaultTemplate : graph::deviceManagementConfigurationStringSettingValueDefaultTemplate {
        QString constantValue;
    };

    struct deviceManagementConfigurationStringSettingValueDefinition : graph::deviceManagementConfigurationSettingValueDefinition {
        microsoft::graph::deviceManagementConfigurationStringFormat format;
        QString inputValidationSchema;
        bool isSecret;
        long long maximumLength;
        long long minimumLength;
    };

    struct deviceManagementConfigurationStringSettingValueTemplate : graph::deviceManagementConfigurationSimpleSettingValueTemplate {
        microsoft::graph::deviceManagementConfigurationStringSettingValueDefaultTemplate defaultValue;
    };

    struct deviceManagementConfigurationWindowsSettingApplicability : graph::deviceManagementConfigurationSettingApplicability {
        QString configurationServiceProviderVersion;
        QString maximumSupportedVersion;
        QString minimumSupportedVersion;
        microsoft::graph::deviceManagementConfigurationAzureAdTrustType requiredAzureAdTrustType;
        bool requiresAzureAd;
        QList<microsoft::graph::deviceManagementConfigurationWindowsSkus> windowsSkus;
    };

    struct deviceManagementConfigurationPolicyAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentSource source;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct companyPortalBlockedAction {
        microsoft::graph::companyPortalAction action;
        microsoft::graph::ownerType ownerType;
        microsoft::graph::devicePlatformType platform;
    };

    struct complianceManagementPartnerAssignment {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct deviceAndAppManagementData {
        QByteArray content;
    };

    struct deviceEnrollmentPlatformRestriction {
        QList<QString> blockedManufacturers;
        QList<QString> blockedSkus;
        QString osMaximumVersion;
        QString osMinimumVersion;
        bool personalDeviceEnrollmentBlocked;
        bool platformBlocked;
    };

    struct deviceManagementExchangeDeviceClass {
        QString name;
        microsoft::graph::deviceManagementExchangeAccessRuleType type;
    };

    struct deviceManagementPartnerAssignment {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct rgbColor {
        std::byte b;
        std::byte g;
        std::byte r;
    };

    struct vppTokenActionResult {
        QString actionName;
        microsoft::graph::actionState actionState;
        QDateTime lastUpdatedDateTime;
        QDateTime startDateTime;
    };

    struct vppTokenLicenseSummary {
        QString appleId;
        int availableLicenseCount;
        QString organizationName;
        int usedLicenseCount;
        QString vppTokenId;
    };

    struct vppTokenRevokeLicensesActionResult : graph::vppTokenActionResult {
        microsoft::graph::vppTokenActionFailureReason actionFailureReason;
        int failedLicensesCount;
        int totalLicensesCount;
    };

    struct deviceManagementConstraint {
    };

    struct deviceManagementEnumValue {
        QString displayName;
        QString value;
    };

    struct deviceManagementIntentSettingSecretConstraint : graph::deviceManagementConstraint {
    };

    struct deviceManagementSettingAbstractImplementationConstraint : graph::deviceManagementConstraint {
        QList<QString> allowedAbstractImplementationDefinitionIds;
    };

    struct deviceManagementSettingAppConstraint : graph::deviceManagementConstraint {
        QList<QString> supportedTypes;
    };

    struct deviceManagementSettingBooleanConstraint : graph::deviceManagementConstraint {
        bool value;
    };

    struct deviceManagementSettingCollectionConstraint : graph::deviceManagementConstraint {
        int maximumLength;
        int minimumLength;
    };

    struct deviceManagementSettingComparison {
        microsoft::graph::deviceManagementComparisonResult comparisonResult;
        QString currentValueJson;
        QString definitionId;
        QString displayName;
        QString id;
        QString newValueJson;
    };

    struct deviceManagementSettingDependency {
        QList<microsoft::graph::deviceManagementConstraint> constraints;
        QString definitionId;
    };

    struct deviceManagementSettingEnrollmentTypeConstraint : graph::deviceManagementConstraint {
        QList<QString> enrollmentTypes;
    };

    struct deviceManagementSettingFileConstraint : graph::deviceManagementConstraint {
        QList<QString> supportedExtensions;
    };

    struct deviceManagementSettingIntegerConstraint : graph::deviceManagementConstraint {
        int maximumValue;
        int minimumValue;
    };

    struct deviceManagementSettingProfileConstraint : graph::deviceManagementConstraint {
        QString source;
        QList<QString> types;
    };

    struct deviceManagementSettingRegexConstraint : graph::deviceManagementConstraint {
        QString regex;
    };

    struct deviceManagementSettingRequiredConstraint : graph::deviceManagementConstraint {
        QString notConfiguredValue;
    };

    struct deviceManagementSettingSddlConstraint : graph::deviceManagementConstraint {
    };

    struct deviceManagementSettingStringLengthConstraint : graph::deviceManagementConstraint {
        int maximumLength;
        int minimumLength;
    };

    struct deviceManagementSettingXmlConstraint : graph::deviceManagementConstraint {
    };

    struct securityBaselineContributingPolicy {
        QString displayName;
        QString sourceId;
        microsoft::graph::securityBaselinePolicySourceType sourceType;
    };

    struct deviceManagementSettingInstance : graph::entity {
        QString definitionId;
        QString valueJson;
    };

    struct deviceManagementAbstractComplexSettingInstance : graph::deviceManagementSettingInstance {
        QString implementationId;
        QList<microsoft::graph::deviceManagementSettingInstance> value;
    };

    struct deviceManagementBooleanSettingInstance : graph::deviceManagementSettingInstance {
        bool value;
    };

    struct deviceManagementCollectionSettingInstance : graph::deviceManagementSettingInstance {
        QList<microsoft::graph::deviceManagementSettingInstance> value;
    };

    struct deviceManagementComplexSettingInstance : graph::deviceManagementSettingInstance {
        QList<microsoft::graph::deviceManagementSettingInstance> value;
    };

    struct deviceManagementIntegerSettingInstance : graph::deviceManagementSettingInstance {
        int value;
    };

    struct deviceManagementIntentAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct deviceManagementIntentDeviceSettingStateSummary : graph::entity {
        int compliantCount;
        int conflictCount;
        int errorCount;
        int nonCompliantCount;
        int notApplicableCount;
        int remediatedCount;
        QString settingName;
    };

    struct deviceManagementIntentDeviceState : graph::entity {
        QString deviceDisplayName;
        QString deviceId;
        QDateTime lastReportedDateTime;
        microsoft::graph::complianceStatus state;
        QString userName;
        QString userPrincipalName;
    };

    struct deviceManagementIntentDeviceStateSummary : graph::entity {
        int conflictCount;
        int errorCount;
        int failedCount;
        int notApplicableCount;
        int notApplicablePlatformCount;
        int successCount;
    };

    struct deviceManagementIntentUserState : graph::entity {
        int deviceCount;
        QDateTime lastReportedDateTime;
        microsoft::graph::complianceStatus state;
        QString userName;
        QString userPrincipalName;
    };

    struct deviceManagementIntentUserStateSummary : graph::entity {
        int conflictCount;
        int errorCount;
        int failedCount;
        int notApplicableCount;
        int successCount;
    };

    struct deviceManagementStringSettingInstance : graph::deviceManagementSettingInstance {
        QString value;
    };

    struct securityBaselineStateSummary : graph::entity {
        int conflictCount;
        int errorCount;
        int notApplicableCount;
        int notSecureCount;
        int secureCount;
        int unknownCount;
    };

    struct securityBaselineCategoryStateSummary : graph::securityBaselineStateSummary {
        QString displayName;
    };

    struct securityBaselineDeviceState : graph::entity {
        QString deviceDisplayName;
        QDateTime lastReportedDateTime;
        QString managedDeviceId;
        microsoft::graph::securityBaselineComplianceState state;
        QString userPrincipalName;
    };

    struct securityBaselineSettingState : graph::entity {
        QList<microsoft::graph::securityBaselineContributingPolicy> contributingPolicies;
        QString errorCode;
        QString settingCategoryId;
        QString settingCategoryName;
        QString settingId;
        QString settingName;
        QList<microsoft::graph::settingSource> sourcePolicies;
        microsoft::graph::securityBaselineComplianceState state;
    };

    struct activateDeviceEsimActionResult : graph::deviceActionResult {
        QString carrierUrl;
    };

    struct appLogCollectionDownloadDetails {
        microsoft::graph::appLogDecryptionAlgorithm appLogDecryptionAlgorithm;
        QString decryptionKey;
        QString downloadUrl;
    };

    struct bulkManagedDeviceActionResult {
        QList<QString> failedDeviceIds;
        QList<QString> notFoundDeviceIds;
        QList<QString> notSupportedDeviceIds;
        QList<QString> successfulDeviceIds;
    };

    struct comanagedDevicesSummary {
        int compliancePolicyCount;
        int configurationSettingsCount;
        int endpointProtectionCount;
        int inventoryCount;
        int modernAppsCount;
        int officeAppsCount;
        int resourceAccessCount;
        int totalComanagedCount;
        int windowsUpdateForBusinessCount;
    };

    struct comanagementEligibleDevicesSummary {
        int comanagedCount;
        int eligibleButNotAzureAdJoinedCount;
        int eligibleCount;
        int ineligibleCount;
        int needsOsUpdateCount;
    };

    struct configurationManagerAction {
        microsoft::graph::configurationManagerActionType action;
    };

    struct configurationManagerActionResult : graph::deviceActionResult {
        microsoft::graph::configurationManagerActionDeliveryStatus actionDeliveryStatus;
        int errorCode;
    };

    struct deleteUserFromSharedAppleDeviceActionResult : graph::deviceActionResult {
        QString userPrincipalName;
    };

    struct deviceExchangeAccessStateSummary {
        int allowedDeviceCount;
        int blockedDeviceCount;
        int quarantinedDeviceCount;
        int unavailableDeviceCount;
        int unknownDeviceCount;
    };

    struct deviceGeoLocation {
        double altitude;
        double heading;
        double horizontalAccuracy;
        QDateTime lastCollectedDateTime;
        QDateTime lastCollectedDateTimeUtc;
        double latitude;
        double longitude;
        double speed;
        double verticalAccuracy;
    };

    struct deviceHealthScriptParameter {
        bool applyDefaultValueWhenNotAssigned;
        QString description;
        bool isRequired;
        QString name;
    };

    struct deviceHealthScriptBooleanParameter : graph::deviceHealthScriptParameter {
        bool defaultValue;
    };

    struct deviceHealthScriptRunSchedule {
        int interval;
    };

    struct deviceHealthScriptTimeSchedule : graph::deviceHealthScriptRunSchedule {
        QTime time;
        bool useUtc;
    };

    struct deviceHealthScriptDailySchedule : graph::deviceHealthScriptTimeSchedule {
    };

    struct deviceHealthScriptHourlySchedule : graph::deviceHealthScriptRunSchedule {
    };

    struct deviceHealthScriptIntegerParameter : graph::deviceHealthScriptParameter {
        int defaultValue;
    };

    struct deviceHealthScriptRemediationHistoryData {
        QDate date;
        int noIssueDeviceCount;
        int remediatedDeviceCount;
    };

    struct deviceHealthScriptRemediationSummary {
        int remediatedDeviceCount;
        int scriptCount;
    };

    struct deviceHealthScriptRunOnceSchedule : graph::deviceHealthScriptTimeSchedule {
        QDate date;
    };

    struct deviceHealthScriptStringParameter : graph::deviceHealthScriptParameter {
        QString defaultValue;
    };

    struct deviceLogCollectionRequest {
        QString id;
        microsoft::graph::deviceLogCollectionTemplateType templateType;
    };

    struct deviceOperatingSystemSummary {
        int androidCorporateWorkProfileCount;
        int androidCount;
        int androidDedicatedCount;
        int androidDeviceAdminCount;
        int androidFullyManagedCount;
        int androidWorkProfileCount;
        int aospUserAssociatedCount;
        int aospUserlessCount;
        int chromeOSCount;
        int configMgrDeviceCount;
        int iosCount;
        int linuxCount;
        int macOSCount;
        int unknownCount;
        int windowsCount;
        int windowsMobileCount;
    };

    struct sharedAppleDeviceUser {
        long long dataQuota;
        bool dataToSync;
        long long dataUsed;
        QString userPrincipalName;
    };

    struct userExperienceAnalyticsInsightValue {
    };

    struct insightValueDouble : graph::userExperienceAnalyticsInsightValue {
        double value;
    };

    struct insightValueInt : graph::userExperienceAnalyticsInsightValue {
        int value;
    };

    struct locateDeviceActionResult : graph::deviceActionResult {
        microsoft::graph::deviceGeoLocation deviceLocation;
    };

    struct managedDeviceModelsAndManufacturers {
        QList<QString> deviceManufacturers;
        QList<QString> deviceModels;
    };

    struct osVersionCount {
        int deviceCount;
        QDateTime lastUpdateDateTime;
        QString osVersion;
    };

    struct remoteLockActionResult : graph::deviceActionResult {
        QString unlockPin;
    };

    struct resetPasscodeActionResult : graph::deviceActionResult {
        int errorCode;
        QString passcode;
    };

    struct revokeAppleVppLicensesActionResult : graph::deviceActionResult {
        int failedLicensesCount;
        int totalLicensesCount;
    };

    struct rotateBitLockerKeysDeviceActionResult : graph::deviceActionResult {
        int errorCode;
    };

    struct windowsDeviceAccount {
        QString password;
    };

    struct userExperienceAnalyticsAutopilotDevicesSummary {
        int devicesNotAutopilotRegistered;
        int devicesWithoutAutopilotProfileAssigned;
        int totalWindows10DevicesWithoutTenantAttached;
    };

    struct userExperienceAnalyticsCloudIdentityDevicesSummary {
        int deviceWithoutCloudIdentityCount;
    };

    struct userExperienceAnalyticsCloudManagementDevicesSummary {
        int coManagedDeviceCount;
        int intuneDeviceCount;
        int tenantAttachDeviceCount;
    };

    struct userExperienceAnalyticsInsight {
        QString insightId;
        microsoft::graph::userExperienceAnalyticsInsightSeverity severity;
        QString userExperienceAnalyticsMetricId;
        QList<microsoft::graph::userExperienceAnalyticsInsightValue> values;
    };

    struct userExperienceAnalyticsWindows10DevicesSummary {
        int unsupportedOSversionDeviceCount;
    };

    struct userExperienceAnalyticsWorkFromAnywhereDevicesSummary {
        microsoft::graph::userExperienceAnalyticsAutopilotDevicesSummary autopilotDevicesSummary;
        microsoft::graph::userExperienceAnalyticsCloudIdentityDevicesSummary cloudIdentityDevicesSummary;
        microsoft::graph::userExperienceAnalyticsCloudManagementDevicesSummary cloudManagementDevicesSummary;
        microsoft::graph::userExperienceAnalyticsWindows10DevicesSummary windows10DevicesSummary;
    };

    struct windowsDefenderScanActionResult : graph::deviceActionResult {
        QString scanType;
    };

    struct windowsDeviceADAccount : graph::windowsDeviceAccount {
        QString domainName;
        QString userName;
    };

    struct windowsDeviceAzureADAccount : graph::windowsDeviceAccount {
        QString userPrincipalName;
    };

    struct windowsMalwareCategoryCount {
        int activeMalwareDetectionCount;
        microsoft::graph::windowsMalwareCategory category;
        int deviceCount;
        int distinctActiveMalwareCount;
        QDateTime lastUpdateDateTime;
    };

    struct windowsMalwareExecutionStateCount {
        int deviceCount;
        microsoft::graph::windowsMalwareExecutionState executionState;
        QDateTime lastUpdateDateTime;
    };

    struct windowsMalwareNameCount {
        int deviceCount;
        QDateTime lastUpdateDateTime;
        QString malwareIdentifier;
        QString name;
    };

    struct windowsMalwareSeverityCount {
        int distinctMalwareCount;
        QDateTime lastUpdateDateTime;
        int malwareDetectionCount;
        microsoft::graph::windowsMalwareSeverity severity;
    };

    struct windowsMalwareStateCount {
        int deviceCount;
        int distinctMalwareCount;
        QDateTime lastUpdateDateTime;
        int malwareDetectionCount;
        microsoft::graph::windowsMalwareThreatState state;
    };

    struct appLogCollectionRequest : graph::entity {
        QDateTime completedDateTime;
        QList<QString> customLogFolders;
        QString errorMessage;
        microsoft::graph::appLogUploadState status;
    };

    struct deviceHealthScriptAssignment : graph::entity {
        bool runRemediationScript;
        microsoft::graph::deviceHealthScriptRunSchedule runSchedule;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct deviceComplianceScriptRunSummary : graph::entity {
        int detectionScriptErrorDeviceCount;
        int detectionScriptPendingDeviceCount;
        int issueDetectedDeviceCount;
        QDateTime lastScriptRunDateTime;
        int noIssueDetectedDeviceCount;
    };

    struct deviceHealthScriptRunSummary : graph::entity {
        int detectionScriptErrorDeviceCount;
        int detectionScriptNotApplicableDeviceCount;
        int detectionScriptPendingDeviceCount;
        int issueDetectedDeviceCount;
        int issueRemediatedCumulativeDeviceCount;
        int issueRemediatedDeviceCount;
        int issueReoccurredDeviceCount;
        QDateTime lastScriptRunDateTime;
        int noIssueDetectedDeviceCount;
        int remediationScriptErrorDeviceCount;
        int remediationSkippedDeviceCount;
    };

    struct malwareStateForWindowsDevice : graph::entity {
        int detectionCount;
        QString deviceName;
        microsoft::graph::windowsMalwareExecutionState executionState;
        QDateTime initialDetectionDateTime;
        QDateTime lastStateChangeDateTime;
        microsoft::graph::windowsMalwareThreatState threatState;
    };

    struct userExperienceAnalyticsMetric : graph::entity {
        QString unit;
        double value;
    };

    struct userExperienceAnalyticsWorkFromAnywhereDevice : graph::entity {
        bool autoPilotProfileAssigned;
        bool autoPilotRegistered;
        QString azureAdDeviceId;
        QString azureAdJoinType;
        bool azureAdRegistered;
        double cloudIdentityScore;
        double cloudManagementScore;
        double cloudProvisioningScore;
        bool compliancePolicySetToIntune;
        QString deviceName;
        microsoft::graph::userExperienceAnalyticsHealthState healthStatus;
        QString managedBy;
        QString manufacturer;
        QString model;
        bool osCheckFailed;
        QString osDescription;
        QString osVersion;
        bool otherWorkloadsSetToIntune;
        QString ownership;
        bool processor64BitCheckFailed;
        bool processorCoreCountCheckFailed;
        bool processorFamilyCheckFailed;
        bool processorSpeedCheckFailed;
        bool ramCheckFailed;
        bool secureBootCheckFailed;
        QString serialNumber;
        bool storageCheckFailed;
        bool tenantAttached;
        bool tpmCheckFailed;
        microsoft::graph::operatingSystemUpgradeEligibility upgradeEligibility;
        double windowsScore;
    };

    struct windowsDeviceMalwareState : graph::entity {
        QString additionalInformationUrl;
        microsoft::graph::windowsMalwareCategory category;
        int detectionCount;
        QString displayName;
        microsoft::graph::windowsMalwareExecutionState executionState;
        QDateTime initialDetectionDateTime;
        QDateTime lastStateChangeDateTime;
        microsoft::graph::windowsMalwareSeverity severity;
        microsoft::graph::windowsMalwareState state;
        microsoft::graph::windowsMalwareThreatState threatState;
    };

    struct windowsManagementAppHealthState : graph::entity {
        QString deviceName;
        QString deviceOSVersion;
        microsoft::graph::healthState healthState;
        QString installedVersion;
        QDateTime lastCheckInDateTime;
    };

    struct windowsManagementAppHealthSummary : graph::entity {
        int healthyDeviceCount;
        int unhealthyDeviceCount;
        int unknownDeviceCount;
    };

    struct windows10XCustomSubjectAlternativeName {
        QString name;
        microsoft::graph::subjectAlternativeNameType sanType;
    };

    struct deviceManagementResourceAccessProfileAssignment : graph::entity {
        microsoft::graph::deviceManagementResourceAccessProfileIntent intent;
        QString sourceId;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct appleOwnerTypeEnrollmentType {
        microsoft::graph::appleUserInitiatedEnrollmentType enrollmentType;
        microsoft::graph::managedDeviceOwnerType ownerType;
    };

    struct importedWindowsAutopilotDeviceIdentityState {
        int deviceErrorCode;
        QString deviceErrorName;
        microsoft::graph::importedWindowsAutopilotDeviceIdentityImportStatus deviceImportStatus;
        QString deviceRegistrationId;
    };

    struct managementCertificateWithThumbprint {
        QString certificate;
        QString thumbprint;
    };

    struct suggestedEnrollmentLimit {
        int suggestedDailyLimit;
    };

    struct appleEnrollmentProfileAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct enrollmentProfile : graph::entity {
        QString configurationEndpointUrl;
        QString description;
        QString displayName;
        bool enableAuthenticationViaCompanyPortal;
        bool requireCompanyPortalOnSetupAssistantEnrolledDevices;
        bool requiresUserAuthentication;
    };

    struct depEnrollmentBaseProfile : graph::enrollmentProfile {
        bool appleIdDisabled;
        bool applePayDisabled;
        bool configurationWebUrl;
        QString deviceNameTemplate;
        bool diagnosticsDisabled;
        bool displayToneSetupDisabled;
        bool isDefault;
        bool isMandatory;
        bool locationDisabled;
        bool privacyPaneDisabled;
        bool profileRemovalDisabled;
        bool restoreBlocked;
        bool screenTimeScreenDisabled;
        bool siriDisabled;
        bool supervisedModeEnabled;
        QString supportDepartment;
        QString supportPhoneNumber;
        bool termsAndConditionsDisabled;
        bool touchIdDisabled;
    };

    struct depEnrollmentProfile : graph::enrollmentProfile {
        bool appleIdDisabled;
        bool applePayDisabled;
        bool awaitDeviceConfiguredConfirmation;
        bool diagnosticsDisabled;
        bool enableSharedIPad;
        bool isDefault;
        bool isMandatory;
        microsoft::graph::iTunesPairingMode iTunesPairingMode;
        bool locationDisabled;
        bool macOSFileVaultDisabled;
        bool macOSRegistrationDisabled;
        QList<microsoft::graph::managementCertificateWithThumbprint> managementCertificates;
        bool passCodeDisabled;
        bool profileRemovalDisabled;
        bool restoreBlocked;
        bool restoreFromAndroidDisabled;
        int sharedIPadMaximumUserCount;
        bool siriDisabled;
        bool supervisedModeEnabled;
        QString supportDepartment;
        QString supportPhoneNumber;
        bool termsAndConditionsDisabled;
        bool touchIdDisabled;
        bool zoomDisabled;
    };

    struct depIOSEnrollmentProfile : graph::depEnrollmentBaseProfile {
        bool appearanceScreenDisabled;
        bool awaitDeviceConfiguredConfirmation;
        QString carrierActivationUrl;
        QString companyPortalVppTokenId;
        bool deviceToDeviceMigrationDisabled;
        bool enableSharedIPad;
        bool enableSingleAppEnrollmentMode;
        bool expressLanguageScreenDisabled;
        bool forceTemporarySession;
        bool homeButtonScreenDisabled;
        bool iMessageAndFaceTimeScreenDisabled;
        microsoft::graph::iTunesPairingMode iTunesPairingMode;
        QList<microsoft::graph::managementCertificateWithThumbprint> managementCertificates;
        bool onBoardingScreenDisabled;
        bool passCodeDisabled;
        int passcodeLockGracePeriodInSeconds;
        bool preferredLanguageScreenDisabled;
        bool restoreCompletedScreenDisabled;
        bool restoreFromAndroidDisabled;
        int sharedIPadMaximumUserCount;
        bool simSetupScreenDisabled;
        bool softwareUpdateScreenDisabled;
        int temporarySessionTimeoutInSeconds;
        bool updateCompleteScreenDisabled;
        int userSessionTimeoutInSeconds;
        bool watchMigrationScreenDisabled;
        bool welcomeScreenDisabled;
        bool zoomDisabled;
    };

    struct depMacOSEnrollmentProfile : graph::depEnrollmentBaseProfile {
        bool accessibilityScreenDisabled;
        bool chooseYourLockScreenDisabled;
        bool fileVaultDisabled;
        bool iCloudDiagnosticsDisabled;
        bool iCloudStorageDisabled;
        bool passCodeDisabled;
        bool registrationDisabled;
        bool zoomDisabled;
    };

    struct importedAppleDeviceIdentity : graph::entity {
        QDateTime createdDateTime;
        QString description;
        microsoft::graph::discoverySource discoverySource;
        microsoft::graph::enrollmentState enrollmentState;
        bool isDeleted;
        bool isSupervised;
        QDateTime lastContactedDateTime;
        microsoft::graph::platform platform;
        QDateTime requestedEnrollmentProfileAssignmentDateTime;
        QString requestedEnrollmentProfileId;
        QString serialNumber;
    };

    struct importedAppleDeviceIdentityResult : graph::importedAppleDeviceIdentity {
        bool status;
    };

    struct importedDeviceIdentityResult : graph::importedDeviceIdentity {
        bool status;
    };

    struct managementConditionExpression {
    };

    struct managementConditionExpressionModel : graph::managementConditionExpression {
    };

    struct binaryManagementConditionExpression : graph::managementConditionExpressionModel {
        microsoft::graph::managementConditionExpressionModel firstOperand;
        microsoft::graph::binaryManagementConditionExpressionOperatorType _operator;
        microsoft::graph::managementConditionExpressionModel secondOperand;
    };

    struct managementConditionExpressionString : graph::managementConditionExpression {
        QString value;
    };

    struct unaryManagementConditionExpression : graph::managementConditionExpressionModel {
        microsoft::graph::managementConditionExpressionModel operand;
        microsoft::graph::unaryManagementConditionExpressionOperatorType _operator;
    };

    struct variableManagementConditionExpression : graph::managementConditionExpressionModel {
        QString managementConditionId;
    };

    struct groupPolicySettingMapping : graph::entity {
        QString admxSettingDefinitionId;
        QList<QString> childIdList;
        QString intuneSettingDefinitionId;
        QList<QString> intuneSettingUriList;
        bool isMdmSupported;
        QString mdmCspName;
        int mdmMinimumOSVersion;
        QString mdmSettingUri;
        microsoft::graph::mdmSupportedState mdmSupportedState;
        QString parentId;
        QString settingCategory;
        QString settingDisplayName;
        QString settingDisplayValue;
        QString settingDisplayValueType;
        QString settingName;
        microsoft::graph::groupPolicySettingScope settingScope;
        microsoft::graph::groupPolicySettingType settingType;
        QString settingValue;
        QString settingValueDisplayUnits;
        QString settingValueType;
    };

    struct unsupportedGroupPolicyExtension : graph::entity {
        QString extensionType;
        QString namespaceUrl;
        QString nodeName;
        microsoft::graph::groupPolicySettingScope settingScope;
    };

    struct groupPolicyPresentationDropdownListItem {
        QString displayName;
        QString value;
    };

    struct groupPolicyUploadedLanguageFile {
        QByteArray content;
        QString fileName;
        QString id;
        QString languageCode;
        QDateTime lastModifiedDateTime;
    };

    struct groupPolicyConfigurationAssignment : graph::entity {
        QDateTime lastModifiedDateTime;
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct groupPolicyOperation : graph::entity {
        QDateTime lastModifiedDateTime;
        microsoft::graph::groupPolicyOperationStatus operationStatus;
        microsoft::graph::groupPolicyOperationType operationType;
        QString statusDetails;
    };

    struct mobileAppIdentifier {
    };

    struct androidMobileAppIdentifier : graph::mobileAppIdentifier {
        QString packageId;
    };

    struct iosMobileAppIdentifier : graph::mobileAppIdentifier {
        QString bundleId;
    };

    struct macAppIdentifier : graph::mobileAppIdentifier {
        QString bundleId;
    };

    struct managedAppDiagnosticStatus {
        QString mitigationInstruction;
        QString state;
        QString validationName;
    };

    struct managedAppPolicyDeploymentSummaryPerApp {
        int configurationAppliedUserCount;
        microsoft::graph::mobileAppIdentifier mobileAppIdentifier;
    };

    struct windowsAppIdentifier : graph::mobileAppIdentifier {
        QString windowsAppId;
    };

    struct windowsInformationProtectionApp {
        bool denied;
        QString description;
        QString displayName;
        QString productName;
        QString publisherName;
    };

    struct windowsInformationProtectionDataRecoveryCertificate {
        QByteArray certificate;
        QString description;
        QDateTime expirationDateTime;
        QString subjectName;
    };

    struct windowsInformationProtectionDesktopApp : graph::windowsInformationProtectionApp {
        QString binaryName;
        QString binaryVersionHigh;
        QString binaryVersionLow;
    };

    struct windowsInformationProtectionIPRangeCollection {
        QString displayName;
        QList<microsoft::graph::ipRange> ranges;
    };

    struct windowsInformationProtectionProxiedDomainCollection {
        QString displayName;
        QList<microsoft::graph::proxiedDomain> proxiedDomains;
    };

    struct windowsInformationProtectionResourceCollection {
        QString displayName;
        QList<QString> resources;
    };

    struct windowsInformationProtectionStoreApp : graph::windowsInformationProtectionApp {
    };

    struct managedAppOperation : graph::entity {
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString state;
        QString version;
    };

    struct managedAppStatusRaw : graph::managedAppStatus {
        microsoft::graph::Json content;
    };

    struct windowsInformationProtectionAppLockerFile : graph::entity {
        QString displayName;
        QByteArray file;
        QString fileHash;
        QString version;
    };

    struct keyLongValuePair {
        QString name;
        long long value;
    };

    struct metricTimeSeriesDataPoint {
        QDateTime dateTime;
        long long value;
    };

    struct microsoftTunnelServer : graph::entity {
        QString agentImageDigest;
        QString displayName;
        QDateTime lastCheckinDateTime;
        QString serverImageDigest;
        microsoft::graph::microsoftTunnelServerHealthStatus tunnelServerHealthStatus;
    };

    struct localizedNotificationMessage : graph::entity {
        bool isDefault;
        QDateTime lastModifiedDateTime;
        QString locale;
        QString messageTemplate;
        QString subject;
    };

    struct configManagerPolicySummary {
        int compliantDeviceCount;
        int enforcedDeviceCount;
        int failedDeviceCount;
        int nonCompliantDeviceCount;
        int pendingDeviceCount;
        int targetedDeviceCount;
    };

    struct unmanagedDevice {
        QString deviceName;
        QString domain;
        QString ipAddress;
        QString lastLoggedOnUser;
        QDateTime lastSeenDateTime;
        QString location;
        QString macAddress;
        QString manufacturer;
        QString model;
        QString os;
        QString osVersion;
    };

    struct appVulnerabilityManagedDevice : graph::entity {
        QString displayName;
        QDateTime lastSyncDateTime;
        QString managedDeviceId;
    };

    struct appVulnerabilityMobileApp : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString mobileAppId;
        QString mobileAppType;
        QString version;
    };

    struct appVulnerabilityTask : graph::deviceAppManagementTask {
        QString appName;
        QString appPublisher;
        QString appVersion;
        QString insights;
        int managedDeviceCount;
        microsoft::graph::appVulnerabilityTaskMitigationType mitigationType;
        int mobileAppCount;
        QString remediation;
        QList<microsoft::graph::appVulnerabilityManagedDevice> managedDevices;
        QList<microsoft::graph::appVulnerabilityMobileApp> mobileApps;
    };

    struct vulnerableManagedDevice : graph::entity {
        QString displayName;
        QDateTime lastSyncDateTime;
        QString managedDeviceId;
    };

    struct unmanagedDeviceDiscoveryTask : graph::deviceAppManagementTask {
        QList<microsoft::graph::unmanagedDevice> unmanagedDevices;
    };

    struct deviceAndAppManagementAssignedRoleDetails {
        QList<QString> roleAssignmentIds;
        QList<QString> roleDefinitionIds;
    };

    struct resourceAction {
        QList<QString> allowedResourceActions;
        QList<QString> notAllowedResourceActions;
    };

    struct rolePermission {
        QList<QString> actions;
        QList<microsoft::graph::resourceAction> resourceActions;
    };

    struct roleScopeTagAutoAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct embeddedSIMActivationCode {
        QString integratedCircuitCardIdentifier;
        QString matchingIdentifier;
        QString smdpPlusServerAddress;
    };

    struct embeddedSIMActivationCodePoolAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct embeddedSIMDeviceState : graph::entity {
        QDateTime createdDateTime;
        QString deviceName;
        QDateTime lastSyncDateTime;
        QDateTime modifiedDateTime;
        microsoft::graph::embeddedSIMDeviceStateValue state;
        QString stateDetails;
        QString universalIntegratedCircuitCardIdentifier;
        QString userName;
    };

    struct deviceManagementTroubleshootingErrorResource {
        QString link;
        QString text;
    };

    struct managedDeviceSummarizedAppState {
        QString deviceId;
        microsoft::graph::runState summarizedAppState;
    };

    struct mobileAppSupportedDeviceType {
        QString maximumOperatingSystemVersion;
        QString minimumOperatingSystemVersion;
        microsoft::graph::deviceType type;
    };

    struct deviceManagementAutopilotPolicyStatusDetail : graph::entity {
        microsoft::graph::deviceManagementAutopilotPolicyComplianceStatus complianceStatus;
        QString displayName;
        int errorCode;
        QDateTime lastReportedDateTime;
        microsoft::graph::deviceManagementAutopilotPolicyType policyType;
        bool trackedOnEnrollmentStatus;
    };

    struct windowsDefenderApplicationControlSupplementalPolicyAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct windowsDefenderApplicationControlSupplementalPolicyDeploymentSummary : graph::entity {
        int deployedDeviceCount;
        int failedDeviceCount;
    };

    struct expeditedWindowsQualityUpdateSettings {
        int daysUntilForcedReboot;
        QString qualityUpdateRelease;
    };

    struct iosAvailableUpdateVersion {
        QDateTime expirationDateTime;
        QDateTime postingDateTime;
        QString productVersion;
        QList<QString> supportedDevices;
    };

    struct windowsDriverUpdateInventory : graph::entity {
        int applicableDeviceCount;
        microsoft::graph::driverApprovalStatus approvalStatus;
        microsoft::graph::driverCategory category;
        QDateTime deployDateTime;
        QString driverClass;
        QString manufacturer;
        QString name;
        QDateTime releaseDateTime;
        QString version;
    };

    struct windowsDriverUpdateProfileAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct windowsFeatureUpdateCatalogItem : graph::windowsUpdateCatalogItem {
        QString version;
    };

    struct windowsFeatureUpdateProfileAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct windowsQualityUpdateCatalogItem : graph::windowsUpdateCatalogItem {
        microsoft::graph::windowsQualityUpdateClassification classification;
        bool isExpeditable;
        QString kbArticleId;
    };

    struct windowsQualityUpdateProfileAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct intuneBrandingProfileAssignment : graph::entity {
        microsoft::graph::deviceAndAppManagementAssignmentTarget target;
    };

    struct serviceHealthIssuePost {
        QDateTime createdDateTime;
        microsoft::graph::itemBody description;
        microsoft::graph::postType postType;
    };

    struct serviceUpdateMessageViewpoint {
        bool isArchived;
        bool isFavorited;
        bool isRead;
    };

    struct serviceAnnouncementBase : graph::entity {
        QList<microsoft::graph::keyValuePair> details;
        QDateTime endDateTime;
        QDateTime lastModifiedDateTime;
        QDateTime startDateTime;
        QString title;
    };

    struct serviceHealthIssue : graph::serviceAnnouncementBase {
        microsoft::graph::serviceHealthClassificationType classification;
        QString feature;
        QString featureGroup;
        QString impactDescription;
        bool isResolved;
        microsoft::graph::serviceHealthOrigin origin;
        QList<microsoft::graph::serviceHealthIssuePost> posts;
        QString service;
        microsoft::graph::serviceHealthStatus status;
    };

    struct serviceUpdateMessage : graph::serviceAnnouncementBase {
        QDateTime actionRequiredByDateTime;
        microsoft::graph::itemBody body;
        microsoft::graph::serviceUpdateCategory category;
        bool isMajorChange;
        QList<QString> services;
        microsoft::graph::serviceUpdateSeverity severity;
        QList<QString> tags;
        microsoft::graph::serviceUpdateMessageViewpoint viewPoint;
    };

    struct alteredQueryToken {
        int length;
        int offset;
        QString suggestion;
    };

    struct bucketAggregationRange {
        QString from;
        QString to;
    };

    struct resultTemplate {
        microsoft::graph::Json body;
        QString displayName;
    };

    struct Dictionary {
    };

    struct resultTemplateDictionary : graph::Dictionary {
    };

    struct resultTemplateOption {
        bool enableResultTemplate;
    };

    struct searchBucket {
        QString aggregationFilterToken;
        int count;
        QString key;
    };

    struct searchAlterationOptions {
        bool enableModification;
        bool enableSuggestion;
    };

    struct searchHit {
        QString contentSource;
        QString hitId;
        int rank;
        QString resultTemplateId;
        QString summary;
        QString _id;
        int _score;
        QString _summary;
        std::unique_ptr<microsoft::graph::entity> resource;
        std::unique_ptr<microsoft::graph::entity> _source;
    };

    struct searchQueryString {
        QString query;
    };

    struct sortProperty {
        bool isDescending;
        QString name;
    };

    struct dateTimeTimeZoneType {
        QString dateTime;
    };

    struct postalAddressType {
        QString city;
        QString countryLetterCode;
        QString postalCode;
        QString state;
        QString street;
    };

    struct account : graph::entity {
        bool blocked;
        QString category;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString number;
        QString subCategory;
    };

    struct agedAccountsPayable : graph::entity {
        QDate agedAsOfDate;
        double balanceDue;
        QString currencyCode;
        double currentAmount;
        QString name;
        double period1Amount;
        double period2Amount;
        double period3Amount;
        QString periodLengthFilter;
        QString vendorNumber;
    };

    struct agedAccountsReceivable : graph::entity {
        QDate agedAsOfDate;
        double balanceDue;
        QString currencyCode;
        double currentAmount;
        QString customerNumber;
        QString name;
        double period1Amount;
        double period2Amount;
        double period3Amount;
        QString periodLengthFilter;
    };

    struct companyInformation : graph::entity {
        microsoft::graph::postalAddressType address;
        QString currencyCode;
        QDate currentFiscalYearStartDate;
        QString displayName;
        QString email;
        QString faxNumber;
        QString industry;
        QDateTime lastModifiedDateTime;
        QString phoneNumber;
        QByteArray picture;
        QString taxRegistrationNumber;
        QString website;
    };

    struct countryRegion : graph::entity {
        QString addressFormat;
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct currency : graph::entity {
        QString amountDecimalPlaces;
        double amountRoundingPrecision;
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString symbol;
    };

    struct dimensionValue : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct generalLedgerEntry : graph::entity {
        QUuid accountId;
        QString accountNumber;
        double creditAmount;
        double debitAmount;
        QString description;
        QString documentNumber;
        QString documentType;
        QDateTime lastModifiedDateTime;
        QDate postingDate;
        std::unique_ptr<microsoft::graph::account> account;
    };

    struct itemCategory : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct journalLine : graph::entity {
        QUuid accountId;
        QString accountNumber;
        double amount;
        QString comment;
        QString description;
        QString documentNumber;
        QString externalDocumentNumber;
        QString journalDisplayName;
        QDateTime lastModifiedDateTime;
        int lineNumber;
        QDate postingDate;
        std::unique_ptr<microsoft::graph::account> account;
    };

    struct journal : graph::entity {
        QUuid balancingAccountId;
        QString balancingAccountNumber;
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
        std::unique_ptr<microsoft::graph::account> account;
        QList<microsoft::graph::journalLine> journalLines;
    };

    struct paymentMethod : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct paymentTerm : graph::entity {
        bool calculateDiscountOnCreditMemos;
        QString code;
        QString discountDateCalculation;
        double discountPercent;
        QString displayName;
        QString dueDateCalculation;
        QDateTime lastModifiedDateTime;
    };

    struct picture : graph::entity {
        QByteArray content;
        QString contentType;
        int height;
        int width;
    };

    struct shipmentMethod : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
    };

    struct taxArea : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString taxType;
    };

    struct taxGroup : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString taxType;
    };

    struct unitOfMeasure : graph::entity {
        QString code;
        QString displayName;
        QString internationalStandardCode;
        QDateTime lastModifiedDateTime;
    };

    struct vendor : graph::entity {
        microsoft::graph::postalAddressType address;
        double balance;
        QString blocked;
        QString currencyCode;
        QUuid currencyId;
        QString displayName;
        QString email;
        QDateTime lastModifiedDateTime;
        QString number;
        QUuid paymentMethodId;
        QUuid paymentTermsId;
        QString phoneNumber;
        bool taxLiable;
        QString taxRegistrationNumber;
        QString website;
        std::unique_ptr<microsoft::graph::currency> currency;
        std::unique_ptr<microsoft::graph::paymentMethod> paymentMethod;
        std::unique_ptr<microsoft::graph::paymentTerm> paymentTerm;
        QList<microsoft::graph::picture> picture;
    };

    struct visualProperties {
        QString body;
        QString title;
    };

    struct targetPolicyEndpoints {
        QList<QString> platformTypes;
    };

    struct userActivationCounts {
        bool activatedOnSharedComputer;
        long long android;
        long long ios;
        QDate lastActivatedDate;
        long long mac;
        QString productType;
        long long windows;
        long long windows10Mobile;
    };

    struct emailActivitySummary : graph::entity {
        long long read;
        long long receive;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long send;
    };

    struct emailActivityUserDetail : graph::entity {
        QList<QString> assignedProducts;
        QDate deletedDate;
        QString displayName;
        bool isDeleted;
        QDate lastActivityDate;
        long long readCount;
        long long receiveCount;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sendCount;
        QString userPrincipalName;
    };

    struct emailAppUsageAppsUserCounts : graph::entity {
        long long imap4App;
        long long mailForMac;
        long long otherForMobile;
        long long outlookForMac;
        long long outlookForMobile;
        long long outlookForWeb;
        long long outlookForWindows;
        long long pop3App;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long smtpApp;
    };

    struct emailAppUsageUserCounts : graph::entity {
        long long imap4App;
        long long mailForMac;
        long long otherForMobile;
        long long outlookForMac;
        long long outlookForMobile;
        long long outlookForWeb;
        long long outlookForWindows;
        long long pop3App;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long smtpApp;
    };

    struct emailAppUsageUserDetail : graph::entity {
        QDate deletedDate;
        QString displayName;
        QList<QString> imap4App;
        bool isDeleted;
        QDate lastActivityDate;
        QList<QString> mailForMac;
        QList<QString> otherForMobile;
        QList<QString> outlookForMac;
        QList<QString> outlookForMobile;
        QList<QString> outlookForWeb;
        QList<QString> outlookForWindows;
        QList<QString> pop3App;
        QString reportPeriod;
        QDate reportRefreshDate;
        QList<QString> smtpApp;
        QString userPrincipalName;
    };

    struct emailAppUsageVersionsUserCounts : graph::entity {
        long long outlook2007;
        long long outlook2010;
        long long outlook2013;
        long long outlook2016;
        long long outlook2019;
        long long outlookM365;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long undetermined;
    };

    struct mailboxUsageDetail : graph::entity {
        QDate createdDate;
        QDate deletedDate;
        long long deletedItemCount;
        long long deletedItemSizeInBytes;
        QString displayName;
        bool isDeleted;
        long long issueWarningQuotaInBytes;
        long long itemCount;
        QDate lastActivityDate;
        long long prohibitSendQuotaInBytes;
        long long prohibitSendReceiveQuotaInBytes;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long storageUsedInBytes;
        QString userPrincipalName;
    };

    struct mailboxUsageMailboxCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long total;
    };

    struct mailboxUsageQuotaStatusMailboxCounts : graph::entity {
        long long indeterminate;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sendProhibited;
        long long sendReceiveProhibited;
        long long underLimit;
        long long warningIssued;
    };

    struct mailboxUsageStorage : graph::entity {
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long storageUsedInBytes;
    };

    struct office365ActivationCounts : graph::entity {
        long long android;
        long long ios;
        long long mac;
        QString productType;
        QDate reportRefreshDate;
        long long windows;
        long long windows10Mobile;
    };

    struct office365ActivationsUserCounts : graph::entity {
        long long activated;
        long long assigned;
        QString productType;
        QDate reportRefreshDate;
        long long sharedComputerActivation;
    };

    struct office365ActivationsUserDetail : graph::entity {
        QString displayName;
        QDate reportRefreshDate;
        QList<microsoft::graph::userActivationCounts> userActivationCounts;
        QString userPrincipalName;
    };

    struct office365ActiveUserCounts : graph::entity {
        long long exchange;
        long long office365;
        long long oneDrive;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharePoint;
        long long skypeForBusiness;
        long long teams;
        long long yammer;
    };

    struct office365ActiveUserDetail : graph::entity {
        QList<QString> assignedProducts;
        QDate deletedDate;
        QString displayName;
        QDate exchangeLastActivityDate;
        QDate exchangeLicenseAssignDate;
        bool hasExchangeLicense;
        bool hasOneDriveLicense;
        bool hasSharePointLicense;
        bool hasSkypeForBusinessLicense;
        bool hasTeamsLicense;
        bool hasYammerLicense;
        bool isDeleted;
        QDate oneDriveLastActivityDate;
        QDate oneDriveLicenseAssignDate;
        QDate reportRefreshDate;
        QDate sharePointLastActivityDate;
        QDate sharePointLicenseAssignDate;
        QDate skypeForBusinessLastActivityDate;
        QDate skypeForBusinessLicenseAssignDate;
        QDate teamsLastActivityDate;
        QDate teamsLicenseAssignDate;
        QString userPrincipalName;
        QDate yammerLastActivityDate;
        QDate yammerLicenseAssignDate;
    };

    struct office365GroupsActivityCounts : graph::entity {
        long long exchangeEmailsReceived;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long yammerMessagesLiked;
        long long yammerMessagesPosted;
        long long yammerMessagesRead;
    };

    struct office365GroupsActivityDetail : graph::entity {
        long long exchangeMailboxStorageUsedInBytes;
        long long exchangeMailboxTotalItemCount;
        long long exchangeReceivedEmailCount;
        long long externalMemberCount;
        QString groupDisplayName;
        QString groupId;
        QString groupType;
        bool isDeleted;
        QDate lastActivityDate;
        long long memberCount;
        QString ownerPrincipalName;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharePointActiveFileCount;
        long long sharePointSiteStorageUsedInBytes;
        long long sharePointTotalFileCount;
        long long yammerLikedMessageCount;
        long long yammerPostedMessageCount;
        long long yammerReadMessageCount;
    };

    struct office365GroupsActivityFileCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long total;
    };

    struct office365GroupsActivityGroupCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long total;
    };

    struct office365GroupsActivityStorage : graph::entity {
        long long mailboxStorageUsedInBytes;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long siteStorageUsedInBytes;
    };

    struct office365ServicesUserCounts : graph::entity {
        long long exchangeActive;
        long long exchangeInactive;
        long long office365Active;
        long long office365Inactive;
        long long oneDriveActive;
        long long oneDriveInactive;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharePointActive;
        long long sharePointInactive;
        long long skypeForBusinessActive;
        long long skypeForBusinessInactive;
        long long teamsActive;
        long long teamsInactive;
        long long yammerActive;
        long long yammerInactive;
    };

    struct oneDriveActivityUserDetail : graph::entity {
        QList<QString> assignedProducts;
        QDate deletedDate;
        bool isDeleted;
        QDate lastActivityDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharedExternallyFileCount;
        long long sharedInternallyFileCount;
        long long syncedFileCount;
        QString userPrincipalName;
        long long viewedOrEditedFileCount;
    };

    struct oneDriveUsageAccountCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteType;
        long long total;
    };

    struct oneDriveUsageAccountDetail : graph::entity {
        long long activeFileCount;
        long long fileCount;
        bool isDeleted;
        QDate lastActivityDate;
        QString ownerDisplayName;
        QString ownerPrincipalName;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteUrl;
        long long storageAllocatedInBytes;
        long long storageUsedInBytes;
    };

    struct oneDriveUsageFileCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteType;
        long long total;
    };

    struct sharePointActivityPages : graph::entity {
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long visitedPageCount;
    };

    struct sharePointActivityUserCounts : graph::entity {
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharedExternally;
        long long sharedInternally;
        long long synced;
        long long viewedOrEdited;
        long long visitedPage;
    };

    struct sharePointActivityUserDetail : graph::entity {
        QList<QString> assignedProducts;
        QDate deletedDate;
        bool isDeleted;
        QDate lastActivityDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharedExternallyFileCount;
        long long sharedInternallyFileCount;
        long long syncedFileCount;
        QString userPrincipalName;
        long long viewedOrEditedFileCount;
        long long visitedPageCount;
    };

    struct sharePointSiteUsageDetail : graph::entity {
        long long activeFileCount;
        long long anonymousLinkCount;
        long long companyLinkCount;
        bool externalSharing;
        long long fileCount;
        QString geolocation;
        bool isDeleted;
        QDate lastActivityDate;
        QString ownerDisplayName;
        QString ownerPrincipalName;
        long long pageViewCount;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString rootWebTemplate;
        long long secureLinkForGuestCount;
        long long secureLinkForMemberCount;
        QUuid siteId;
        QString siteSensitivityLabelId;
        QString siteUrl;
        long long storageAllocatedInBytes;
        long long storageUsedInBytes;
        QString unmanagedDevicePolicy;
        long long visitedPageCount;
    };

    struct sharePointSiteUsageFileCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteType;
        long long total;
    };

    struct sharePointSiteUsagePages : graph::entity {
        long long pageViewCount;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteType;
    };

    struct sharePointSiteUsageSiteCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteType;
        long long total;
    };

    struct siteActivitySummary : graph::entity {
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long sharedExternally;
        long long sharedInternally;
        long long synced;
        long long viewedOrEdited;
    };

    struct siteUsageStorage : graph::entity {
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QString siteType;
        long long storageUsedInBytes;
    };

    struct skypeForBusinessActivityCounts : graph::entity {
        long long organized;
        long long participated;
        long long peerToPeer;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct skypeForBusinessActivityUserCounts : graph::entity {
        long long organized;
        long long participated;
        long long peerToPeer;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct skypeForBusinessActivityUserDetail : graph::entity {
        QList<QString> assignedProducts;
        QDate deletedDate;
        bool isDeleted;
        QDate lastActivityDate;
        long long organizedConferenceAppSharingCount;
        long long organizedConferenceAudioVideoCount;
        long long organizedConferenceAudioVideoMinutes;
        long long organizedConferenceCloudDialInMicrosoftMinutes;
        long long organizedConferenceCloudDialInOutMicrosoftCount;
        long long organizedConferenceCloudDialOutMicrosoftMinutes;
        long long organizedConferenceDialInOut3rdPartyCount;
        long long organizedConferenceIMCount;
        QDate organizedConferenceLastActivityDate;
        long long organizedConferenceWebCount;
        long long participatedConferenceAppSharingCount;
        long long participatedConferenceAudioVideoCount;
        long long participatedConferenceAudioVideoMinutes;
        long long participatedConferenceDialInOut3rdPartyCount;
        long long participatedConferenceIMCount;
        QDate participatedConferenceLastActivityDate;
        long long participatedConferenceWebCount;
        long long peerToPeerAppSharingCount;
        long long peerToPeerAudioCount;
        long long peerToPeerAudioMinutes;
        long long peerToPeerFileTransferCount;
        long long peerToPeerIMCount;
        QDate peerToPeerLastActivityDate;
        long long peerToPeerVideoCount;
        long long peerToPeerVideoMinutes;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long totalOrganizedConferenceCount;
        long long totalParticipatedConferenceCount;
        long long totalPeerToPeerSessionCount;
        QString userPrincipalName;
    };

    struct skypeForBusinessDeviceUsageDistributionUserCounts : graph::entity {
        int androidPhone;
        int iPad;
        int iPhone;
        QString reportPeriod;
        QDate reportRefreshDate;
        int windows;
        int windowsPhone;
    };

    struct skypeForBusinessDeviceUsageUserCounts : graph::entity {
        int androidPhone;
        int iPad;
        int iPhone;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        int windows;
        int windowsPhone;
    };

    struct skypeForBusinessDeviceUsageUserDetail : graph::entity {
        QDate lastActivityDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        bool usedAndroidPhone;
        bool usediPad;
        bool usediPhone;
        bool usedWindows;
        bool usedWindowsPhone;
        QString userPrincipalName;
    };

    struct skypeForBusinessOrganizerActivityCounts : graph::entity {
        long long appSharing;
        long long audioVideo;
        long long dialInOut3rdParty;
        long long dialInOutMicrosoft;
        long long im;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long web;
    };

    struct skypeForBusinessOrganizerActivityMinuteCounts : graph::entity {
        long long audioVideo;
        long long dialInMicrosoft;
        long long dialOutMicrosoft;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct skypeForBusinessOrganizerActivityUserCounts : graph::entity {
        long long appSharing;
        long long audioVideo;
        long long dialInOut3rdParty;
        long long dialInOutMicrosoft;
        long long im;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long web;
    };

    struct skypeForBusinessParticipantActivityCounts : graph::entity {
        long long appSharing;
        long long audioVideo;
        long long dialInOut3rdParty;
        long long im;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long web;
    };

    struct skypeForBusinessParticipantActivityMinuteCounts : graph::entity {
        long long audiovideo;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct skypeForBusinessParticipantActivityUserCounts : graph::entity {
        long long appSharing;
        long long audioVideo;
        long long dialInOut3rdParty;
        long long im;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long web;
    };

    struct skypeForBusinessPeerToPeerActivityCounts : graph::entity {
        long long appSharing;
        long long audio;
        long long fileTransfer;
        long long im;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long video;
    };

    struct skypeForBusinessPeerToPeerActivityMinuteCounts : graph::entity {
        long long audio;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long video;
    };

    struct skypeForBusinessPeerToPeerActivityUserCounts : graph::entity {
        long long appSharing;
        long long audio;
        long long fileTransfer;
        long long im;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long video;
    };

    struct teamsDeviceUsageDistributionUserCounts : graph::entity {
        long long androidPhone;
        long long chromeOS;
        long long ios;
        long long linux;
        long long mac;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long web;
        long long windows;
        long long windowsPhone;
    };

    struct teamsDeviceUsageUserCounts : graph::entity {
        long long androidPhone;
        long long chromeOS;
        long long ios;
        long long linux;
        long long mac;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long web;
        long long windows;
        long long windowsPhone;
    };

    struct teamsDeviceUsageUserDetail : graph::entity {
        QDate deletedDate;
        bool isDeleted;
        bool isLicensed;
        QDate lastActivityDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        bool usedAndroidPhone;
        bool usedChromeOS;
        bool usediOS;
        bool usedLinux;
        bool usedMac;
        bool usedWeb;
        bool usedWindows;
        bool usedWindowsPhone;
        QString userPrincipalName;
    };

    struct teamsUserActivityCounts : graph::entity {
        long long calls;
        long long meetings;
        long long privateChatMessages;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long teamChatMessages;
    };

    struct teamsUserActivityDistributionUserCounts : graph::entity {
        long long calls;
        long long meetings;
        long long privateChatMessages;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long teamChatMessages;
    };

    struct teamsUserActivityUserCounts : graph::entity {
        long long calls;
        long long meetings;
        long long otherActions;
        long long privateChatMessages;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long teamChatMessages;
    };

    struct teamsUserActivityUserDetail : graph::entity {
        long long adHocMeetingsAttendedCount;
        long long adHocMeetingsOrganizedCount;
        QList<QString> assignedProducts;
        std::chrono::system_clock::duration audioDuration;
        long long callCount;
        QDate deletedDate;
        bool hasOtherAction;
        bool isDeleted;
        bool isLicensed;
        QDate lastActivityDate;
        long long meetingCount;
        long long meetingsAttendedCount;
        long long meetingsOrganizedCount;
        long long privateChatMessageCount;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long scheduledOneTimeMeetingsAttendedCount;
        long long scheduledOneTimeMeetingsOrganizedCount;
        long long scheduledRecurringMeetingsAttendedCount;
        long long scheduledRecurringMeetingsOrganizedCount;
        std::chrono::system_clock::duration screenShareDuration;
        long long teamChatMessageCount;
        QString userPrincipalName;
        std::chrono::system_clock::duration videoDuration;
    };

    struct yammerActivitySummary : graph::entity {
        long long liked;
        long long posted;
        long long read;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct yammerActivityUserDetail : graph::entity {
        QList<QString> assignedProducts;
        QString displayName;
        QDate lastActivityDate;
        long long likedCount;
        long long postedCount;
        long long readCount;
        QString reportPeriod;
        QDate reportRefreshDate;
        QDate stateChangeDate;
        QString userPrincipalName;
        QString userState;
    };

    struct yammerDeviceUsageDistributionUserCounts : graph::entity {
        int androidPhone;
        int iPad;
        int iPhone;
        int other;
        QString reportPeriod;
        QDate reportRefreshDate;
        int web;
        int windowsPhone;
    };

    struct yammerDeviceUsageUserCounts : graph::entity {
        int androidPhone;
        int iPad;
        int iPhone;
        int other;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        int web;
        int windowsPhone;
    };

    struct yammerDeviceUsageUserDetail : graph::entity {
        QString displayName;
        QDate lastActivityDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        QDate stateChangeDate;
        bool usedAndroidPhone;
        bool usediPad;
        bool usediPhone;
        bool usedOthers;
        bool usedWeb;
        bool usedWindowsPhone;
        QString userPrincipalName;
        QString userState;
    };

    struct yammerGroupsActivityCounts : graph::entity {
        long long liked;
        long long posted;
        long long read;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct yammerGroupsActivityDetail : graph::entity {
        QString groupDisplayName;
        QString groupType;
        bool isDeleted;
        QDate lastActivityDate;
        long long likedCount;
        long long memberCount;
        QString networkDisplayName;
        bool office365Connected;
        QString ownerPrincipalName;
        long long postedCount;
        long long readCount;
        QString reportPeriod;
        QDate reportRefreshDate;
    };

    struct yammerGroupsActivityGroupCounts : graph::entity {
        long long active;
        QDate reportDate;
        QString reportPeriod;
        QDate reportRefreshDate;
        long long total;
    };

    struct plannerAppliedCategories {
    };

    struct plannerAssignment {
        microsoft::graph::identitySet assignedBy;
        QDateTime assignedDateTime;
        QString orderHint;
    };

    struct plannerAssignments {
    };

    struct plannerCategoryDescriptions {
        QString category1;
        QString category10;
        QString category11;
        QString category12;
        QString category13;
        QString category14;
        QString category15;
        QString category16;
        QString category17;
        QString category18;
        QString category19;
        QString category2;
        QString category20;
        QString category21;
        QString category22;
        QString category23;
        QString category24;
        QString category25;
        QString category3;
        QString category4;
        QString category5;
        QString category6;
        QString category7;
        QString category8;
        QString category9;
    };

    struct plannerChecklistItem {
        bool isChecked;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString orderHint;
        QString title;
    };

    struct plannerChecklistItems {
    };

    struct plannerExternalReference {
        QString alias;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString previewPriority;
        QString type;
    };

    struct plannerExternalReferences {
    };

    struct plannerFavoritePlanReference {
        QString orderHint;
        QString planTitle;
    };

    struct plannerFavoritePlanReferenceCollection {
    };

    struct plannerOrderHintsByAssignee {
    };

    struct plannerPlanContainer {
        QString containerId;
        microsoft::graph::plannerContainerType type;
        QString url;
    };

    struct plannerPlanContext {
        QString associationType;
        QDateTime createdDateTime;
        QList<QString> displayNameSegments;
        bool isCreationContext;
        QString ownerAppId;
    };

    struct plannerPlanContextCollection {
    };

    struct plannerPlanContextDetails {
        QString customLinkText;
        microsoft::graph::plannerPlanContextType displayLinkType;
        QString url;
    };

    struct plannerPlanContextDetailsCollection {
    };

    struct plannerRecentPlanReference {
        QDateTime lastAccessedDateTime;
        QString planTitle;
    };

    struct plannerRecentPlanReferenceCollection {
    };

    struct plannerTeamsPublicationInfo {
        QDateTime lastModifiedDateTime;
        QString publicationId;
        QString publishedToPlanId;
        QString publishingTeamId;
        QString publishingTeamName;
    };

    struct plannerUserIds {
    };

    struct plannerAssignedToTaskBoardTaskFormat : graph::plannerDelta {
        microsoft::graph::plannerOrderHintsByAssignee orderHintsByAssignee;
        QString unassignedOrderHint;
    };

    struct plannerBucketTaskBoardTaskFormat : graph::plannerDelta {
        QString orderHint;
    };

    struct plannerPlanDetails : graph::plannerDelta {
        microsoft::graph::plannerCategoryDescriptions categoryDescriptions;
        microsoft::graph::plannerPlanContextDetailsCollection contextDetails;
        microsoft::graph::plannerUserIds sharedWith;
    };

    struct plannerProgressTaskBoardTaskFormat : graph::plannerDelta {
        QString orderHint;
    };

    struct plannerRosterMember : graph::entity {
        QList<QString> roles;
        QString tenantId;
        QString userId;
    };

    struct plannerTaskDetails : graph::plannerDelta {
        microsoft::graph::plannerChecklistItems checklist;
        QString description;
        microsoft::graph::plannerPreviewType previewType;
        microsoft::graph::plannerExternalReferences references;
    };

    struct insightIdentity {
        QString address;
        QString displayName;
        QString id;
    };

    struct resourceReference {
        QString id;
        QString type;
        QString webUrl;
    };

    struct resourceVisualization {
        QString containerDisplayName;
        QString containerType;
        QString containerWebUrl;
        QString mediaType;
        QString previewImageUrl;
        QString previewText;
        QString title;
        QString type;
    };

    struct sharingDetail {
        microsoft::graph::insightIdentity sharedBy;
        QDateTime sharedDateTime;
        microsoft::graph::resourceReference sharingReference;
        QString sharingSubject;
        QString sharingType;
    };

    struct usageDetails {
        QDateTime lastAccessedDateTime;
        QDateTime lastModifiedDateTime;
    };

    struct sharedInsight : graph::entity {
        microsoft::graph::sharingDetail lastShared;
        microsoft::graph::resourceReference resourceReference;
        microsoft::graph::resourceVisualization resourceVisualization;
        QList<microsoft::graph::sharingDetail> sharingHistory;
        std::unique_ptr<microsoft::graph::entity> lastSharedMethod;
        std::unique_ptr<microsoft::graph::entity> resource;
    };

    struct trending : graph::entity {
        QDateTime lastModifiedDateTime;
        microsoft::graph::resourceReference resourceReference;
        microsoft::graph::resourceVisualization resourceVisualization;
        double weight;
        std::unique_ptr<microsoft::graph::entity> resource;
    };

    struct usedInsight : graph::entity {
        microsoft::graph::usageDetails lastUsed;
        microsoft::graph::resourceReference resourceReference;
        microsoft::graph::resourceVisualization resourceVisualization;
        std::unique_ptr<microsoft::graph::entity> resource;
    };

    struct userInsightsSettings : graph::entity {
        bool isEnabled;
    };

    struct changeTrackedEntity : graph::entity {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
    };

    struct diagnostic {
        QString message;
        QString url;
    };

    struct externalLink {
        QString href;
    };

    struct onenoteOperationError {
        QString code;
        QString message;
    };

    struct onenotePagePreviewLinks {
        microsoft::graph::externalLink previewImageUrl;
    };

    struct onenotePatchContentCommand {
        microsoft::graph::onenotePatchActionType action;
        QString content;
        microsoft::graph::onenotePatchInsertPosition position;
        QString target;
    };

    struct pageLinks {
        microsoft::graph::externalLink oneNoteClientUrl;
        microsoft::graph::externalLink oneNoteWebUrl;
    };

    struct recentNotebookLinks {
        microsoft::graph::externalLink oneNoteClientUrl;
        microsoft::graph::externalLink oneNoteWebUrl;
    };

    struct sectionLinks {
        microsoft::graph::externalLink oneNoteClientUrl;
        microsoft::graph::externalLink oneNoteWebUrl;
    };

    struct onenoteEntityBaseModel : graph::entity {
        QString self;
    };

    struct onenoteEntitySchemaObjectModel : graph::onenoteEntityBaseModel {
        QDateTime createdDateTime;
    };

    struct onenoteEntityHierarchyModel : graph::onenoteEntitySchemaObjectModel {
        microsoft::graph::identitySet createdBy;
        QString displayName;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
    };

    struct operation : graph::entity {
        QDateTime createdDateTime;
        QDateTime lastActionDateTime;
        microsoft::graph::operationStatus status;
    };

    struct onenoteOperation : graph::operation {
        microsoft::graph::onenoteOperationError error;
        QString percentComplete;
        QString resourceId;
        QString resourceLocation;
    };

    struct onenoteResource : graph::onenoteEntityBaseModel {
        QByteArray content;
        QString contentUrl;
    };

    struct companyDetail {
        microsoft::graph::physicalAddress address;
        QString department;
        QString displayName;
        QString officeLocation;
        QString pronunciation;
        QString webUrl;
    };

    struct educationalActivityDetail {
        QString abbreviation;
        QList<QString> activities;
        QList<QString> awards;
        QString description;
        QString displayName;
        QList<QString> fieldsOfStudy;
        QString grade;
        QString notes;
        QString webUrl;
    };

    struct inferenceData {
        double confidenceScore;
        bool userHasVerifiedAccuracy;
    };

    struct institutionData {
        QString description;
        QString displayName;
        microsoft::graph::physicalAddress location;
        QString webUrl;
    };

    struct personDataSources {
        QList<QString> type;
    };

    struct personNamePronounciation {
        QString displayName;
        QString first;
        QString last;
        QString maiden;
        QString middle;
    };

    struct positionDetail {
        microsoft::graph::companyDetail company;
        QString description;
        QDate endMonthYear;
        QString jobTitle;
        QString role;
        QDate startMonthYear;
        QString summary;
    };

    struct profileCardAnnotation {
        QString displayName;
        QList<microsoft::graph::displayNameLocalization> localizations;
    };

    struct regionalFormatOverrides {
        QString calendar;
        QString firstDayOfWeek;
        QString longDateFormat;
        QString longTimeFormat;
        QString shortDateFormat;
        QString shortTimeFormat;
        QString timeZone;
    };

    struct relatedPerson {
        QString displayName;
        microsoft::graph::personRelationship relationship;
        QString userPrincipalName;
    };

    struct serviceInformation {
        QString name;
        QString webUrl;
    };

    struct translationLanguageOverride {
        QString languageTag;
        microsoft::graph::translationBehavior translationBehavior;
    };

    struct translationPreferences {
        QList<microsoft::graph::translationLanguageOverride> languageOverrides;
        microsoft::graph::translationBehavior translationBehavior;
        QList<QString> untranslatedLanguages;
    };

    struct itemFacet : graph::entity {
        microsoft::graph::allowedAudiences allowedAudiences;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::inferenceData inference;
        bool isSearchable;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        microsoft::graph::personDataSources source;
    };

    struct educationalActivity : graph::itemFacet {
        QDate completionMonthYear;
        QDate endMonthYear;
        microsoft::graph::institutionData institution;
        microsoft::graph::educationalActivityDetail program;
        QDate startMonthYear;
    };

    struct itemAddress : graph::itemFacet {
        microsoft::graph::physicalAddress detail;
        QString displayName;
        microsoft::graph::geoCoordinates geoCoordinates;
    };

    struct itemEmail : graph::itemFacet {
        QString address;
        QString displayName;
        microsoft::graph::emailType type;
    };

    struct itemInsightsSettings : graph::entity {
        QString disabledForGroup;
        bool isEnabledInOrganization;
    };

    struct itemPatent : graph::itemFacet {
        QString description;
        QString displayName;
        bool isPending;
        QDate issuedDate;
        QString issuingAuthority;
        QString number;
        QString webUrl;
    };

    struct itemPhone : graph::itemFacet {
        QString displayName;
        QString number;
        microsoft::graph::phoneType type;
    };

    struct itemPublication : graph::itemFacet {
        QString description;
        QString displayName;
        QDate publishedDate;
        QString publisher;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct languageProficiency : graph::itemFacet {
        QString displayName;
        microsoft::graph::languageProficiencyLevel proficiency;
        microsoft::graph::languageProficiencyLevel reading;
        microsoft::graph::languageProficiencyLevel spoken;
        QString tag;
        QString thumbnailUrl;
        microsoft::graph::languageProficiencyLevel written;
    };

    struct profileCardProperty : graph::entity {
        QList<microsoft::graph::profileCardAnnotation> annotations;
        QString directoryPropertyName;
    };

    struct personAnnotation : graph::itemFacet {
        microsoft::graph::itemBody detail;
        QString displayName;
        QString thumbnailUrl;
    };

    struct personAnnualEvent : graph::itemFacet {
        QDate date;
        QString displayName;
        microsoft::graph::personAnnualEventType type;
    };

    struct personAward : graph::itemFacet {
        QString description;
        QString displayName;
        QDate issuedDate;
        QString issuingAuthority;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct personCertification : graph::itemFacet {
        QString certificationId;
        QString description;
        QString displayName;
        QDate endDate;
        QDate issuedDate;
        QString issuingAuthority;
        QString issuingCompany;
        QDate startDate;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct personExtension : graph::extension {
    };

    struct personInterest : graph::itemFacet {
        QList<QString> categories;
        QList<QString> collaborationTags;
        QString description;
        QString displayName;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct personName : graph::itemFacet {
        QString displayName;
        QString first;
        QString initials;
        QString languageTag;
        QString last;
        QString maiden;
        QString middle;
        QString nickname;
        microsoft::graph::personNamePronounciation pronunciation;
        QString suffix;
        QString title;
    };

    struct personResponsibility : graph::itemFacet {
        QList<QString> collaborationTags;
        QString description;
        QString displayName;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct personWebsite : graph::itemFacet {
        QList<QString> categories;
        QString description;
        QString displayName;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct userAccountInformation : graph::itemFacet {
        QString ageGroup;
        QString countryCode;
        microsoft::graph::localeInfo preferredLanguageTag;
        QString userPrincipalName;
    };

    struct workPosition : graph::itemFacet {
        QList<QString> categories;
        QList<microsoft::graph::relatedPerson> colleagues;
        microsoft::graph::positionDetail detail;
        bool isCurrent;
        microsoft::graph::relatedPerson manager;
    };

    struct projectParticipation : graph::itemFacet {
        QList<QString> categories;
        microsoft::graph::companyDetail client;
        QList<QString> collaborationTags;
        QList<microsoft::graph::relatedPerson> colleagues;
        microsoft::graph::positionDetail detail;
        QString displayName;
        QList<microsoft::graph::relatedPerson> sponsors;
        QString thumbnailUrl;
    };

    struct skillProficiency : graph::itemFacet {
        QList<QString> categories;
        QList<QString> collaborationTags;
        QString displayName;
        microsoft::graph::skillProficiencyLevel proficiency;
        QString thumbnailUrl;
        QString webUrl;
    };

    struct webAccount : graph::itemFacet {
        QString description;
        microsoft::graph::serviceInformation service;
        QString statusMessage;
        QString thumbnailUrl;
        QString userId;
        QString webUrl;
    };

    struct governancePermission {
        QString accessLevel;
        bool isActive;
        bool isEligible;
    };

    struct governanceRoleAssignmentRequestStatus {
        QString status;
        QList<microsoft::graph::keyValue> statusDetails;
        QString subStatus;
    };

    struct governanceRuleSetting {
        QString ruleIdentifier;
        QString setting;
    };

    struct governanceSchedule {
        std::chrono::system_clock::duration duration;
        QDateTime endDateTime;
        QDateTime startDateTime;
        QString type;
    };

    struct ticketInfo {
        QString ticketNumber;
        QString ticketSystem;
    };

    struct unifiedRoleManagementPolicyRuleTarget {
        QString caller;
        QList<QString> enforcedSettings;
        QList<QString> inheritableSettings;
        QString level;
        QList<QString> operations;
        QList<microsoft::graph::directoryObject> targetObjects;
    };

    struct governanceSubject : graph::entity {
        QString displayName;
        QString email;
        QString principalName;
        QString type;
    };

    struct unifiedRoleManagementPolicyRule : graph::entity {
        microsoft::graph::unifiedRoleManagementPolicyRuleTarget target;
    };

    struct unifiedRoleManagementPolicyAuthenticationContextRule : graph::unifiedRoleManagementPolicyRule {
        QString claimValue;
        bool isEnabled;
    };

    struct unifiedRoleManagementPolicyEnablementRule : graph::unifiedRoleManagementPolicyRule {
        QList<QString> enabledRules;
    };

    struct unifiedRoleManagementPolicyExpirationRule : graph::unifiedRoleManagementPolicyRule {
        bool isExpirationRequired;
        std::chrono::system_clock::duration maximumDuration;
    };

    struct unifiedRoleManagementPolicyNotificationRule : graph::unifiedRoleManagementPolicyRule {
        bool isDefaultRecipientsEnabled;
        QString notificationLevel;
        QList<QString> notificationRecipients;
        QString notificationType;
        QString recipientType;
    };

    struct roleSuccessStatistics {
        long long permanentFail;
        long long permanentSuccess;
        long long removeFail;
        long long removeSuccess;
        QString roleId;
        QString roleName;
        long long temporaryFail;
        long long temporarySuccess;
        long long unknownFail;
    };

    struct privilegedOperationEvent : graph::entity {
        QString additionalInformation;
        QDateTime creationDateTime;
        QDateTime expirationDateTime;
        QString referenceKey;
        QString referenceSystem;
        QString requestorId;
        QString requestorName;
        QString requestType;
        QString roleId;
        QString roleName;
        QString tenantId;
        QString userId;
        QString userMail;
        QString userName;
    };

    struct privilegedRoleSettings : graph::entity {
        bool approvalOnElevation;
        QList<QString> approverIds;
        std::chrono::system_clock::duration elevationDuration;
        bool isMfaOnElevationConfigurable;
        bool lastGlobalAdmin;
        std::chrono::system_clock::duration maxElavationDuration;
        bool mfaOnElevation;
        std::chrono::system_clock::duration minElevationDuration;
        bool notificationToUserOnElevation;
        bool ticketingInfoOnElevation;
    };

    struct privilegedRoleSummary : graph::entity {
        int elevatedCount;
        int managedCount;
        bool mfaEnabled;
        microsoft::graph::roleSummaryStatus status;
        int usersCount;
    };

    struct privilegedSignupStatus : graph::entity {
        bool isRegistered;
        microsoft::graph::setupStatus status;
    };

    struct tenantSetupInfo : graph::entity {
        bool firstTimeSetup;
        QList<QString> relevantRolesSettings;
        microsoft::graph::setupStatus setupStatus;
        bool skipSetup;
        QString userRolesActions;
        std::unique_ptr<microsoft::graph::privilegedRoleSettings> defaultRolesSettings;
    };

    struct documentCommentReply : graph::entity {
        QString content;
        QString location;
    };

    struct archivedPrintJob {
        bool acquiredByPrinter;
        QDateTime acquiredDateTime;
        int blackAndWhitePageCount;
        int colorPageCount;
        QDateTime completionDateTime;
        int copiesPrinted;
        microsoft::graph::userIdentity createdBy;
        QDateTime createdDateTime;
        int duplexPageCount;
        QString id;
        int pageCount;
        QString printerId;
        microsoft::graph::printJobProcessingState processingState;
        int simplexPageCount;
    };

    struct deviceHealth {
        QDateTime lastConnectionTime;
    };

    struct groupPrintUsageSummary {
        int completedJobCount;
        microsoft::graph::identity group;
        QString groupDisplayName;
        QString groupMail;
        int incompleteJobCount;
    };

    struct integerRange {
        long long end;
        long long maximum;
        long long minimum;
        long long start;
    };

    struct printerUsageSummary {
        int completedJobCount;
        int incompleteJobCount;
        QString printerDisplayName;
        QString printerId;
        QString printerManufacturer;
        QString printerModel;
        std::unique_ptr<microsoft::graph::directoryObject> printer;
    };

    struct userPrintUsageSummary {
        int completedJobCount;
        int incompleteJobCount;
        microsoft::graph::identity user;
        QString userDisplayName;
        QString userPrincipalName;
    };

    struct printCertificateSigningRequest {
        QString content;
        QString transportKey;
    };

    struct printDocumentUploadProperties {
        QString contentType;
        QString documentName;
        long long size;
    };

    struct printerCapabilities {
        QList<int> bottomMargins;
        bool collation;
        QList<microsoft::graph::printColorMode> colorModes;
        QList<QString> contentTypes;
        microsoft::graph::integerRange copiesPerJob;
        QList<int> dpis;
        QList<microsoft::graph::printDuplexMode> duplexModes;
        QList<microsoft::graph::printerFeedDirection> feedDirections;
        QList<microsoft::graph::printerFeedOrientation> feedOrientations;
        QList<microsoft::graph::printFinishing> finishings;
        QList<QString> inputBins;
        bool isColorPrintingSupported;
        bool isPageRangeSupported;
        QList<int> leftMargins;
        QList<QString> mediaColors;
        QList<QString> mediaSizes;
        QList<QString> mediaTypes;
        QList<microsoft::graph::printMultipageLayout> multipageLayouts;
        QList<microsoft::graph::printOrientation> orientations;
        QList<QString> outputBins;
        QList<int> pagesPerSheet;
        QList<microsoft::graph::printQuality> qualities;
        QList<int> rightMargins;
        QList<microsoft::graph::printScaling> scalings;
        QList<microsoft::graph::printColorConfiguration> supportedColorConfigurations;
        microsoft::graph::integerRange supportedCopiesPerJob;
        QList<QString> supportedDocumentMimeTypes;
        QList<microsoft::graph::printDuplexConfiguration> supportedDuplexConfigurations;
        QList<microsoft::graph::printFinishing> supportedFinishings;
        QList<QString> supportedMediaColors;
        QList<QString> supportedMediaSizes;
        QList<microsoft::graph::printMediaType> supportedMediaTypes;
        QList<microsoft::graph::printOrientation> supportedOrientations;
        QList<QString> supportedOutputBins;
        microsoft::graph::integerRange supportedPagesPerSheet;
        QList<microsoft::graph::printPresentationDirection> supportedPresentationDirections;
        QList<microsoft::graph::printQuality> supportedPrintQualities;
        bool supportsFitPdfToPage;
        QList<int> topMargins;
    };

    struct printerDefaults {
        microsoft::graph::printColorMode colorMode;
        QString contentType;
        int copiesPerJob;
        QString documentMimeType;
        int dpi;
        microsoft::graph::printDuplexConfiguration duplexConfiguration;
        microsoft::graph::printDuplexMode duplexMode;
        QList<microsoft::graph::printFinishing> finishings;
        bool fitPdfToPage;
        QString inputBin;
        QString mediaColor;
        QString mediaSize;
        QString mediaType;
        microsoft::graph::printMultipageLayout multipageLayout;
        microsoft::graph::printOrientation orientation;
        QString outputBin;
        int pagesPerSheet;
        bool pdfFitToPage;
        microsoft::graph::printPresentationDirection presentationDirection;
        microsoft::graph::printColorConfiguration printColorConfiguration;
        microsoft::graph::printQuality printQuality;
        microsoft::graph::printQuality quality;
        microsoft::graph::printScaling scaling;
    };

    struct printMargin {
        int bottom;
        int left;
        int right;
        int top;
    };

    struct printerLocation {
        int altitudeInMeters;
        QString building;
        QString city;
        QString countryOrRegion;
        QString floor;
        QString floorDescription;
        int floorNumber;
        double latitude;
        double longitude;
        QList<QString> organization;
        QString postalCode;
        QString roomDescription;
        QString roomName;
        int roomNumber;
        QString site;
        QString stateOrProvince;
        QString streetAddress;
        QList<QString> subdivision;
        QList<QString> subunit;
    };

    struct printerStatus {
        QString description;
        QList<microsoft::graph::printerProcessingStateDetail> details;
        microsoft::graph::printerProcessingState processingState;
        QString processingStateDescription;
        QList<microsoft::graph::printerProcessingStateReason> processingStateReasons;
        microsoft::graph::printerProcessingState state;
    };

    struct printJobConfiguration {
        bool collate;
        microsoft::graph::printColorMode colorMode;
        int copies;
        int dpi;
        microsoft::graph::printDuplexMode duplexMode;
        microsoft::graph::printerFeedOrientation feedOrientation;
        QList<microsoft::graph::printFinishing> finishings;
        bool fitPdfToPage;
        QString inputBin;
        microsoft::graph::printMargin margin;
        QString mediaSize;
        QString mediaType;
        microsoft::graph::printMultipageLayout multipageLayout;
        microsoft::graph::printOrientation orientation;
        QString outputBin;
        QList<microsoft::graph::integerRange> pageRanges;
        int pagesPerSheet;
        microsoft::graph::printQuality quality;
        microsoft::graph::printScaling scaling;
    };

    struct printJobStatus {
        bool acquiredByPrinter;
        QString description;
        QList<microsoft::graph::printJobStateDetail> details;
        bool isAcquiredByPrinter;
        microsoft::graph::printJobProcessingState processingState;
        QString processingStateDescription;
        microsoft::graph::printJobProcessingState state;
    };

    struct printOperationStatus {
        QString description;
        microsoft::graph::printOperationProcessingState state;
    };

    struct printSettings {
        bool documentConversionEnabled;
    };

    struct printTaskStatus {
        QString description;
        microsoft::graph::printTaskProcessingState state;
    };

    struct printUsageSummary {
        int completedJobCount;
        int incompleteJobCount;
    };

    struct printConnector : graph::entity {
        QString appVersion;
        microsoft::graph::deviceHealth deviceHealth;
        QString displayName;
        QString fullyQualifiedDomainName;
        microsoft::graph::printerLocation location;
        QString name;
        QString operatingSystem;
        QDateTime registeredDateTime;
    };

    struct printOperation : graph::entity {
        QDateTime createdDateTime;
        microsoft::graph::printOperationStatus status;
    };

    struct printServiceEndpoint : graph::entity {
        QString displayName;
        QString uri;
    };

    struct imageInfo {
        bool addImageQuery;
        QString alternateText;
        QString alternativeText;
        QString iconUrl;
    };

    struct visualInfo {
        microsoft::graph::imageInfo attribution;
        QString backgroundColor;
        microsoft::graph::Json content;
        QString description;
        QString displayText;
    };

    struct payloadRequest {
    };

    struct payloadResponse : graph::entity {
    };

    struct dataPolicyOperation : graph::entity {
        QDateTime completedDateTime;
        double progress;
        microsoft::graph::dataPolicyOperationStatus status;
        QString storageLocation;
        QDateTime submittedDateTime;
        QString userId;
    };

    struct assignedTrainingInfo {
        int assignedUserCount;
        int completedUserCount;
        QString displayName;
    };

    struct attackSimulationUser {
        QString displayName;
        QString email;
        QString userId;
    };

    struct attackSimulationSimulationUserCoverage {
        microsoft::graph::attackSimulationUser attackSimulationUser;
        int clickCount;
        int compromisedCount;
        QDateTime latestSimulationDateTime;
        int simulationCount;
    };

    struct userTrainingStatusInfo {
        QDateTime assignedDateTime;
        QDateTime completionDateTime;
        QString displayName;
        microsoft::graph::trainingStatus trainingStatus;
    };

    struct emailIdentity : graph::identity {
        QString email;
    };

    struct recommendedAction {
        QString actionWebUrl;
        double potentialScoreImpact;
        QString title;
    };

    struct simulationEvent {
        int count;
        QString eventName;
    };

    struct simulationEventsContent {
        double compromisedRate;
        QList<microsoft::graph::simulationEvent> events;
    };

    struct trainingEventsContent {
        QList<microsoft::graph::assignedTrainingInfo> assignedTrainingsInfos;
        int trainingsAssignedUserCount;
    };

    struct userSimulationEventInfo {
        QString browser;
        QDateTime eventDateTime;
        QString eventName;
        QString ipAddress;
        QString osPlatformDeviceDetails;
    };

    struct userTrainingContentEventInfo {
        QString browser;
        QDateTime contentDateTime;
        QString ipAddress;
        QString osPlatformDeviceDetails;
        double potentialScoreImpact;
    };

    struct securityProviderStatus {
        bool enabled;
        QString endpoint;
        QString provider;
        QString region;
        QString vendor;
    };

    struct providerTenantSetting : graph::entity {
        QString azureTenantId;
        bool enabled;
        QDateTime lastModifiedDateTime;
        QString provider;
        QString vendor;
    };

    struct tiIndicator : graph::entity {
        microsoft::graph::tiAction action;
        QList<QString> activityGroupNames;
        QString additionalInformation;
        QString azureTenantId;
        int confidence;
        QString description;
        microsoft::graph::diamondModel diamondModel;
        QString domainName;
        QString emailEncoding;
        QString emailLanguage;
        QString emailRecipient;
        QString emailSenderAddress;
        QString emailSenderName;
        QString emailSourceDomain;
        QString emailSourceIpAddress;
        QString emailSubject;
        QString emailXMailer;
        QDateTime expirationDateTime;
        QString externalId;
        QDateTime fileCompileDateTime;
        QDateTime fileCreatedDateTime;
        microsoft::graph::fileHashType fileHashType;
        QString fileHashValue;
        QString fileMutexName;
        QString fileName;
        QString filePacker;
        QString filePath;
        long long fileSize;
        QString fileType;
        QDateTime ingestedDateTime;
        bool isActive;
        QList<QString> killChain;
        QString knownFalsePositives;
        QDateTime lastReportedDateTime;
        QList<QString> malwareFamilyNames;
        QString networkCidrBlock;
        long long networkDestinationAsn;
        QString networkDestinationCidrBlock;
        QString networkDestinationIPv4;
        QString networkDestinationIPv6;
        int networkDestinationPort;
        QString networkIPv4;
        QString networkIPv6;
        int networkPort;
        int networkProtocol;
        long long networkSourceAsn;
        QString networkSourceCidrBlock;
        QString networkSourceIPv4;
        QString networkSourceIPv6;
        int networkSourcePort;
        bool passiveOnly;
        int severity;
        QList<QString> tags;
        QString targetProduct;
        QString threatType;
        microsoft::graph::tlpLevel tlpLevel;
        QString url;
        QString userAgent;
    };

    struct accountAlias {
        QString id;
        QString idType;
    };

    struct alertDetection {
        QString detectionType;
        QString method;
        QString name;
    };

    struct alertHistoryState {
        QString appId;
        QString assignedTo;
        QList<QString> comments;
        microsoft::graph::alertFeedback feedback;
        microsoft::graph::alertStatus status;
        QDateTime updatedDateTime;
        QString user;
    };

    struct alertTrigger {
        QString name;
        QString type;
        QString value;
    };

    struct averageComparativeScore {
        double averageScore;
        QString basis;
    };

    struct certificationControl {
        QString name;
        QString url;
    };

    struct cloudAppSecurityState {
        QString destinationServiceIp;
        QString destinationServiceName;
        QString riskScore;
    };

    struct complianceInformation {
        QList<microsoft::graph::certificationControl> certificationControls;
        QString certificationName;
    };

    struct controlScore {
        QString controlCategory;
        QString controlName;
        QString description;
        double score;
    };

    struct domainRegistrant {
        QString countryOrRegionCode;
        QString organization;
        QString url;
        QString vendor;
    };

    struct entitySetNames {
    };

    struct fileHash {
        microsoft::graph::fileHashType hashType;
        QString hashValue;
    };

    struct fileSecurityState {
        microsoft::graph::fileHash fileHash;
        QString name;
        QString path;
        QString riskScore;
    };

    struct hostSecurityState {
        QString fqdn;
        bool isAzureAdJoined;
        bool isAzureAdRegistered;
        bool isHybridAzureDomainJoined;
        QString netBiosName;
        QString os;
        QString privateIpAddress;
        QString publicIpAddress;
        QString riskScore;
    };

    struct investigationSecurityState {
        QString name;
        QString status;
    };

    struct ipCategory {
        QString description;
        QString name;
        QString vendor;
    };

    struct ipReferenceData {
        long long asn;
        QString city;
        QString countryOrRegionCode;
        QString organization;
        QString state;
        QString vendor;
    };

    struct logonUser {
        QString accountDomain;
        QString accountName;
        microsoft::graph::userAccountSecurityType accountType;
        QDateTime firstSeenDateTime;
        QDateTime lastSeenDateTime;
        QString logonId;
        QList<microsoft::graph::logonType> logonTypes;
    };

    struct malwareState {
        QString category;
        QString family;
        QString name;
        QString severity;
        bool wasRunning;
    };

    struct messageSecurityState {
        QString connectingIP;
        QString deliveryAction;
        QString deliveryLocation;
        QString directionality;
        QString internetMessageId;
        QString messageFingerprint;
        QDateTime messageReceivedDateTime;
        QString messageSubject;
        QString networkMessageId;
    };

    struct networkConnection {
        QString applicationName;
        QString destinationAddress;
        QString destinationDomain;
        QString destinationLocation;
        QString destinationPort;
        QString destinationUrl;
        microsoft::graph::connectionDirection direction;
        QDateTime domainRegisteredDateTime;
        QString localDnsName;
        QString natDestinationAddress;
        QString natDestinationPort;
        QString natSourceAddress;
        QString natSourcePort;
        microsoft::graph::securityNetworkProtocol protocol;
        QString riskScore;
        QString sourceAddress;
        QString sourceLocation;
        QString sourcePort;
        microsoft::graph::connectionStatus status;
        QString urlParameters;
    };

    struct networkInterface {
        QString description;
        QString ipV4Address;
        QString ipV6Address;
        QString localIpV6Address;
        QString macAddress;
    };

    struct process {
        QString accountName;
        QString commandLine;
        QDateTime createdDateTime;
        microsoft::graph::fileHash fileHash;
        microsoft::graph::processIntegrityLevel integrityLevel;
        bool isElevated;
        QString name;
        QDateTime parentProcessCreatedDateTime;
        int parentProcessId;
        QString parentProcessName;
        QString path;
        int processId;
    };

    struct registryKeyState {
        microsoft::graph::registryHive hive;
        QString key;
        QString oldKey;
        QString oldValueData;
        QString oldValueName;
        microsoft::graph::registryOperation operation;
        int processId;
        QString valueData;
        QString valueName;
        microsoft::graph::registryValueType valueType;
    };

    struct reputationCategory {
        QString description;
        QString name;
        QString vendor;
    };

    struct secureScoreControlStateUpdate {
        QString assignedTo;
        QString comment;
        QString state;
        QString updatedBy;
        QDateTime updatedDateTime;
    };

    struct securityActionState {
        QString appId;
        microsoft::graph::operationStatus status;
        QDateTime updatedDateTime;
        QString user;
    };

    struct securityResource {
        QString resource;
        microsoft::graph::securityResourceType resourceType;
    };

    struct securityVendorInformation {
        QString provider;
        QString providerVersion;
        QString subProvider;
        QString vendor;
    };

    struct uriClickSecurityState {
        QString clickAction;
        QDateTime clickDateTime;
        QString id;
        QString sourceId;
        QString uriDomain;
        QString verdict;
    };

    struct userAccount {
        QString displayName;
        QDateTime lastSeenDateTime;
        QString riskScore;
        QString service;
        QString signinName;
        microsoft::graph::accountStatus status;
    };

    struct userSecurityState {
        QString aadUserId;
        QString accountName;
        QString domainName;
        microsoft::graph::emailRole emailRole;
        bool isVpn;
        QDateTime logonDateTime;
        QString logonId;
        QString logonIp;
        QString logonLocation;
        microsoft::graph::logonType logonType;
        QString onPremisesSecurityIdentifier;
        QString riskScore;
        microsoft::graph::userAccountSecurityType userAccountType;
        QString userPrincipalName;
    };

    struct vulnerabilityState {
        QString cve;
        QString severity;
        bool wasRunning;
    };

    struct participantJoiningResponse {
    };

    struct acceptJoinResponse : graph::participantJoiningResponse {
    };

    struct mediaConfig {
        bool removeFromDefaultAudioGroup;
    };

    struct appHostedMediaConfig : graph::mediaConfig {
        QString blob;
    };

    struct attendanceInterval {
        int durationInSeconds;
        QDateTime joinDateTime;
        QDateTime leaveDateTime;
    };

    struct attendanceRecord {
        QList<microsoft::graph::attendanceInterval> attendanceIntervals;
        QString emailAddress;
        microsoft::graph::identity identity;
        QString role;
        int totalAttendanceInSeconds;
    };

    struct audioConferencing {
        QString conferenceId;
        QString dialinUrl;
        QString tollFreeNumber;
        QList<QString> tollFreeNumbers;
        QString tollNumber;
        QList<QString> tollNumbers;
    };

    struct broadcastMeetingSettings {
        microsoft::graph::broadcastMeetingAudience allowedAudience;
        bool isAttendeeReportEnabled;
        bool isQuestionAndAnswerEnabled;
        bool isRecordingEnabled;
        bool isVideoOnDemandEnabled;
    };

    struct callMediaState {
        microsoft::graph::mediaState audio;
    };

    struct callOptions {
    };

    struct callRoute {
        microsoft::graph::identitySet final;
        microsoft::graph::identitySet original;
        microsoft::graph::routingType routingType;
    };

    struct callTranscriptionInfo {
        QDateTime lastModifiedDateTime;
        microsoft::graph::callTranscriptionState state;
    };

    struct chatInfo {
        QString messageId;
        QString replyChainMessageId;
        QString threadId;
    };

    struct commsNotification {
        microsoft::graph::changeType changeType;
        QString resourceUrl;
    };

    struct commsNotifications {
        QList<microsoft::graph::commsNotification> value;
    };

    struct incomingContext {
        QString observedParticipantId;
        microsoft::graph::identitySet onBehalfOf;
        QString sourceParticipantId;
        microsoft::graph::identitySet transferor;
    };

    struct invitationParticipantInfo {
        microsoft::graph::endpointType endpointType;
        microsoft::graph::identitySet identity;
        QString replacesCallId;
    };

    struct inviteNewBotResponse : graph::participantJoiningResponse {
        QString inviteUri;
    };

    struct mediaInfo {
        QString resourceId;
        QString uri;
    };

    struct prompt {
    };

    struct mediaPrompt : graph::prompt {
        int loop;
        microsoft::graph::mediaInfo mediaInfo;
    };

    struct mediaStream {
        microsoft::graph::mediaDirection direction;
        QString label;
        microsoft::graph::modality mediaType;
        bool serverMuted;
        QString sourceId;
    };

    struct meetingCapability {
        bool allowAnonymousUsersToDialOut;
        bool allowAnonymousUsersToStartMeeting;
        microsoft::graph::autoAdmittedUsersType autoAdmittedUsers;
    };

    struct meetingInfo {
        bool allowConversationWithoutHost;
    };

    struct meetingParticipantInfo {
        microsoft::graph::identitySet identity;
        microsoft::graph::onlineMeetingRole role;
        QString upn;
    };

    struct meetingParticipants {
        QList<microsoft::graph::meetingParticipantInfo> attendees;
        QList<microsoft::graph::meetingParticipantInfo> contributors;
        microsoft::graph::meetingParticipantInfo organizer;
        QList<microsoft::graph::meetingParticipantInfo> producers;
    };

    struct organizerMeetingInfo : graph::meetingInfo {
        microsoft::graph::identitySet organizer;
    };

    struct outgoingCallOptions : graph::callOptions {
    };

    struct outOfOfficeSettings {
        bool isOutOfOffice;
        QString message;
    };

    struct participantInfo {
        QString countryCode;
        microsoft::graph::endpointType endpointType;
        microsoft::graph::identitySet identity;
        QString languageId;
        QString platformId;
        QString region;
    };

    struct recordingInfo {
        microsoft::graph::participantInfo initiatedBy;
        microsoft::graph::identitySet initiator;
        microsoft::graph::recordingStatus recordingStatus;
    };

    struct rejectJoinResponse : graph::participantJoiningResponse {
        microsoft::graph::rejectReason reason;
    };

    struct serviceHostedMediaConfig : graph::mediaConfig {
        QList<microsoft::graph::mediaInfo> preFetchMedia;
    };

    struct teleconferenceDeviceMediaQuality {
        std::chrono::system_clock::duration averageInboundJitter;
        double averageInboundPacketLossRateInPercentage;
        std::chrono::system_clock::duration averageInboundRoundTripDelay;
        std::chrono::system_clock::duration averageOutboundJitter;
        double averageOutboundPacketLossRateInPercentage;
        std::chrono::system_clock::duration averageOutboundRoundTripDelay;
        int channelIndex;
        long long inboundPackets;
        QString localIPAddress;
        int localPort;
        std::chrono::system_clock::duration maximumInboundJitter;
        double maximumInboundPacketLossRateInPercentage;
        std::chrono::system_clock::duration maximumInboundRoundTripDelay;
        std::chrono::system_clock::duration maximumOutboundJitter;
        double maximumOutboundPacketLossRateInPercentage;
        std::chrono::system_clock::duration maximumOutboundRoundTripDelay;
        std::chrono::system_clock::duration mediaDuration;
        long long networkLinkSpeedInBytes;
        long long outboundPackets;
        QString remoteIPAddress;
        int remotePort;
    };

    struct teleconferenceDeviceAudioQuality : graph::teleconferenceDeviceMediaQuality {
    };

    struct teleconferenceDeviceQuality {
        QUuid callChainId;
        QString cloudServiceDeploymentEnvironment;
        QString cloudServiceDeploymentId;
        QString cloudServiceInstanceName;
        QString cloudServiceName;
        QString deviceDescription;
        QString deviceName;
        QUuid mediaLegId;
        QList<microsoft::graph::teleconferenceDeviceMediaQuality> mediaQualityList;
        QUuid participantId;
    };

    struct teleconferenceDeviceVideoQuality : graph::teleconferenceDeviceMediaQuality {
        double averageInboundBitRate;
        double averageInboundFrameRate;
        double averageOutboundBitRate;
        double averageOutboundFrameRate;
    };

    struct teleconferenceDeviceScreenSharingQuality : graph::teleconferenceDeviceVideoQuality {
    };

    struct tokenMeetingInfo : graph::meetingInfo {
        QString token;
    };

    struct toneInfo {
        long long sequenceId;
        microsoft::graph::tone tone;
    };

    struct audioRoutingGroup : graph::entity {
        QList<QString> receivers;
        microsoft::graph::routingMode routingMode;
        QList<QString> sources;
    };

    struct commsOperation : graph::entity {
        QString clientContext;
        microsoft::graph::resultInfo resultInfo;
        microsoft::graph::operationStatus status;
    };

    struct participant : graph::entity {
        microsoft::graph::participantInfo info;
        bool isInLobby;
        bool isMuted;
        QList<microsoft::graph::mediaStream> mediaStreams;
        QString metadata;
        microsoft::graph::recordingInfo recordingInfo;
    };

    struct cancelMediaProcessingOperation : graph::commsOperation {
    };

    struct inviteParticipantsOperation : graph::commsOperation {
        QList<microsoft::graph::invitationParticipantInfo> participants;
    };

    struct meetingAttendanceReport : graph::entity {
        QList<microsoft::graph::attendanceRecord> attendanceRecords;
    };

    struct muteParticipantOperation : graph::commsOperation {
    };

    struct muteParticipantsOperation : graph::commsOperation {
        QList<QString> participants;
    };

    struct playPromptOperation : graph::commsOperation {
        microsoft::graph::playPromptCompletionReason completionReason;
    };

    struct recordOperation : graph::commsOperation {
        microsoft::graph::recordCompletionReason completionReason;
        QString recordingAccessToken;
        QString recordingLocation;
    };

    struct subscribeToToneOperation : graph::commsOperation {
    };

    struct unmuteParticipantOperation : graph::commsOperation {
    };

    struct updateRecordingStatusOperation : graph::commsOperation {
    };

    struct passwordResetResponse {
        QString newPassword;
    };

    struct authenticationMethod : graph::entity {
    };

    struct emailAuthenticationMethod : graph::authenticationMethod {
        QString emailAddress;
    };

    struct fido2AuthenticationMethod : graph::authenticationMethod {
        QString aaGuid;
        QList<QString> attestationCertificates;
        microsoft::graph::attestationLevel attestationLevel;
        QDateTime createdDateTime;
        QDateTime creationDateTime;
        QString displayName;
        QString model;
    };

    struct longRunningOperation : graph::entity {
        QDateTime createdDateTime;
        QDateTime lastActionDateTime;
        QString resourceLocation;
        microsoft::graph::longRunningOperationStatus status;
        QString statusDetail;
    };

    struct passwordAuthenticationMethod : graph::authenticationMethod {
        QDateTime createdDateTime;
        QDateTime creationDateTime;
        QString password;
    };

    struct phoneAuthenticationMethod : graph::authenticationMethod {
        QString phoneNumber;
        microsoft::graph::authenticationPhoneType phoneType;
        microsoft::graph::authenticationMethodSignInState smsSignInState;
    };

    struct temporaryAccessPassAuthenticationMethod : graph::authenticationMethod {
        QDateTime createdDateTime;
        bool isUsable;
        bool isUsableOnce;
        int lifetimeInMinutes;
        QString methodUsabilityReason;
        QDateTime startDateTime;
        QString temporaryAccessPass;
    };

    struct changeNotificationEncryptedContent {
        QString data;
        QString dataKey;
        QString dataSignature;
        QString encryptionCertificateId;
        QString encryptionCertificateThumbprint;
    };

    struct resourceData {
    };

    struct acl {
        microsoft::graph::accessType accessType;
        microsoft::graph::identitySourceType identitySource;
        microsoft::graph::aclType type;
        QString value;
    };

    struct configuration {
        QList<QString> authorizedAppIds;
        QList<QString> authorizedApps;
    };

    struct externalItemContent {
        microsoft::graph::externalItemContentType type;
        QString value;
    };

    struct properties {
    };

    struct property {
        QList<QString> aliases;
        bool isQueryable;
        bool isRefinable;
        bool isRetrievable;
        bool isSearchable;
        QList<microsoft::graph::label> labels;
        QString name;
        microsoft::graph::propertyType type;
    };

    struct externalItem : graph::entity {
        QList<microsoft::graph::acl> acl;
        microsoft::graph::externalItemContent content;
        microsoft::graph::properties properties;
    };

    struct schema : graph::entity {
        QString baseType;
        QList<microsoft::graph::property> properties;
    };

    struct externalGroupMember : graph::entity {
        microsoft::graph::identitySourceType identitySource;
        microsoft::graph::externalGroupMemberType type;
    };

    struct teamworkNotificationRecipient {
    };

    struct aadUserNotificationRecipient : graph::teamworkNotificationRecipient {
        QString userId;
    };

    struct eventMessageDetail {
    };

    struct callParticipantInfo {
        microsoft::graph::identitySet participant;
    };

    struct callRecordingEventMessageDetail : graph::eventMessageDetail {
        QString callId;
        QString callRecordingDisplayName;
        std::chrono::system_clock::duration callRecordingDuration;
        microsoft::graph::callRecordingStatus callRecordingStatus;
        QString callRecordingUrl;
        microsoft::graph::identitySet initiator;
        microsoft::graph::identitySet meetingOrganizer;
    };

    struct callStartedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::teamworkCallEventType callEventType;
        QString callId;
        microsoft::graph::identitySet initiator;
    };

    struct callTranscriptEventMessageDetail : graph::eventMessageDetail {
        QString callId;
        QString callTranscriptICalUid;
        microsoft::graph::identitySet meetingOrganizer;
    };

    struct channelAddedEventMessageDetail : graph::eventMessageDetail {
        QString channelDisplayName;
        QString channelId;
        microsoft::graph::identitySet initiator;
    };

    struct channelDeletedEventMessageDetail : graph::eventMessageDetail {
        QString channelDisplayName;
        QString channelId;
        microsoft::graph::identitySet initiator;
    };

    struct channelDescriptionUpdatedEventMessageDetail : graph::eventMessageDetail {
        QString channelDescription;
        QString channelId;
        microsoft::graph::identitySet initiator;
    };

    struct channelIdentity {
        QString channelId;
        QString teamId;
    };

    struct channelMembersNotificationRecipient : graph::teamworkNotificationRecipient {
        QString channelId;
        QString teamId;
    };

    struct channelModerationSettings {
        bool allowNewMessageFromBots;
        bool allowNewMessageFromConnectors;
        microsoft::graph::replyRestriction replyRestriction;
        microsoft::graph::userNewMessageRestriction userNewMessageRestriction;
    };

    struct channelRenamedEventMessageDetail : graph::eventMessageDetail {
        QString channelDisplayName;
        QString channelId;
        microsoft::graph::identitySet initiator;
    };

    struct channelSetAsFavoriteByDefaultEventMessageDetail : graph::eventMessageDetail {
        QString channelId;
        microsoft::graph::identitySet initiator;
    };

    struct channelUnsetAsFavoriteByDefaultEventMessageDetail : graph::eventMessageDetail {
        QString channelId;
        microsoft::graph::identitySet initiator;
    };

    struct chatMembersNotificationRecipient : graph::teamworkNotificationRecipient {
        QString chatId;
    };

    struct chatMessageAttachment {
        QString content;
        QString contentType;
        QString contentUrl;
        QString id;
        QString name;
        QString thumbnailUrl;
    };

    struct chatMessageFromIdentitySet : graph::identitySet {
    };

    struct teamworkConversationIdentity : graph::identity {
        microsoft::graph::teamworkConversationIdentityType conversationIdentityType;
    };

    struct teamworkTagIdentity : graph::identity {
    };

    struct chatMessagePolicyViolationPolicyTip {
        QString complianceUrl;
        QString generalText;
        QList<QString> matchedConditionDescriptions;
    };

    struct chatMessageReactionIdentitySet : graph::identitySet {
    };

    struct chatRenamedEventMessageDetail : graph::eventMessageDetail {
        QString chatDisplayName;
        QString chatId;
        microsoft::graph::identitySet initiator;
    };

    struct chatViewpoint {
        QDateTime lastMessageReadDateTime;
    };

    struct teamworkUserIdentity : graph::identity {
        microsoft::graph::teamworkUserIdentityType userIdentityType;
    };

    struct meetingPolicyUpdatedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        bool meetingChatEnabled;
        QString meetingChatId;
    };

    struct membersAddedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QList<microsoft::graph::teamworkUserIdentity> members;
        QDateTime visibleHistoryStartDateTime;
    };

    struct membersDeletedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QList<microsoft::graph::teamworkUserIdentity> members;
    };

    struct membersJoinedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QList<microsoft::graph::teamworkUserIdentity> members;
    };

    struct membersLeftEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QList<microsoft::graph::teamworkUserIdentity> members;
    };

    struct operationError {
        QString code;
        QString message;
    };

    struct provisionChannelEmailResult {
        QString email;
    };

    struct tabUpdatedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString tabId;
    };

    struct teamArchivedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamId;
    };

    struct teamClassSettings {
        bool notifyGuardiansAboutAssignments;
    };

    struct teamCreatedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamDescription;
        QString teamDisplayName;
        QString teamId;
    };

    struct teamDescriptionUpdatedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamDescription;
        QString teamId;
    };

    struct teamJoiningDisabledEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamId;
    };

    struct teamJoiningEnabledEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamId;
    };

    struct teamMembersNotificationRecipient : graph::teamworkNotificationRecipient {
        QString teamId;
    };

    struct teamRenamedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamDisplayName;
        QString teamId;
    };

    struct teamsAppInstalledEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamsAppDisplayName;
        QString teamsAppId;
    };

    struct teamsAppRemovedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamsAppDisplayName;
        QString teamsAppId;
    };

    struct teamsAppUpgradedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamsAppDisplayName;
        QString teamsAppId;
    };

    struct teamsTabConfiguration {
        QString contentUrl;
        QString entityId;
        QString removeUrl;
        QString websiteUrl;
    };

    struct teamUnarchivedEventMessageDetail : graph::eventMessageDetail {
        microsoft::graph::identitySet initiator;
        QString teamId;
    };

    struct teamworkActivityTopic {
        microsoft::graph::teamworkActivityTopicSource source;
        QString value;
        QString webUrl;
    };

    struct teamworkApplicationIdentity : graph::identity {
        microsoft::graph::teamworkApplicationIdentityType applicationIdentityType;
    };

    struct teamworkOnlineMeetingInfo {
        QString calendarEventId;
        QString joinWebUrl;
        microsoft::graph::teamworkUserIdentity organizer;
    };

    struct chatMessageInfo : graph::entity {
        microsoft::graph::itemBody body;
        QDateTime createdDateTime;
        microsoft::graph::eventMessageDetail eventDetail;
        microsoft::graph::chatMessageFromIdentitySet from;
        bool isDeleted;
        microsoft::graph::chatMessageType messageType;
    };

    struct teamworkHostedContent : graph::entity {
        QByteArray contentBytes;
        QString contentType;
    };

    struct chatMessageHostedContent : graph::teamworkHostedContent {
    };

    struct teamworkBot : graph::entity {
    };

    struct teamsAppIcon : graph::entity {
        QString webUrl;
        std::unique_ptr<microsoft::graph::teamworkHostedContent> hostedContent;
    };

    struct teamworkTagMember : graph::entity {
        QString displayName;
        QString tenantId;
        QString userId;
    };

    struct scheduleEntity {
        QDateTime endDateTime;
        QDateTime startDateTime;
        microsoft::graph::scheduleEntityTheme theme;
    };

    struct shiftActivity {
        QString code;
        QString displayName;
        QDateTime endDateTime;
        bool isPaid;
        QDateTime startDateTime;
        microsoft::graph::scheduleEntityTheme theme;
    };

    struct timeRange {
        QTime endTime;
        QTime startTime;
    };

    struct timeCardEvent {
        bool atApprovedLocation;
        QDateTime dateTime;
        microsoft::graph::itemBody notes;
    };

    struct timeClockSettings {
        microsoft::graph::geoCoordinates approvedLocation;
    };

    struct timeOffItem : graph::scheduleEntity {
        QString timeOffReasonId;
    };

    struct workforceIntegrationEncryption {
        microsoft::graph::workforceIntegrationEncryptionProtocol protocol;
        QString secret;
    };

    struct scheduleChangeRequest : graph::changeTrackedEntity {
        microsoft::graph::scheduleChangeRequestActor assignedTo;
        QDateTime managerActionDateTime;
        QString managerActionMessage;
        QString managerUserId;
        QDateTime senderDateTime;
        QString senderMessage;
        QString senderUserId;
        microsoft::graph::scheduleChangeState state;
    };

    struct offerShiftRequest : graph::scheduleChangeRequest {
        QDateTime recipientActionDateTime;
        QString recipientActionMessage;
        QString recipientUserId;
        QString senderShiftId;
    };

    struct openShiftChangeRequest : graph::scheduleChangeRequest {
        QString openShiftId;
    };

    struct schedulingGroup : graph::changeTrackedEntity {
        QString displayName;
        bool isActive;
        QList<QString> userIds;
    };

    struct swapShiftsChangeRequest : graph::offerShiftRequest {
        QString recipientShiftId;
    };

    struct timeOffReason : graph::changeTrackedEntity {
        QString displayName;
        microsoft::graph::timeOffReasonIconType iconType;
        bool isActive;
    };

    struct timeOffRequest : graph::scheduleChangeRequest {
        QDateTime endDateTime;
        QDateTime startDateTime;
        QString timeOffReasonId;
    };

    struct timeOff : graph::changeTrackedEntity {
        microsoft::graph::timeOffItem draftTimeOff;
        bool isStagedForDeletion;
        microsoft::graph::timeOffItem sharedTimeOff;
        QString userId;
    };

    struct threatAssessmentRequestsCount {
        long long count;
        QDateTime createdDateTime;
        QString pivotValue;
    };

    struct threatAssessmentResult : graph::entity {
        QDateTime createdDateTime;
        QString message;
        microsoft::graph::threatAssessmentResultType resultType;
    };

    struct linkedResource : graph::entity {
        QString applicationName;
        QString displayName;
        QString externalId;
        QString webUrl;
    };

} // namespace microsoft::graph

namespace microsoft::graph::ediscovery {
    enum class additionalDataOptions {
        allVersions = 1,
        linkedFiles = 2,
        unknownFutureValue = 4,
    };

    enum class caseAction {
        contentExport = 0,
        applyTags = 1,
        convertToPdf = 2,
        index = 3,
        estimateStatistics = 4,
        addToReviewSet = 5,
        unknownFutureValue = 6,
    };

    enum class caseOperationStatus {
        notStarted = 0,
        submissionFailed = 1,
        running = 2,
        succeeded = 3,
        partiallySucceeded = 4,
        failed = 5,
    };

    enum class caseStatus {
        unknown = 0,
        active = 1,
        pendingDelete = 2,
        closing = 3,
        closed = 4,
        closedWithError = 5,
    };

    enum class childSelectability {
        One = 0,
        Many = 1,
    };

    enum class custodianStatus {
        active = 1,
        released = 2,
    };

    enum class dataSourceContainerStatus {
        Active = 1,
        Released = 2,
        UnknownFutureValue = 3,
    };

    enum class dataSourceScopes {
        none = 0,
        allTenantMailboxes = 1,
        allTenantSites = 2,
        allCaseCustodians = 4,
        allCaseNoncustodialDataSources = 8,
        unknownFutureValue = 16,
    };

    enum class exportFileStructure {
        none = 0,
        directory = 1,
        pst = 2,
        unknownFutureValue = 3,
    };

    enum class exportOptions {
        originalFiles = 1,
        text = 2,
        pdfReplacement = 4,
        fileInfo = 8,
        tags = 16,
        unknownFutureValue = 32,
    };

    enum class legalHoldStatus {
        Pending = 0,
        Error = 1,
        Success = 2,
        UnknownFutureValue = 3,
    };

    enum class sourceType {
        mailbox = 1,
        site = 2,
    };

    struct ocrSettings {
        bool isEnabled;
        int maxImageSize;
        std::chrono::system_clock::duration timeout;
    };

    struct redundancyDetectionSettings {
        bool isEnabled;
        int maxWords;
        int minWords;
        int similarityThreshold;
    };

    struct topicModelingSettings {
        bool dynamicallyAdjustTopicCount;
        bool ignoreNumbers;
        bool isEnabled;
        int topicCount;
    };

    struct caseOperation : graph::entity {
        microsoft::graph::ediscovery::caseAction action;
        QDateTime completedDateTime;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        int percentProgress;
        microsoft::graph::resultInfo resultInfo;
        microsoft::graph::ediscovery::caseOperationStatus status;
    };

    struct settings : graph::entity {
        microsoft::graph::ediscovery::ocrSettings ocr;
        microsoft::graph::ediscovery::redundancyDetectionSettings redundancyDetection;
        microsoft::graph::ediscovery::topicModelingSettings topicModeling;
    };

    struct tag : graph::entity {
        microsoft::graph::ediscovery::childSelectability childSelectability;
        microsoft::graph::identitySet createdBy;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::ediscovery::tag> childTags;
        std::unique_ptr<microsoft::graph::ediscovery::tag> parent;
    };

    struct caseIndexOperation : microsoft::graph::ediscovery::caseOperation {
    };

    struct dataSource : graph::entity {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString displayName;
    };

    struct userSource : microsoft::graph::ediscovery::dataSource {
        QString email;
        microsoft::graph::ediscovery::sourceType includedSources;
    };

    struct reviewSetQuery : graph::entity {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString displayName;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString query;
    };

    struct tagOperation : microsoft::graph::ediscovery::caseOperation {
    };

} // namespace microsoft::graph::ediscovery

namespace microsoft::graph::termStore {
    enum class relationType {
        pin = 0,
        reuse = 1,
    };

    enum class termGroupScope {
        global = 0,
        system = 1,
        siteCollection = 2,
    };

    struct localizedDescription {
        QString description;
        QString languageTag;
    };

    struct localizedLabel {
        bool isDefault;
        QString languageTag;
        QString name;
    };

    struct localizedName {
        QString languageTag;
        QString name;
    };

} // namespace microsoft::graph::termStore

namespace microsoft::graph::callRecords {
    enum class callType {
        unknown = 0,
        groupCall = 1,
        peerToPeer = 2,
        unknownFutureValue = 3,
    };

    enum class clientPlatform {
        unknown = 0,
        windows = 1,
        macOS = 2,
        iOS = 3,
        android = 4,
        web = 5,
        ipPhone = 6,
        roomSystem = 7,
        surfaceHub = 8,
        holoLens = 9,
        unknownFutureValue = 10,
    };

    enum class failureStage {
        unknown = 0,
        callSetup = 1,
        midcall = 2,
        unknownFutureValue = 3,
    };

    enum class mediaStreamDirection {
        callerToCallee = 0,
        calleeToCaller = 1,
    };

    enum class modality {
        audio = 0,
        video = 1,
        videoBasedScreenSharing = 2,
        data = 3,
        screenSharing = 4,
        unknownFutureValue = 5,
    };

    enum class networkConnectionType {
        unknown = 0,
        wired = 1,
        wifi = 2,
        mobile = 3,
        tunnel = 4,
        unknownFutureValue = 5,
    };

    enum class productFamily {
        unknown = 0,
        teams = 1,
        skypeForBusiness = 2,
        lync = 3,
        unknownFutureValue = 4,
    };

    enum class pstnCallDurationSource {
        microsoft = 0,
        _operator = 1,
    };

    enum class serviceRole {
        unknown = 0,
        customBot = 1,
        skypeForBusinessMicrosoftTeamsGateway = 2,
        skypeForBusinessAudioVideoMcu = 3,
        skypeForBusinessApplicationSharingMcu = 4,
        skypeForBusinessCallQueues = 5,
        skypeForBusinessAutoAttendant = 6,
        mediationServer = 7,
        mediationServerCloudConnectorEdition = 8,
        exchangeUnifiedMessagingService = 9,
        mediaController = 10,
        conferencingAnnouncementService = 11,
        conferencingAttendant = 12,
        audioTeleconferencerController = 13,
        skypeForBusinessUnifiedCommunicationApplicationPlatform = 14,
        responseGroupServiceAnnouncementService = 15,
        gateway = 16,
        skypeTranslator = 17,
        skypeForBusinessAttendant = 18,
        responseGroupService = 19,
        voicemail = 20,
        unknownFutureValue = 21,
    };

    enum class userFeedbackRating {
        notRated = 0,
        bad = 1,
        poor = 2,
        fair = 3,
        good = 4,
        excellent = 5,
        unknownFutureValue = 6,
    };

    enum class wifiBand {
        unknown = 0,
        frequency24GHz = 1,
        frequency50GHz = 2,
        frequency60GHz = 3,
        unknownFutureValue = 4,
    };

    enum class wifiRadioType {
        unknown = 0,
        wifi80211a = 1,
        wifi80211b = 2,
        wifi80211g = 3,
        wifi80211n = 4,
        wifi80211ac = 5,
        wifi80211ax = 6,
        unknownFutureValue = 7,
    };

    struct userAgent {
        QString applicationVersion;
        QString headerValue;
    };

    struct clientUserAgent : microsoft::graph::callRecords::userAgent {
        microsoft::graph::callRecords::clientPlatform platform;
        microsoft::graph::callRecords::productFamily productFamily;
    };

    struct deviceInfo {
        QString captureDeviceDriver;
        QString captureDeviceName;
        float captureNotFunctioningEventRatio;
        float cpuInsufficentEventRatio;
        float deviceClippingEventRatio;
        float deviceGlitchEventRatio;
        int howlingEventCount;
        float initialSignalLevelRootMeanSquare;
        float lowSpeechLevelEventRatio;
        float lowSpeechToNoiseEventRatio;
        float micGlitchRate;
        int receivedNoiseLevel;
        int receivedSignalLevel;
        QString renderDeviceDriver;
        QString renderDeviceName;
        float renderMuteEventRatio;
        float renderNotFunctioningEventRatio;
        float renderZeroVolumeEventRatio;
        int sentNoiseLevel;
        int sentSignalLevel;
        float speakerGlitchRate;
    };

    struct directRoutingLogRow {
        QString calleeNumber;
        int callEndSubReason;
        QString callerNumber;
        QString callType;
        QString correlationId;
        int duration;
        QDateTime endDateTime;
        QDateTime failureDateTime;
        int finalSipCode;
        QString finalSipCodePhrase;
        QString id;
        QDateTime inviteDateTime;
        bool mediaBypassEnabled;
        QString mediaPathLocation;
        QString signalingLocation;
        QDateTime startDateTime;
        bool successfulCall;
        QString trunkFullyQualifiedDomainName;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct endpoint {
        microsoft::graph::callRecords::userAgent userAgent;
    };

    struct failureInfo {
        QString reason;
        microsoft::graph::callRecords::failureStage stage;
    };

    struct feedbackTokenSet {
    };

    struct networkInfo {
        float bandwidthLowEventRatio;
        QString basicServiceSetIdentifier;
        microsoft::graph::callRecords::networkConnectionType connectionType;
        float delayEventRatio;
        QString dnsSuffix;
        QString ipAddress;
        long long linkSpeed;
        QString macAddress;
        int port;
        float receivedQualityEventRatio;
        QString reflexiveIPAddress;
        QString relayIPAddress;
        int relayPort;
        float sentQualityEventRatio;
        QString subnet;
        microsoft::graph::callRecords::wifiBand wifiBand;
        int wifiBatteryCharge;
        int wifiChannel;
        QString wifiMicrosoftDriver;
        QString wifiMicrosoftDriverVersion;
        microsoft::graph::callRecords::wifiRadioType wifiRadioType;
        int wifiSignalStrength;
        QString wifiVendorDriver;
        QString wifiVendorDriverVersion;
    };

    struct mediaStream {
        float averageAudioDegradation;
        std::chrono::system_clock::duration averageAudioNetworkJitter;
        long long averageBandwidthEstimate;
        std::chrono::system_clock::duration averageJitter;
        float averagePacketLossRate;
        float averageRatioOfConcealedSamples;
        float averageReceivedFrameRate;
        std::chrono::system_clock::duration averageRoundTripTime;
        float averageVideoFrameLossPercentage;
        float averageVideoFrameRate;
        float averageVideoPacketLossRate;
        QDateTime endDateTime;
        float lowFrameRateRatio;
        float lowVideoProcessingCapabilityRatio;
        std::chrono::system_clock::duration maxAudioNetworkJitter;
        std::chrono::system_clock::duration maxJitter;
        float maxPacketLossRate;
        float maxRatioOfConcealedSamples;
        std::chrono::system_clock::duration maxRoundTripTime;
        long long packetUtilization;
        float postForwardErrorCorrectionPacketLossRate;
        QDateTime startDateTime;
        microsoft::graph::callRecords::mediaStreamDirection streamDirection;
        QString streamId;
        bool wasMediaBypassed;
    };

    struct userFeedback {
        microsoft::graph::callRecords::userFeedbackRating rating;
        QString text;
        microsoft::graph::callRecords::feedbackTokenSet tokens;
    };

    struct pstnCallLogRow {
        microsoft::graph::callRecords::pstnCallDurationSource callDurationSource;
        QString calleeNumber;
        QString callerNumber;
        QString callId;
        QString callType;
        double charge;
        QString conferenceId;
        double connectionCharge;
        QString currency;
        QString destinationContext;
        QString destinationName;
        int duration;
        QDateTime endDateTime;
        QString id;
        QString inventoryType;
        QString licenseCapability;
        QString _operator;
        QDateTime startDateTime;
        QString tenantCountryCode;
        QString usageCountryCode;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct serviceEndpoint : microsoft::graph::callRecords::endpoint {
    };

    struct serviceUserAgent : microsoft::graph::callRecords::userAgent {
        microsoft::graph::callRecords::serviceRole role;
    };

} // namespace microsoft::graph::callRecords

namespace microsoft::graph::managedTenants {
    enum class delegatedPrivilegeStatus {
        none = 0,
        delegatedAdminPrivileges = 1,
        unknownFutureValue = 2,
    };

    enum class managementActionStatus {
        toAddress = 0,
        completed = 5,
        error = 10,
        timeOut = 15,
        inProgress = 20,
        planned = 25,
        resolvedBy3rdParty = 30,
        resolvedThroughAlternateMitigation = 35,
        riskAccepted = 40,
        unknownFutureValue = 45,
    };

    enum class managementCategory {
        custom = 0,
        devices = 1,
        identity = 2,
        unknownFutureValue = 3,
    };

    enum class managementParameterValueType {
        string = 0,
        integer = 1,
        boolean = 2,
        guid = 3,
        stringCollection = 4,
        integerCollection = 5,
        booleanCollection = 6,
        guidCollection = 7,
        unknownFutureValue = 8,
    };

    enum class tenantOnboardingStatus {
        ineligible = 0,
        inProcess = 1,
        active = 2,
        inactive = 3,
        unknownFutureValue = 4,
    };

    enum class workloadActionCategory {
        automated = 0,
        manual = 1,
        unknownFutureValue = 2,
    };

    enum class workloadActionStatus {
        toAddress = 0,
        completed = 5,
        error = 10,
        timeOut = 15,
        inProgress = 20,
        unknownFutureValue = 25,
    };

    enum class workloadOnboardingStatus {
        notOnboarded = 0,
        onboarded = 1,
        unknownFutureValue = 2,
    };

    struct aggregatedPolicyCompliance : graph::entity {
        QString compliancePolicyId;
        QString compliancePolicyName;
        QString compliancePolicyPlatform;
        QString compliancePolicyType;
        QDateTime lastRefreshedDateTime;
        long long numberOfCompliantDevices;
        long long numberOfErrorDevices;
        long long numberOfNonCompliantDevices;
        QDateTime policyModifiedDateTime;
        QString tenantDisplayName;
        QString tenantId;
    };

    struct cloudPcConnection : graph::entity {
        QString displayName;
        QString healthCheckStatus;
        QDateTime lastRefreshedDateTime;
        QString tenantDisplayName;
        QString tenantId;
    };

    struct cloudPcDevice : graph::entity {
        QString cloudPcStatus;
        QString displayName;
        QDateTime lastRefreshedDateTime;
        QString managedDeviceId;
        QString managedDeviceName;
        QString provisioningPolicyId;
        QString servicePlanName;
        QString tenantDisplayName;
        QString tenantId;
        QString userPrincipalName;
    };

    struct cloudPcOverview {
        QDateTime lastRefreshedDateTime;
        int numberOfCloudPcConnectionStatusFailed;
        int numberOfCloudPcConnectionStatusPassed;
        int numberOfCloudPcConnectionStatusPending;
        int numberOfCloudPcConnectionStatusRunning;
        int numberOfCloudPcConnectionStatusUnkownFutureValue;
        int numberOfCloudPcStatusDeprovisioning;
        int numberOfCloudPcStatusFailed;
        int numberOfCloudPcStatusInGracePeriod;
        int numberOfCloudPcStatusNotProvisioned;
        int numberOfCloudPcStatusProvisioned;
        int numberOfCloudPcStatusProvisioning;
        int numberOfCloudPcStatusUnknown;
        int numberOfCloudPcStatusUpgrading;
        QString tenantDisplayName;
        QString tenantId;
        int totalCloudPcConnectionStatus;
        int totalCloudPcStatus;
    };

    struct conditionalAccessPolicyCoverage : graph::entity {
        QString conditionalAccessPolicyState;
        QDateTime latestPolicyModifiedDateTime;
        bool requiresDeviceCompliance;
        QString tenantDisplayName;
    };

    struct credentialUserRegistrationsSummary : graph::entity {
        QDateTime lastRefreshedDateTime;
        int mfaAndSsprCapableUserCount;
        QString mfaConditionalAccessPolicyState;
        int mfaRegisteredUserCount;
        bool securityDefaultsEnabled;
        int ssprEnabledUserCount;
        int ssprRegisteredUserCount;
        QString tenantDisplayName;
        QString tenantId;
        int totalUserCount;
    };

    struct deviceCompliancePolicySettingStateSummary : graph::entity {
        int conflictDeviceCount;
        int errorDeviceCount;
        int failedDeviceCount;
        QString intuneAccountId;
        QString intuneSettingId;
        QDateTime lastRefreshedDateTime;
        int notApplicableDeviceCount;
        int pendingDeviceCount;
        QString policyType;
        QString settingName;
        int succeededDeviceCount;
        QString tenantDisplayName;
        QString tenantId;
    };

    struct managedDeviceCompliance : graph::entity {
        QString complianceStatus;
        QString deviceType;
        QDateTime inGracePeriodUntilDateTime;
        QDateTime lastRefreshedDateTime;
        QDateTime lastSyncDateTime;
        QString managedDeviceId;
        QString managedDeviceName;
        QString manufacturer;
        QString model;
        QString osDescription;
        QString osVersion;
        QString ownerType;
        QString tenantDisplayName;
        QString tenantId;
    };

    struct managedDeviceComplianceTrend : graph::entity {
        int compliantDeviceCount;
        int configManagerDeviceCount;
        QString countDateTime;
        int errorDeviceCount;
        int inGracePeriodDeviceCount;
        int noncompliantDeviceCount;
        QString tenantDisplayName;
        QString tenantId;
        int unknownDeviceCount;
    };

    struct riskyUser : graph::entity {
        bool isDeleted;
        QDateTime lastRefreshedDateTime;
        QString riskDetail;
        QDateTime riskLastUpdatedDateTime;
        QString riskLevel;
        QString riskState;
        QString tenantDisplayName;
        QString tenantId;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
    };

    struct tenantDetailedInformation : graph::entity {
        QString city;
        QString countryCode;
        QString countryName;
        QString defaultDomainName;
        QString displayName;
        QString industryName;
        QString region;
        QString segmentName;
        QString tenantId;
        QString verticalName;
    };

    struct windowsDeviceMalwareState : graph::entity {
        QString additionalInformationUrl;
        int detectionCount;
        bool deviceDeleted;
        QDateTime initialDetectionDateTime;
        QDateTime lastRefreshedDateTime;
        QDateTime lastStateChangeDateTime;
        QString malwareCategory;
        QString malwareDisplayName;
        QString malwareExecutionState;
        QString malwareId;
        QString malwareSeverity;
        QString malwareThreatState;
        QString managedDeviceId;
        QString managedDeviceName;
        QString tenantDisplayName;
        QString tenantId;
    };

    struct windowsProtectionState : graph::entity {
        QString antiMalwareVersion;
        bool attentionRequired;
        bool deviceDeleted;
        QDateTime devicePropertyRefreshDateTime;
        QString engineVersion;
        bool fullScanOverdue;
        bool fullScanRequired;
        QDateTime lastFullScanDateTime;
        QString lastFullScanSignatureVersion;
        QDateTime lastQuickScanDateTime;
        QString lastQuickScanSignatureVersion;
        QDateTime lastRefreshedDateTime;
        QDateTime lastReportedDateTime;
        bool malwareProtectionEnabled;
        QString managedDeviceHealthState;
        QString managedDeviceId;
        QString managedDeviceName;
        bool networkInspectionSystemEnabled;
        bool quickScanOverdue;
        bool realTimeProtectionEnabled;
        bool rebootRequired;
        bool signatureUpdateOverdue;
        QString signatureVersion;
        QString tenantDisplayName;
        QString tenantId;
    };

    struct managedTenantOperationError {
        QString error;
        QString tenantId;
    };

    struct managedTenantExecutionError : microsoft::graph::managedTenants::managedTenantOperationError {
        QString errorDetails;
        int nodeId;
        QString rawToken;
        int statementIndex;
    };

    struct managedTenantGenericError : microsoft::graph::managedTenants::managedTenantOperationError {
    };

    struct workloadActionDeploymentStatus {
        QString actionId;
        QString deployedPolicyId;
        microsoft::graph::genericError error;
        QDateTime lastDeploymentDateTime;
        microsoft::graph::managedTenants::workloadActionStatus status;
    };

    struct managementActionInfo {
        QString managementActionId;
        QString managementTemplateId;
    };

    struct managementTemplateDetailedInfo {
        microsoft::graph::managedTenants::managementCategory category;
        QString displayName;
        QString managementTemplateId;
    };

    struct setting {
        QString displayName;
        QString jsonValue;
        bool overwriteAllowed;
        microsoft::graph::managedTenants::managementParameterValueType valueType;
    };

    struct templateParameter {
        QString description;
        QString displayName;
        QString jsonAllowedValues;
        QString jsonDefaultValue;
        microsoft::graph::managedTenants::managementParameterValueType valueType;
    };

    struct tenantContactInformation {
        QString email;
        QString name;
        QString notes;
        QString phone;
        QString title;
    };

    struct tenantContract {
        int contractType;
        QString defaultDomainName;
        QString displayName;
    };

    struct tenantInfo {
        QString tenantId;
    };

    struct workloadStatus {
        QString displayName;
        QDateTime offboardedDateTime;
        QDateTime onboardedDateTime;
        microsoft::graph::managedTenants::workloadOnboardingStatus onboardingStatus;
    };

    struct workloadAction {
        QString actionId;
        microsoft::graph::managedTenants::workloadActionCategory category;
        QString description;
        QString displayName;
        QString service;
        QList<microsoft::graph::managedTenants::setting> settings;
    };

} // namespace microsoft::graph::managedTenants

namespace microsoft::graph::search {
    enum class answerState {
        published = 0,
        draft = 1,
        excluded = 2,
        unknownFutureValue = 3,
    };

    struct answerKeyword {
        QList<QString> keywords;
        bool matchSimilarKeywords;
        QList<QString> reservedKeywords;
    };

    struct answerVariant {
        QString description;
        QString displayName;
        QString languageTag;
        microsoft::graph::devicePlatformType platform;
        QString webUrl;
    };

    struct identity {
        QString displayName;
        QString id;
    };

    struct identitySet {
        microsoft::graph::search::identity application;
        microsoft::graph::search::identity device;
        microsoft::graph::search::identity user;
    };

} // namespace microsoft::graph::search

namespace microsoft::graph::externalConnectors {
    enum class accessType {
        grant = 1,
        deny = 2,
        unknownFutureValue = 3,
    };

    enum class aclType {
        user = 1,
        group = 2,
        everyone = 3,
        everyoneExceptGuests = 4,
        externalGroup = 5,
        unknownFutureValue = 6,
    };

    enum class connectionOperationStatus {
        unspecified = 0,
        inprogress = 1,
        completed = 2,
        failed = 3,
        unknownFutureValue = 4,
    };

    enum class connectionState {
        draft = 1,
        ready = 2,
        obsolete = 3,
        limitExceeded = 4,
        unknownFutureValue = 5,
    };

    enum class externalGroupMemberType {
        user = 1,
        group = 2,
        unknownFutureValue = 3,
    };

    enum class externalItemContentType {
        text = 1,
        html = 2,
        unknownFutureValue = 3,
    };

    enum class identitySourceType {
        azureActiveDirectory = 1,
        external = 2,
        unknownFutureValue = 3,
    };

    enum class identityType {
        user = 1,
        group = 2,
        externalGroup = 3,
        unknownFutureValue = 4,
    };

    enum class label {
        title = 0,
        url = 1,
        createdBy = 2,
        lastModifiedBy = 3,
        authors = 4,
        createdDateTime = 5,
        lastModifiedDateTime = 6,
        fileName = 7,
        fileExtension = 8,
        unknownFutureValue = 9,
        iconUrl = 10,
        containerName = 11,
        containerUrl = 12,
    };

    enum class propertyType {
        string = 0,
        int64 = 1,
        _double = 2,
        dateTime = 3,
        boolean = 4,
        stringCollection = 5,
        int64Collection = 6,
        doubleCollection = 7,
        dateTimeCollection = 8,
        unknownFutureValue = 9,
    };

    enum class ruleOperation {
        null = 0,
        equals = 1,
        notEquals = 2,
        contains = 3,
        notContains = 4,
        lessThan = 5,
        greaterThan = 6,
        startsWith = 7,
        unknownFutureValue = 8,
    };

    struct acl {
        microsoft::graph::externalConnectors::accessType accessType;
        microsoft::graph::externalConnectors::identitySourceType identitySource;
        microsoft::graph::externalConnectors::aclType type;
        QString value;
    };

    struct configuration {
        QList<QString> authorizedAppIds;
    };

    struct propertyRule {
        microsoft::graph::externalConnectors::ruleOperation operation;
        QString property;
        QList<QString> values;
        microsoft::graph::binaryOperator valuesJoinedBy;
    };

    struct externalItemContent {
        microsoft::graph::externalConnectors::externalItemContentType type;
        QString value;
    };

    struct identity {
        QString id;
        microsoft::graph::externalConnectors::identityType type;
    };

    struct properties {
    };

    struct property {
        QList<QString> aliases;
        bool isQueryable;
        bool isRefinable;
        bool isRetrievable;
        bool isSearchable;
        QList<microsoft::graph::externalConnectors::label> labels;
        QString name;
        microsoft::graph::externalConnectors::propertyType type;
    };

    struct externalItem : graph::entity {
        QList<microsoft::graph::externalConnectors::acl> acl;
        microsoft::graph::externalConnectors::externalItemContent content;
        microsoft::graph::externalConnectors::properties properties;
    };

    struct schema : graph::entity {
        QString baseType;
        QList<microsoft::graph::externalConnectors::property> properties;
    };

    struct externalGroupMember : graph::entity {
        microsoft::graph::externalConnectors::identitySourceType identitySource;
        microsoft::graph::externalConnectors::externalGroupMemberType type;
    };

} // namespace microsoft::graph::externalConnectors

namespace microsoft::graph::windowsUpdates {
    enum class azureADDeviceRegistrationErrorReason {
        invalidGlobalDeviceId = 0,
        invalidAzureADDeviceId = 1,
        missingTrustType = 2,
        invalidAzureADJoin = 3,
        unknownFutureValue = 4,
    };

    enum class deploymentStateReasonValue {
        scheduledByOfferWindow = 0,
        offeringByRequest = 2,
        pausedByRequest = 3,
        pausedByMonitoring = 4,
        unknownFutureValue = 5,
    };

    enum class deploymentStateValue {
        scheduled = 0,
        offering = 1,
        paused = 2,
        faulted = 3,
        archived = 4,
        unknownFutureValue = 5,
    };

    enum class equivalentContentOption {
        none = 0,
        latestSecurity = 1,
        unknownFutureValue = 2,
    };

    enum class monitoringAction {
        alertError = 0,
        pauseDeployment = 3,
        unknownFutureValue = 4,
    };

    enum class monitoringSignal {
        rollback = 0,
        unknownFutureValue = 1,
    };

    enum class qualityUpdateClassification {
        all = 0,
        security = 1,
        nonSecurity = 2,
        unknownFutureValue = 3,
    };

    enum class requestedDeploymentStateValue {
        none = 0,
        paused = 1,
        archived = 2,
        unknownFutureValue = 3,
    };

    enum class updateCategory {
        feature = 0,
        quality = 1,
        unknownFutureValue = 2,
    };

    struct updatableAssetError {
    };

    struct azureADDeviceRegistrationError : microsoft::graph::windowsUpdates::updatableAssetError {
        microsoft::graph::windowsUpdates::azureADDeviceRegistrationErrorReason reason;
    };

    struct deployableContent {
    };

    struct rolloutSettings {
        int devicesPerOffer;
        QString durationBetweenOffers;
        QDateTime endDateTime;
        QDateTime startDateTime;
    };

    struct deploymentStateReason {
        microsoft::graph::windowsUpdates::deploymentStateReasonValue value;
    };

    struct softwareUpdateReference : microsoft::graph::windowsUpdates::deployableContent {
    };

    struct windowsUpdateReference : microsoft::graph::windowsUpdates::softwareUpdateReference {
    };

    struct qualityUpdateReference : microsoft::graph::windowsUpdates::windowsUpdateReference {
        microsoft::graph::windowsUpdates::qualityUpdateClassification classification;
        QDateTime releaseDateTime;
    };

    struct expeditedQualityUpdateReference : microsoft::graph::windowsUpdates::qualityUpdateReference {
        microsoft::graph::windowsUpdates::equivalentContentOption equivalentContent;
    };

    struct featureUpdateReference : microsoft::graph::windowsUpdates::windowsUpdateReference {
        QString version;
    };

    struct monitoringRule {
        microsoft::graph::windowsUpdates::monitoringAction action;
        microsoft::graph::windowsUpdates::monitoringSignal signal;
        int threshold;
    };

    struct updatableAssetEnrollment {
    };

    struct updateManagementEnrollment : microsoft::graph::windowsUpdates::updatableAssetEnrollment {
        microsoft::graph::windowsUpdates::updateCategory updateCategory;
    };

    struct userExperienceSettings {
        int daysUntilForcedReboot;
    };

    struct updatableAsset : graph::entity {
    };

    struct azureADDevice : microsoft::graph::windowsUpdates::updatableAsset {
        QList<microsoft::graph::windowsUpdates::updatableAssetEnrollment> enrollments;
        QList<microsoft::graph::windowsUpdates::updatableAssetError> errors;
    };

    struct catalogEntry : graph::entity {
        QDateTime deployableUntilDateTime;
        QString displayName;
        QDateTime releaseDateTime;
    };

    struct deploymentAudience : graph::entity {
        QList<microsoft::graph::windowsUpdates::updatableAsset> exclusions;
        QList<microsoft::graph::windowsUpdates::updatableAsset> members;
    };

    struct softwareUpdateCatalogEntry : microsoft::graph::windowsUpdates::catalogEntry {
    };

    struct featureUpdateCatalogEntry : microsoft::graph::windowsUpdates::softwareUpdateCatalogEntry {
        QString version;
    };

    struct qualityUpdateCatalogEntry : microsoft::graph::windowsUpdates::softwareUpdateCatalogEntry {
        bool isExpeditable;
        microsoft::graph::windowsUpdates::qualityUpdateClassification qualityUpdateClassification;
    };

    struct updatableAssetGroup : microsoft::graph::windowsUpdates::updatableAsset {
        QList<microsoft::graph::windowsUpdates::updatableAsset> members;
    };

} // namespace microsoft::graph::windowsUpdates

namespace microsoft::graph {
    struct appliedConditionalAccessPolicy {
        microsoft::graph::conditionalAccessConditions conditionsNotSatisfied;
        microsoft::graph::conditionalAccessConditions conditionsSatisfied;
        QString displayName;
        QList<QString> enforcedGrantControls;
        QList<QString> enforcedSessionControls;
        QList<microsoft::graph::conditionalAccessRuleSatisfied> excludeRulesSatisfied;
        QString id;
        QList<microsoft::graph::conditionalAccessRuleSatisfied> includeRulesSatisfied;
        microsoft::graph::appliedConditionalAccessPolicyResult result;
    };

    struct auditActivityInitiator {
        microsoft::graph::appIdentity app;
        microsoft::graph::userIdentity user;
    };

    struct directoryAudit : graph::entity {
        QDateTime activityDateTime;
        QString activityDisplayName;
        QList<microsoft::graph::keyValue> additionalDetails;
        QString category;
        QString correlationId;
        microsoft::graph::auditActivityInitiator initiatedBy;
        QString loggedByService;
        QString operationType;
        microsoft::graph::operationResult result;
        QString resultReason;
        QList<microsoft::graph::targetResource> targetResources;
    };

    struct signIn : graph::entity {
        QString alternateSignInName;
        QString appDisplayName;
        QString appId;
        QList<microsoft::graph::appliedConditionalAccessPolicy> appliedConditionalAccessPolicies;
        QList<microsoft::graph::authenticationDetail> authenticationDetails;
        QList<QString> authenticationMethodsUsed;
        QList<microsoft::graph::keyValue> authenticationProcessingDetails;
        QString authenticationRequirement;
        QList<microsoft::graph::authenticationRequirementPolicy> authenticationRequirementPolicies;
        int autonomousSystemNumber;
        QString clientAppUsed;
        microsoft::graph::conditionalAccessStatus conditionalAccessStatus;
        QString correlationId;
        QDateTime createdDateTime;
        microsoft::graph::signInAccessType crossTenantAccessType;
        microsoft::graph::deviceDetail deviceDetail;
        bool flaggedForReview;
        QString homeTenantId;
        QString ipAddress;
        QString ipAddressFromResourceProvider;
        bool isInteractive;
        bool isTenantRestricted;
        microsoft::graph::signInLocation location;
        microsoft::graph::mfaDetail mfaDetail;
        QList<microsoft::graph::networkLocationDetail> networkLocationDetails;
        QString originalRequestId;
        microsoft::graph::privateLinkDetails privateLinkDetails;
        int processingTimeInMilliseconds;
        QString resourceDisplayName;
        QString resourceId;
        QString resourceTenantId;
        microsoft::graph::riskDetail riskDetail;
        QList<microsoft::graph::riskEventType> riskEventTypes;
        QList<QString> riskEventTypes_v2;
        microsoft::graph::riskLevel riskLevelAggregated;
        microsoft::graph::riskLevel riskLevelDuringSignIn;
        microsoft::graph::riskState riskState;
        QString servicePrincipalCredentialKeyId;
        QString servicePrincipalCredentialThumbprint;
        QString servicePrincipalId;
        QString servicePrincipalName;
        QList<QString> signInEventTypes;
        QString signInIdentifier;
        microsoft::graph::signInIdentifierType signInIdentifierType;
        microsoft::graph::signInStatus status;
        QString tokenIssuerName;
        microsoft::graph::tokenIssuerType tokenIssuerType;
        QString userAgent;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
        microsoft::graph::signInUserType userType;
    };

    struct restrictedSignIn : graph::signIn {
        QUuid targetTenantId;
    };

    struct reportRoot : graph::entity {
        QList<microsoft::graph::applicationSignInDetailedSummary> applicationSignInDetailedSummary;
        std::unique_ptr<microsoft::graph::authenticationMethodsRoot> authenticationMethods;
        QList<microsoft::graph::credentialUserRegistrationDetails> credentialUserRegistrationDetails;
        QList<microsoft::graph::userCredentialUsageDetails> userCredentialUsageDetails;
        QList<microsoft::graph::printUsageByPrinter> dailyPrintUsageByPrinter;
        QList<microsoft::graph::printUsageByUser> dailyPrintUsageByUser;
        QList<microsoft::graph::printUsageByPrinter> dailyPrintUsageSummariesByPrinter;
        QList<microsoft::graph::printUsageByUser> dailyPrintUsageSummariesByUser;
        QList<microsoft::graph::printUsageByPrinter> monthlyPrintUsageByPrinter;
        QList<microsoft::graph::printUsageByUser> monthlyPrintUsageByUser;
        QList<microsoft::graph::printUsageByPrinter> monthlyPrintUsageSummariesByPrinter;
        QList<microsoft::graph::printUsageByUser> monthlyPrintUsageSummariesByUser;
    };

    struct userAnalytics : graph::entity {
        microsoft::graph::settings settings;
        QList<microsoft::graph::activityStatistics> activityStatistics;
    };

    struct licenseDetails : graph::entity {
        QList<microsoft::graph::servicePlanInfo> servicePlans;
        QUuid skuId;
        QString skuPartNumber;
    };

    struct mailboxSettings {
        QString archiveFolder;
        microsoft::graph::automaticRepliesSetting automaticRepliesSetting;
        QString dateFormat;
        microsoft::graph::delegateMeetingMessageDeliveryOptions delegateMeetingMessageDeliveryOptions;
        microsoft::graph::localeInfo language;
        QString timeFormat;
        QString timeZone;
        microsoft::graph::userPurpose userPurpose;
        microsoft::graph::mailboxRecipientType userPurposeV2;
        microsoft::graph::workingHours workingHours;
    };

    struct contact : graph::outlookItem {
        QString assistantName;
        QDateTime birthday;
        QList<QString> children;
        QString companyName;
        QString department;
        QString displayName;
        QList<microsoft::graph::typedEmailAddress> emailAddresses;
        QString fileAs;
        microsoft::graph::followupFlag flag;
        QString gender;
        QString generation;
        QString givenName;
        QList<QString> imAddresses;
        QString initials;
        bool isFavorite;
        QString jobTitle;
        QString manager;
        QString middleName;
        QString nickName;
        QString officeLocation;
        QString parentFolderId;
        QString personalNotes;
        QList<microsoft::graph::phone> phones;
        QList<microsoft::graph::physicalAddress> postalAddresses;
        QString profession;
        QString spouseName;
        QString surname;
        QString title;
        QList<microsoft::graph::website> websites;
        QDate weddingAnniversary;
        QString yomiCompanyName;
        QString yomiGivenName;
        QString yomiSurname;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        std::unique_ptr<microsoft::graph::profilePhoto> photo;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct inferenceClassification : graph::entity {
        QList<microsoft::graph::inferenceClassificationOverride> overrides;
    };

    struct message : graph::outlookItem {
        QList<microsoft::graph::recipient> bccRecipients;
        microsoft::graph::itemBody body;
        QString bodyPreview;
        QList<microsoft::graph::recipient> ccRecipients;
        QString conversationId;
        QByteArray conversationIndex;
        microsoft::graph::followupFlag flag;
        microsoft::graph::recipient from;
        bool hasAttachments;
        microsoft::graph::importance importance;
        microsoft::graph::inferenceClassificationType inferenceClassification;
        QList<microsoft::graph::internetMessageHeader> internetMessageHeaders;
        QString internetMessageId;
        bool isDeliveryReceiptRequested;
        bool isDraft;
        bool isRead;
        bool isReadReceiptRequested;
        microsoft::graph::mentionsPreview mentionsPreview;
        QString parentFolderId;
        QDateTime receivedDateTime;
        QList<microsoft::graph::recipient> replyTo;
        microsoft::graph::recipient sender;
        QDateTime sentDateTime;
        QString subject;
        QList<microsoft::graph::recipient> toRecipients;
        microsoft::graph::itemBody uniqueBody;
        QList<QString> unsubscribeData;
        bool unsubscribeEnabled;
        QString webLink;
        QList<microsoft::graph::attachment> attachments;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::mention> mentions;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct approval : graph::entity {
        std::unique_ptr<microsoft::graph::request> request;
        QList<microsoft::graph::approvalStep> steps;
    };

    struct deviceEnrollmentConfiguration : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        int priority;
        QList<QString> roleScopeTagIds;
        int version;
        QList<microsoft::graph::enrollmentConfigurationAssignment> assignments;
    };

    struct managedAppRegistration : graph::entity {
        microsoft::graph::mobileAppIdentifier appIdentifier;
        QString applicationVersion;
        QString azureADDeviceId;
        QDateTime createdDateTime;
        QString deviceManufacturer;
        QString deviceModel;
        QString deviceName;
        QString deviceTag;
        QString deviceType;
        QList<microsoft::graph::managedAppFlaggedReason> flaggedReasons;
        QDateTime lastSyncDateTime;
        QString managedDeviceId;
        QString managementSdkVersion;
        QString platformVersion;
        QString userId;
        QString version;
        QList<microsoft::graph::managedAppPolicy> appliedPolicies;
        QList<microsoft::graph::managedAppPolicy> intendedPolicies;
        QList<microsoft::graph::managedAppOperation> operations;
    };

    struct officeGraphInsights : graph::entity {
        QList<microsoft::graph::sharedInsight> shared;
        QList<microsoft::graph::trending> trending;
        QList<microsoft::graph::usedInsight> used;
    };

    struct itemInsights : graph::officeGraphInsights {
    };

    struct profile : graph::entity {
        QList<microsoft::graph::userAccountInformation> account;
        QList<microsoft::graph::itemAddress> addresses;
        QList<microsoft::graph::personAnnualEvent> anniversaries;
        QList<microsoft::graph::personAward> awards;
        QList<microsoft::graph::personCertification> certifications;
        QList<microsoft::graph::educationalActivity> educationalActivities;
        QList<microsoft::graph::itemEmail> emails;
        QList<microsoft::graph::personInterest> interests;
        QList<microsoft::graph::languageProficiency> languages;
        QList<microsoft::graph::personName> names;
        QList<microsoft::graph::personAnnotation> notes;
        QList<microsoft::graph::itemPatent> patents;
        QList<microsoft::graph::itemPhone> phones;
        QList<microsoft::graph::workPosition> positions;
        QList<microsoft::graph::projectParticipation> projects;
        QList<microsoft::graph::itemPublication> publications;
        QList<microsoft::graph::skillProficiency> skills;
        QList<microsoft::graph::webAccount> webAccounts;
        QList<microsoft::graph::personWebsite> websites;
    };

    struct onlineMeeting : graph::entity {
        microsoft::graph::accessLevel accessLevel;
        bool allowAttendeeToEnableCamera;
        bool allowAttendeeToEnableMic;
        microsoft::graph::onlineMeetingPresenters allowedPresenters;
        microsoft::graph::meetingChatMode allowMeetingChat;
        bool allowTeamworkReactions;
        QByteArray alternativeRecording;
        QByteArray attendeeReport;
        microsoft::graph::audioConferencing audioConferencing;
        microsoft::graph::broadcastMeetingSettings broadcastSettings;
        QDateTime canceledDateTime;
        QList<microsoft::graph::meetingCapabilities> capabilities;
        microsoft::graph::chatInfo chatInfo;
        QDateTime creationDateTime;
        QDateTime endDateTime;
        bool entryExitAnnouncement;
        QDateTime expirationDateTime;
        QString externalId;
        bool isBroadcast;
        bool isCancelled;
        bool isEntryExitAnnounced;
        microsoft::graph::itemBody joinInformation;
        QString joinUrl;
        microsoft::graph::lobbyBypassSettings lobbyBypassSettings;
        microsoft::graph::meetingParticipants participants;
        bool recordAutomatically;
        QByteArray recording;
        QDateTime startDateTime;
        QString subject;
        QString videoTeleconferenceId;
        std::unique_ptr<microsoft::graph::meetingAttendanceReport> meetingAttendanceReport;
    };

    struct presence : graph::entity {
        QString activity;
        QString availability;
        microsoft::graph::outOfOfficeSettings outOfOfficeSettings;
    };

    struct invitedUserMessageInfo {
        QList<microsoft::graph::recipient> ccRecipients;
        QString customizedMessageBody;
        QString messageLanguage;
    };

    struct apiApplication {
        bool acceptMappedClaims;
        QList<QUuid> knownClientApplications;
        QList<microsoft::graph::permissionScope> oauth2PermissionScopes;
        QList<microsoft::graph::preAuthorizedApplication> preAuthorizedApplications;
        int requestedAccessTokenVersion;
    };

    struct optionalClaims {
        QList<microsoft::graph::optionalClaim> accessToken;
        QList<microsoft::graph::optionalClaim> idToken;
        QList<microsoft::graph::optionalClaim> saml2Token;
    };

    struct requiredResourceAccess {
        QList<microsoft::graph::resourceAccess> resourceAccess;
        QString resourceAppId;
    };

    struct webApplication {
        QString homePageUrl;
        microsoft::graph::implicitGrantSettings implicitGrantSettings;
        QString logoutUrl;
        bool oauth2AllowImplicitFlow;
        QList<QString> redirectUris;
        QList<microsoft::graph::redirectUriSettings> redirectUriSettings;
    };

    struct onPremisesPublishing {
        QString alternateUrl;
        QString applicationServerTimeout;
        QString applicationType;
        microsoft::graph::externalAuthenticationType externalAuthenticationType;
        QString externalUrl;
        QString internalUrl;
        bool isBackendCertificateValidationEnabled;
        bool isHttpOnlyCookieEnabled;
        bool isOnPremPublishingEnabled;
        bool isPersistentCookieEnabled;
        bool isSecureCookieEnabled;
        bool isTranslateHostHeaderEnabled;
        bool isTranslateLinksInBodyEnabled;
        microsoft::graph::onPremisesPublishingSingleSignOn singleSignOnSettings;
        bool useAlternateUrlForTranslationAndRedirect;
        microsoft::graph::verifiedCustomDomainCertificatesMetadata verifiedCustomDomainCertificatesMetadata;
        microsoft::graph::keyCredential verifiedCustomDomainKeyCredential;
        microsoft::graph::passwordCredential verifiedCustomDomainPasswordCredential;
    };

    struct authenticationMethodsRegistrationCampaign {
        QList<microsoft::graph::excludeTarget> excludeTargets;
        QList<microsoft::graph::authenticationMethodsRegistrationCampaignIncludeTarget> includeTargets;
        int snoozeDurationInDays;
        microsoft::graph::advancedConfigState state;
    };

    struct registrationEnforcement {
        microsoft::graph::authenticationMethodsRegistrationCampaign authenticationMethodsRegistrationCampaign;
    };

    struct authenticationMethodsPolicy : graph::entity {
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString policyVersion;
        int reconfirmationInDays;
        microsoft::graph::registrationEnforcement registrationEnforcement;
        QList<microsoft::graph::authenticationMethodConfiguration> authenticationMethodConfigurations;
    };

    struct microsoftAuthenticatorAuthenticationMethodConfiguration : graph::authenticationMethodConfiguration {
        QList<microsoft::graph::microsoftAuthenticatorAuthenticationMethodTarget> includeTargets;
    };

    struct authenticationFlowsPolicy : graph::entity {
        QString description;
        QString displayName;
        microsoft::graph::selfServiceSignUpAuthenticationFlowConfiguration selfServiceSignUp;
    };

    struct authorizationPolicy : graph::policyBase {
        bool allowedToSignUpEmailBasedSubscriptions;
        bool allowedToUseSSPR;
        bool allowEmailVerifiedUsersToJoinOrganization;
        microsoft::graph::allowInvitesFrom allowInvitesFrom;
        bool blockMsolPowerShell;
        microsoft::graph::defaultUserRolePermissions defaultUserRolePermissions;
        QList<QString> enabledPreviewFeatures;
        QUuid guestUserRoleId;
        QList<QString> permissionGrantPolicyIdsAssignedToDefaultUserRole;
    };

    struct permissionGrantPolicy : graph::policyBase {
        QList<microsoft::graph::permissionGrantConditionSet> excludes;
        QList<microsoft::graph::permissionGrantConditionSet> includes;
    };

    struct adminConsentRequestPolicy : graph::entity {
        bool isEnabled;
        bool notifyReviewers;
        bool remindersEnabled;
        int requestDurationInDays;
        QList<microsoft::graph::accessReviewReviewerScope> reviewers;
        int version;
    };

    struct unifiedRoleManagementPolicy : graph::entity {
        QString description;
        QString displayName;
        bool isOrganizationDefault;
        microsoft::graph::identity lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString scopeId;
        QString scopeType;
        QList<microsoft::graph::unifiedRoleManagementPolicyRule> effectiveRules;
        QList<microsoft::graph::unifiedRoleManagementPolicyRule> rules;
    };

    struct unifiedRoleManagementPolicyAssignment : graph::entity {
        QString policyId;
        QString roleDefinitionId;
        QString scopeId;
        QString scopeType;
        std::unique_ptr<microsoft::graph::unifiedRoleManagementPolicy> policy;
    };

    struct smsAuthenticationMethodConfiguration : graph::authenticationMethodConfiguration {
        QList<microsoft::graph::smsAuthenticationMethodTarget> includeTargets;
    };

    struct bitlocker : graph::entity {
        QList<microsoft::graph::bitlockerRecoveryKey> recoveryKeys;
    };

    struct sensitivityLabel : graph::entity {
        microsoft::graph::sensitivityLabelTarget applicableTo;
        microsoft::graph::applicationMode applicationMode;
        QList<microsoft::graph::labelPolicy> assignedPolicies;
        microsoft::graph::autoLabeling autoLabeling;
        QString description;
        QString displayName;
        bool isDefault;
        bool isEndpointProtectionEnabled;
        QList<microsoft::graph::labelActionBase> labelActions;
        QString name;
        int priority;
        QString toolTip;
        QList<microsoft::graph::sensitivityLabel> sublabels;
    };

    struct informationProtectionPolicy : graph::entity {
        QList<microsoft::graph::informationProtectionLabel> labels;
    };

    struct threatAssessmentRequest : graph::entity {
        microsoft::graph::threatCategory category;
        microsoft::graph::threatAssessmentContentType contentType;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::threatExpectedAssessment expectedAssessment;
        microsoft::graph::threatAssessmentRequestSource requestSource;
        microsoft::graph::threatAssessmentStatus status;
        QList<microsoft::graph::threatAssessmentResult> results;
    };

    struct bookingWorkHours {
        microsoft::graph::dayOfWeek day;
        QList<microsoft::graph::bookingWorkTimeSlot> timeSlots;
    };

    struct location {
        microsoft::graph::physicalAddress address;
        microsoft::graph::outlookGeoCoordinates coordinates;
        QString displayName;
        QString locationEmailAddress;
        microsoft::graph::locationType locationType;
        QString locationUri;
        QString uniqueId;
        microsoft::graph::locationUniqueIdType uniqueIdType;
    };

    struct bookingAppointment : graph::entity {
        QString additionalInformation;
        QString customerEmailAddress;
        QString customerId;
        microsoft::graph::location customerLocation;
        QString customerName;
        QString customerNotes;
        QString customerPhone;
        std::chrono::system_clock::duration duration;
        microsoft::graph::dateTimeTimeZone end;
        double invoiceAmount;
        microsoft::graph::dateTimeTimeZone invoiceDate;
        QString invoiceId;
        microsoft::graph::bookingInvoiceStatus invoiceStatus;
        QString invoiceUrl;
        bool isLocationOnline;
        QString onlineMeetingUrl;
        bool optOutOfCustomerEmail;
        std::chrono::system_clock::duration postBuffer;
        std::chrono::system_clock::duration preBuffer;
        double price;
        microsoft::graph::bookingPriceType priceType;
        QList<microsoft::graph::bookingReminder> reminders;
        QString selfServiceAppointmentId;
        QString serviceId;
        microsoft::graph::location serviceLocation;
        QString serviceName;
        QString serviceNotes;
        QList<QString> staffMemberIds;
        microsoft::graph::dateTimeTimeZone start;
    };

    struct bookingService : graph::bookingNamedEntity {
        QString additionalInformation;
        std::chrono::system_clock::duration defaultDuration;
        microsoft::graph::location defaultLocation;
        double defaultPrice;
        microsoft::graph::bookingPriceType defaultPriceType;
        QList<microsoft::graph::bookingReminder> defaultReminders;
        QString description;
        bool isHiddenFromCustomers;
        bool isLocationOnline;
        QString notes;
        std::chrono::system_clock::duration postBuffer;
        std::chrono::system_clock::duration preBuffer;
        microsoft::graph::bookingSchedulingPolicy schedulingPolicy;
        QList<QString> staffMemberIds;
    };

    struct bookingStaffMember : graph::bookingPerson {
        bool availabilityIsAffectedByPersonalCalendar;
        int colorIndex;
        microsoft::graph::bookingStaffRole role;
        bool useBusinessHours;
        QList<microsoft::graph::bookingWorkHours> workingHours;
    };

    struct cloudPcAuditActor {
        QString applicationDisplayName;
        QString applicationId;
        QString ipAddress;
        QString remoteTenantId;
        QString remoteUserId;
        QString servicePrincipalName;
        microsoft::graph::cloudPcAuditActorType type;
        QString userId;
        QList<QString> userPermissions;
        QString userPrincipalName;
        QList<microsoft::graph::cloudPcUserRoleScopeTagInfo> userRoleScopeTags;
    };

    struct cloudPcRemoteActionResult {
        QString actionName;
        microsoft::graph::actionState actionState;
        QString cloudPcId;
        QDateTime lastUpdatedDateTime;
        QString managedDeviceId;
        QDateTime startDateTime;
        microsoft::graph::cloudPcStatusDetails statusDetails;
    };

    struct cloudPcAuditEvent : graph::entity {
        QString activity;
        QDateTime activityDateTime;
        microsoft::graph::cloudPcAuditActivityOperationType activityOperationType;
        microsoft::graph::cloudPcAuditActivityResult activityResult;
        QString activityType;
        microsoft::graph::cloudPcAuditActor actor;
        microsoft::graph::cloudPcAuditCategory category;
        QString componentName;
        QString correlationId;
        QString displayName;
        QList<microsoft::graph::cloudPcAuditResource> resources;
    };

    struct cloudPcProvisioningPolicy : graph::entity {
        QString description;
        QString displayName;
        QString imageDisplayName;
        QString imageId;
        microsoft::graph::cloudPcProvisioningPolicyImageType imageType;
        QString onPremisesConnectionId;
        QList<microsoft::graph::cloudPcProvisioningPolicyAssignment> assignments;
    };

    struct cloudPcUserSetting : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        QDateTime lastModifiedDateTime;
        bool localAdminEnabled;
        bool selfServiceEnabled;
        QList<microsoft::graph::cloudPcUserSettingAssignment> assignments;
    };

    struct androidDeviceOwnerEnrollmentProfile : graph::entity {
        QString accountId;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        int enrolledDeviceCount;
        microsoft::graph::androidDeviceOwnerEnrollmentMode enrollmentMode;
        microsoft::graph::androidDeviceOwnerEnrollmentTokenType enrollmentTokenType;
        QDateTime lastModifiedDateTime;
        QString qrCodeContent;
        microsoft::graph::mimeContent qrCodeImage;
        QList<QString> roleScopeTagIds;
        QDateTime tokenCreationDateTime;
        QDateTime tokenExpirationDateTime;
        QString tokenValue;
    };

    struct virtualEndpoint : graph::entity {
        QList<microsoft::graph::cloudPcAuditEvent> auditEvents;
        QList<microsoft::graph::cloudPC> cloudPCs;
        QList<microsoft::graph::cloudPcDeviceImage> deviceImages;
        QList<microsoft::graph::cloudPcOnPremisesConnection> onPremisesConnections;
        QList<microsoft::graph::cloudPcProvisioningPolicy> provisioningPolicies;
        QList<microsoft::graph::cloudPcUserSetting> userSettings;
    };

    struct androidForWorkAppConfigurationSchema : graph::entity {
        QByteArray exampleJson;
        QList<microsoft::graph::androidForWorkAppConfigurationSchemaItem> schemaItems;
    };

    struct androidForWorkEnrollmentProfile : graph::entity {
        QString accountId;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        int enrolledDeviceCount;
        QDateTime lastModifiedDateTime;
        QString qrCodeContent;
        microsoft::graph::mimeContent qrCodeImage;
        QDateTime tokenExpirationDateTime;
        QString tokenValue;
    };

    struct androidManagedStoreAppConfigurationSchema : graph::entity {
        QByteArray exampleJson;
        QList<microsoft::graph::androidManagedStoreAppConfigurationSchemaItem> nestedSchemaItems;
        QList<microsoft::graph::androidManagedStoreAppConfigurationSchemaItem> schemaItems;
    };

    struct advancedThreatProtectionOnboardingStateSummary : graph::entity {
        int compliantDeviceCount;
        int conflictDeviceCount;
        int errorDeviceCount;
        int nonCompliantDeviceCount;
        int notApplicableDeviceCount;
        int notAssignedDeviceCount;
        int remediatedDeviceCount;
        int unknownDeviceCount;
        QList<microsoft::graph::advancedThreatProtectionOnboardingDeviceSettingState> advancedThreatProtectionOnboardingDeviceSettingStates;
    };

    struct deviceCompliancePolicySettingStateSummary : graph::entity {
        int compliantDeviceCount;
        int conflictDeviceCount;
        int errorDeviceCount;
        int nonCompliantDeviceCount;
        int notApplicableDeviceCount;
        microsoft::graph::policyPlatformType platformType;
        int remediatedDeviceCount;
        QString setting;
        QString settingName;
        int unknownDeviceCount;
        QList<microsoft::graph::deviceComplianceSettingState> deviceComplianceSettingStates;
    };

    struct deviceConfigurationConflictSummary : graph::entity {
        QList<microsoft::graph::settingSource> conflictingDeviceConfigurations;
        QList<QString> contributingSettings;
        int deviceCheckinsImpacted;
    };

    struct restrictedAppsViolation : graph::entity {
        QString deviceConfigurationId;
        QString deviceConfigurationName;
        QString deviceName;
        QString managedDeviceId;
        microsoft::graph::policyPlatformType platformType;
        QList<microsoft::graph::managedDeviceReportedApp> restrictedApps;
        microsoft::graph::restrictedAppsState restrictedAppsState;
        QString userId;
        QString userName;
    };

    struct managedDeviceEncryptionState : graph::entity {
        microsoft::graph::advancedBitLockerState advancedBitLockerStates;
        QString deviceName;
        microsoft::graph::deviceTypes deviceType;
        microsoft::graph::complianceStatus encryptionPolicySettingState;
        microsoft::graph::encryptionReadinessState encryptionReadinessState;
        microsoft::graph::encryptionState encryptionState;
        microsoft::graph::fileVaultState fileVaultStates;
        QString osVersion;
        QList<microsoft::graph::encryptionReportPolicyDetails> policyDetails;
        QString tpmSpecificationVersion;
        QString userPrincipalName;
    };

    struct deviceManagementConfigurationSettingDefinition : graph::entity {
        microsoft::graph::deviceManagementConfigurationSettingAccessTypes accessTypes;
        microsoft::graph::deviceManagementConfigurationSettingApplicability applicability;
        QString baseUri;
        QString categoryId;
        QString description;
        QString displayName;
        QString helpText;
        QList<QString> infoUrls;
        QList<QString> keywords;
        QString name;
        microsoft::graph::deviceManagementConfigurationSettingOccurrence occurrence;
        QString offsetUri;
        QList<microsoft::graph::deviceManagementConfigurationReferredSettingInformation> referredSettingInformationList;
        QString rootDefinitionId;
        microsoft::graph::deviceManagementConfigurationSettingUsage settingUsage;
        microsoft::graph::deviceManagementConfigurationControlType uxBehavior;
        QString version;
        microsoft::graph::deviceManagementConfigurationSettingVisibility visibility;
    };

    struct deviceManagementConfigurationSettingTemplate : graph::entity {
        microsoft::graph::deviceManagementConfigurationSettingInstanceTemplate settingInstanceTemplate;
        QList<microsoft::graph::deviceManagementConfigurationSettingDefinition> settingDefinitions;
    };

    struct intuneBrand {
        QList<microsoft::graph::companyPortalBlockedAction> companyPortalBlockedActions;
        QString contactITEmailAddress;
        QString contactITName;
        QString contactITNotes;
        QString contactITPhoneNumber;
        QString customCanSeePrivacyMessage;
        QString customCantSeePrivacyMessage;
        QString customPrivacyMessage;
        microsoft::graph::mimeContent darkBackgroundLogo;
        bool disableClientTelemetry;
        QString displayName;
        microsoft::graph::enrollmentAvailabilityOptions enrollmentAvailability;
        bool isFactoryResetDisabled;
        bool isRemoveDeviceDisabled;
        microsoft::graph::mimeContent landingPageCustomizedImage;
        microsoft::graph::mimeContent lightBackgroundLogo;
        QString onlineSupportSiteName;
        QString onlineSupportSiteUrl;
        QString privacyUrl;
        QList<QString> roleScopeTagIds;
        bool sendDeviceOwnershipChangePushNotification;
        bool showAzureADEnterpriseApps;
        bool showDisplayNameNextToLogo;
        bool showLogo;
        bool showNameNextToLogo;
        bool showOfficeWebApps;
        microsoft::graph::rgbColor themeColor;
    };

    struct complianceManagementPartner : graph::entity {
        QList<microsoft::graph::complianceManagementPartnerAssignment> androidEnrollmentAssignments;
        bool androidOnboarded;
        QString displayName;
        QList<microsoft::graph::complianceManagementPartnerAssignment> iosEnrollmentAssignments;
        bool iosOnboarded;
        QDateTime lastHeartbeatDateTime;
        QList<microsoft::graph::complianceManagementPartnerAssignment> macOsEnrollmentAssignments;
        bool macOsOnboarded;
        microsoft::graph::deviceManagementPartnerTenantState partnerState;
        QList<microsoft::graph::complianceManagementPartnerAssignment> windowsEnrollmentAssignments;
        bool windowsOnboarded;
    };

    struct deviceManagementPartner : graph::entity {
        QString displayName;
        QList<microsoft::graph::deviceManagementPartnerAssignment> groupsRequiringPartnerEnrollment;
        bool isConfigured;
        QDateTime lastHeartbeatDateTime;
        microsoft::graph::deviceManagementPartnerAppType partnerAppType;
        microsoft::graph::deviceManagementPartnerTenantState partnerState;
        QString singleTenantAppId;
        QDateTime whenPartnerDevicesWillBeMarkedAsNonCompliant;
        QDateTime whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime;
        QDateTime whenPartnerDevicesWillBeRemoved;
        QDateTime whenPartnerDevicesWillBeRemovedDateTime;
    };

    struct deviceManagementSettingDefinition : graph::entity {
        QList<microsoft::graph::deviceManagementConstraint> constraints;
        QList<microsoft::graph::deviceManagementSettingDependency> dependencies;
        QString description;
        QString displayName;
        QString documentationUrl;
        QString headerSubtitle;
        QString headerTitle;
        bool isTopLevel;
        QList<QString> keywords;
        QString placeholderText;
        microsoft::graph::deviceManangementIntentValueType valueType;
    };

    struct windowsMalwareOverview {
        QList<microsoft::graph::windowsMalwareCategoryCount> malwareCategorySummary;
        int malwareDetectedDeviceCount;
        QList<microsoft::graph::windowsMalwareExecutionStateCount> malwareExecutionStateSummary;
        QList<microsoft::graph::windowsMalwareNameCount> malwareNameSummary;
        QList<microsoft::graph::windowsMalwareSeverityCount> malwareSeveritySummary;
        QList<microsoft::graph::windowsMalwareStateCount> malwareStateSummary;
        QList<microsoft::graph::osVersionCount> osVersionsSummary;
        int totalDistinctMalwareCount;
        int totalMalwareCount;
    };

    struct managedDeviceOverview : graph::entity {
        microsoft::graph::deviceExchangeAccessStateSummary deviceExchangeAccessStateSummary;
        microsoft::graph::deviceOperatingSystemSummary deviceOperatingSystemSummary;
        int dualEnrolledDeviceCount;
        int enrolledDeviceCount;
        QDateTime lastModifiedDateTime;
        microsoft::graph::managedDeviceModelsAndManufacturers managedDeviceModelsAndManufacturers;
        int mdmEnrolledCount;
    };

    struct userExperienceAnalyticsCategory : graph::entity {
        QList<microsoft::graph::userExperienceAnalyticsInsight> insights;
        QList<microsoft::graph::userExperienceAnalyticsMetric> metricValues;
    };

    struct userExperienceAnalyticsBaseline : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        bool isBuiltIn;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> appHealthMetrics;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> bestPracticesMetrics;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> deviceBootPerformanceMetrics;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> rebootAnalyticsMetrics;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> resourcePerformanceMetrics;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> workFromAnywhereMetrics;
    };

    struct userExperienceAnalyticsMetricHistory : graph::entity {
        QString deviceId;
        QDateTime metricDateTime;
        QString metricType;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsMetric> userExperienceAnalyticsMetric;
    };

    struct userExperienceAnalyticsOverview : graph::entity {
        QList<microsoft::graph::userExperienceAnalyticsInsight> insights;
    };

    struct userExperienceAnalyticsRegressionSummary : graph::entity {
        QList<microsoft::graph::userExperienceAnalyticsMetric> manufacturerRegression;
        QList<microsoft::graph::userExperienceAnalyticsMetric> modelRegression;
        QList<microsoft::graph::userExperienceAnalyticsMetric> operatingSystemRegression;
    };

    struct userExperienceAnalyticsWorkFromAnywhereMetric : graph::entity {
        QList<microsoft::graph::userExperienceAnalyticsWorkFromAnywhereDevice> metricDevices;
    };

    struct windowsMalwareInformation : graph::entity {
        QString additionalInformationUrl;
        microsoft::graph::windowsMalwareCategory category;
        QString displayName;
        QDateTime lastDetectionDateTime;
        microsoft::graph::windowsMalwareSeverity severity;
        QList<microsoft::graph::malwareStateForWindowsDevice> deviceMalwareStates;
    };

    struct deviceManagementResourceAccessProfileBase : graph::entity {
        QDateTime creationDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        int version;
        QList<microsoft::graph::deviceManagementResourceAccessProfileAssignment> assignments;
    };

    struct appleUserInitiatedEnrollmentProfile : graph::entity {
        QList<microsoft::graph::appleOwnerTypeEnrollmentType> availableEnrollmentTypeOptions;
        QDateTime createdDateTime;
        microsoft::graph::appleUserInitiatedEnrollmentType defaultEnrollmentType;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        microsoft::graph::devicePlatformType platform;
        int priority;
        QList<microsoft::graph::appleEnrollmentProfileAssignment> assignments;
    };

    struct depOnboardingSetting : graph::entity {
        QString appleIdentifier;
        bool dataSharingConsentGranted;
        QDateTime lastModifiedDateTime;
        QDateTime lastSuccessfulSyncDateTime;
        int lastSyncErrorCode;
        QDateTime lastSyncTriggeredDateTime;
        QList<QString> roleScopeTagIds;
        bool shareTokenWithSchoolDataSyncService;
        int syncedDeviceCount;
        QDateTime tokenExpirationDateTime;
        QString tokenName;
        microsoft::graph::depTokenType tokenType;
        std::unique_ptr<microsoft::graph::depIOSEnrollmentProfile> defaultIosEnrollmentProfile;
        std::unique_ptr<microsoft::graph::depMacOSEnrollmentProfile> defaultMacOsEnrollmentProfile;
        QList<microsoft::graph::enrollmentProfile> enrollmentProfiles;
        QList<microsoft::graph::importedAppleDeviceIdentity> importedAppleDeviceIdentities;
    };

    struct importedWindowsAutopilotDeviceIdentity : graph::entity {
        QString assignedUserPrincipalName;
        QString groupTag;
        QByteArray hardwareIdentifier;
        QString importId;
        QString productKey;
        QString serialNumber;
        microsoft::graph::importedWindowsAutopilotDeviceIdentityState state;
    };

    struct groupPolicyMigrationReport : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        QDateTime groupPolicyCreatedDateTime;
        QDateTime groupPolicyLastModifiedDateTime;
        QUuid groupPolicyObjectId;
        QDateTime lastModifiedDateTime;
        microsoft::graph::groupPolicyMigrationReadiness migrationReadiness;
        QString ouDistinguishedName;
        int supportedSettingsCount;
        int supportedSettingsPercent;
        bool targetedInActiveDirectory;
        int totalSettingsCount;
        QList<microsoft::graph::groupPolicySettingMapping> groupPolicySettingMappings;
        QList<microsoft::graph::unsupportedGroupPolicyExtension> unsupportedGroupPolicyExtensions;
    };

    struct deviceManagementReports : graph::entity {
        QList<microsoft::graph::deviceManagementCachedReportConfiguration> cachedReportConfigurations;
        QList<microsoft::graph::deviceManagementExportJob> exportJobs;
        QList<microsoft::graph::deviceManagementReportSchedule> reportSchedules;
    };

    struct microsoftTunnelSite : graph::entity {
        QString description;
        QString displayName;
        QString internalNetworkProbeUrl;
        QString publicAddress;
        QList<QString> roleScopeTagIds;
        bool upgradeAutomatically;
        bool upgradeAvailable;
        QTime upgradeWindowEndTime;
        QTime upgradeWindowStartTime;
        int upgradeWindowUtcOffsetInMinutes;
        std::unique_ptr<microsoft::graph::microsoftTunnelConfiguration> microsoftTunnelConfiguration;
        QList<microsoft::graph::microsoftTunnelServer> microsoftTunnelServers;
    };

    struct notificationMessageTemplate : graph::entity {
        microsoft::graph::notificationTemplateBrandingOptions brandingOptions;
        QString defaultLocale;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::localizedNotificationMessage> localizedNotificationMessages;
    };

    struct roleScopeTag : graph::entity {
        QString description;
        QString displayName;
        bool isBuiltIn;
        QList<microsoft::graph::roleScopeTagAutoAssignment> assignments;
    };

    struct embeddedSIMActivationCodePool : graph::entity {
        int activationCodeCount;
        QList<microsoft::graph::embeddedSIMActivationCode> activationCodes;
        QDateTime createdDateTime;
        QString displayName;
        QDateTime modifiedDateTime;
        QList<microsoft::graph::embeddedSIMActivationCodePoolAssignment> assignments;
        QList<microsoft::graph::embeddedSIMDeviceState> deviceStates;
    };

    struct deviceManagementAutopilotEvent : graph::entity {
        std::chrono::system_clock::duration accountSetupDuration;
        microsoft::graph::windowsAutopilotDeploymentState accountSetupStatus;
        std::chrono::system_clock::duration deploymentDuration;
        QDateTime deploymentEndDateTime;
        QDateTime deploymentStartDateTime;
        microsoft::graph::windowsAutopilotDeploymentState deploymentState;
        std::chrono::system_clock::duration deploymentTotalDuration;
        QString deviceId;
        std::chrono::system_clock::duration devicePreparationDuration;
        QDateTime deviceRegisteredDateTime;
        QString deviceSerialNumber;
        std::chrono::system_clock::duration deviceSetupDuration;
        microsoft::graph::windowsAutopilotDeploymentState deviceSetupStatus;
        QString enrollmentFailureDetails;
        QDateTime enrollmentStartDateTime;
        microsoft::graph::enrollmentState enrollmentState;
        microsoft::graph::windowsAutopilotEnrollmentType enrollmentType;
        QDateTime eventDateTime;
        QString managedDeviceName;
        QString osVersion;
        int targetedAppCount;
        int targetedPolicyCount;
        QString userPrincipalName;
        QString windows10EnrollmentCompletionPageConfigurationDisplayName;
        QString windows10EnrollmentCompletionPageConfigurationId;
        QString windowsAutopilotDeploymentProfileDisplayName;
        QList<microsoft::graph::deviceManagementAutopilotPolicyStatusDetail> policyStatusDetails;
    };

    struct windowsDriverUpdateProfile : graph::entity {
        microsoft::graph::driverUpdateProfileApprovalType approvalType;
        QDateTime createdDateTime;
        int deploymentDeferralInDays;
        QString description;
        int deviceReporting;
        QString displayName;
        QDateTime lastModifiedDateTime;
        int newUpdates;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::windowsDriverUpdateProfileAssignment> assignments;
        QList<microsoft::graph::windowsDriverUpdateInventory> driverInventories;
    };

    struct windowsFeatureUpdateProfile : graph::entity {
        QDateTime createdDateTime;
        QString deployableContentDisplayName;
        QString description;
        QString displayName;
        QDateTime endOfSupportDate;
        QString featureUpdateVersion;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::windowsFeatureUpdateProfileAssignment> assignments;
    };

    struct windowsQualityUpdateProfile : graph::entity {
        QDateTime createdDateTime;
        QString deployableContentDisplayName;
        QString description;
        QString displayName;
        microsoft::graph::expeditedWindowsQualityUpdateSettings expeditedUpdateSettings;
        QDateTime lastModifiedDateTime;
        QString releaseDateDisplayName;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::windowsQualityUpdateProfileAssignment> assignments;
    };

    struct intuneBrandingProfile : graph::entity {
        QList<microsoft::graph::companyPortalBlockedAction> companyPortalBlockedActions;
        QString contactITEmailAddress;
        QString contactITName;
        QString contactITNotes;
        QString contactITPhoneNumber;
        QDateTime createdDateTime;
        QString customCanSeePrivacyMessage;
        QString customCantSeePrivacyMessage;
        QString customPrivacyMessage;
        bool disableClientTelemetry;
        QString displayName;
        microsoft::graph::enrollmentAvailabilityOptions enrollmentAvailability;
        bool isDefaultProfile;
        bool isFactoryResetDisabled;
        bool isRemoveDeviceDisabled;
        microsoft::graph::mimeContent landingPageCustomizedImage;
        QDateTime lastModifiedDateTime;
        microsoft::graph::mimeContent lightBackgroundLogo;
        QString onlineSupportSiteName;
        QString onlineSupportSiteUrl;
        QString privacyUrl;
        QString profileDescription;
        QString profileName;
        QList<QString> roleScopeTagIds;
        bool sendDeviceOwnershipChangePushNotification;
        bool showAzureADEnterpriseApps;
        bool showDisplayNameNextToLogo;
        bool showLogo;
        bool showOfficeWebApps;
        microsoft::graph::rgbColor themeColor;
        microsoft::graph::mimeContent themeColorLogo;
        QList<microsoft::graph::intuneBrandingProfileAssignment> assignments;
    };

    struct deviceConfigurationState : graph::entity {
        QString displayName;
        microsoft::graph::policyPlatformType platformType;
        int settingCount;
        QList<microsoft::graph::deviceConfigurationSettingState> settingStates;
        microsoft::graph::complianceStatus state;
        QString userId;
        QString userPrincipalName;
        int version;
    };

    struct managedDeviceMobileAppConfigurationState : graph::entity {
        QString displayName;
        microsoft::graph::policyPlatformType platformType;
        int settingCount;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationSettingState> settingStates;
        microsoft::graph::complianceStatus state;
        QString userId;
        QString userPrincipalName;
        int version;
    };

    struct securityBaselineState : graph::entity {
        QString displayName;
        QString securityBaselineTemplateId;
        microsoft::graph::securityBaselineComplianceState state;
        QString userPrincipalName;
        QList<microsoft::graph::securityBaselineSettingState> settingStates;
    };

    struct hardwareInformation {
        int batteryChargeCycles;
        int batteryHealthPercentage;
        QString batterySerialNumber;
        QString cellularTechnology;
        QString deviceFullQualifiedDomainName;
        microsoft::graph::deviceGuardLocalSystemAuthorityCredentialGuardState deviceGuardLocalSystemAuthorityCredentialGuardState;
        microsoft::graph::deviceGuardVirtualizationBasedSecurityHardwareRequirementState deviceGuardVirtualizationBasedSecurityHardwareRequirementState;
        microsoft::graph::deviceGuardVirtualizationBasedSecurityState deviceGuardVirtualizationBasedSecurityState;
        QString esimIdentifier;
        long long freeStorageSpace;
        QString imei;
        QString ipAddressV4;
        bool isEncrypted;
        bool isSharedDevice;
        bool isSupervised;
        QString manufacturer;
        QString meid;
        QString model;
        QString operatingSystemEdition;
        QString operatingSystemLanguage;
        int operatingSystemProductType;
        QString osBuildNumber;
        QString phoneNumber;
        QString serialNumber;
        QList<microsoft::graph::sharedAppleDeviceUser> sharedDeviceCachedUsers;
        QString subnetAddress;
        QString subscriberCarrier;
        long long totalStorageSpace;
        QString tpmSpecificationVersion;
        QString wifiMac;
    };

    struct windowsProtectionState : graph::entity {
        QString antiMalwareVersion;
        microsoft::graph::windowsDeviceHealthState deviceState;
        QString engineVersion;
        bool fullScanOverdue;
        bool fullScanRequired;
        bool isVirtualMachine;
        QDateTime lastFullScanDateTime;
        QString lastFullScanSignatureVersion;
        QDateTime lastQuickScanDateTime;
        QString lastQuickScanSignatureVersion;
        QDateTime lastReportedDateTime;
        bool malwareProtectionEnabled;
        bool networkInspectionSystemEnabled;
        microsoft::graph::windowsDefenderProductStatus productStatus;
        bool quickScanOverdue;
        bool realTimeProtectionEnabled;
        bool rebootRequired;
        bool signatureUpdateOverdue;
        QString signatureVersion;
        bool tamperProtectionEnabled;
        QList<microsoft::graph::windowsDeviceMalwareState> detectedMalwareState;
    };

    struct unifiedRoleAssignmentMultiple : graph::entity {
        QList<QString> appScopeIds;
        QString condition;
        QString description;
        QList<QString> directoryScopeIds;
        QString displayName;
        QList<QString> principalIds;
        QString roleDefinitionId;
        QList<microsoft::graph::appScope> appScopes;
        QList<microsoft::graph::directoryObject> directoryScopes;
        QList<microsoft::graph::directoryObject> principals;
        std::unique_ptr<microsoft::graph::unifiedRoleDefinition> roleDefinition;
    };

    struct unifiedRbacResourceAction : graph::entity {
        QString actionVerb;
        QString description;
        QString name;
        QString resourceScopeId;
        std::unique_ptr<microsoft::graph::unifiedRbacResourceScope> resourceScope;
    };

    struct command : graph::entity {
        QString appServiceName;
        QString error;
        QString packageFamilyName;
        microsoft::graph::payloadRequest payload;
        QString permissionTicket;
        QString postBackUri;
        QString status;
        QString type;
        std::unique_ptr<microsoft::graph::payloadResponse> responsepayload;
    };

    struct publicError {
        QString code;
        QList<microsoft::graph::publicErrorDetail> details;
        microsoft::graph::publicInnerError innerError;
        QString message;
        QString target;
    };

    struct teamsAsyncOperation : graph::entity {
        int attemptsCount;
        QDateTime createdDateTime;
        microsoft::graph::operationError error;
        QDateTime lastActionDateTime;
        microsoft::graph::teamsAsyncOperationType operationType;
        microsoft::graph::teamsAsyncOperationStatus status;
        QString targetResourceId;
        QString targetResourceLocation;
    };

    struct teamworkTag : graph::entity {
        QString description;
        QString displayName;
        int memberCount;
        microsoft::graph::teamworkTagType tagType;
        QString teamId;
        QList<microsoft::graph::teamworkTagMember> members;
    };

    struct directorySetting : graph::entity {
        QString displayName;
        QString templateId;
        QList<microsoft::graph::settingValue> values;
    };

    struct permission : graph::entity {
        QDateTime expirationDateTime;
        microsoft::graph::identitySet grantedTo;
        QList<microsoft::graph::identitySet> grantedToIdentities;
        bool hasPassword;
        microsoft::graph::itemReference inheritedFrom;
        microsoft::graph::sharingInvitation invitation;
        microsoft::graph::sharingLink link;
        QList<QString> roles;
        QString shareId;
    };

    struct clientCertificateAuthentication : graph::apiAuthenticationConfigurationBase {
        QList<microsoft::graph::pkcs12CertificateInformation> certificateList;
    };

    struct userFlowApiConnectorConfiguration {
        std::unique_ptr<microsoft::graph::identityApiConnector> postAttributeCollection;
        std::unique_ptr<microsoft::graph::identityApiConnector> postFederationSignup;
        std::unique_ptr<microsoft::graph::identityApiConnector> preTokenIssuance;
    };

    struct authenticationEventsPolicy : graph::entity {
        QList<microsoft::graph::authenticationListener> onSignupStart;
    };

    struct userFlowLanguageConfiguration : graph::entity {
        QString displayName;
        bool isEnabled;
        QList<microsoft::graph::userFlowLanguagePage> defaultPages;
        QList<microsoft::graph::userFlowLanguagePage> overridesPages;
    };

    struct identityUserFlowAttributeAssignment : graph::entity {
        QString displayName;
        bool isOptional;
        bool requiresVerification;
        QList<microsoft::graph::userAttributeValuesItem> userAttributeValues;
        microsoft::graph::identityUserFlowAttributeInputType userInputType;
        std::unique_ptr<microsoft::graph::identityUserFlowAttribute> userAttribute;
    };

    struct b2xIdentityUserFlow : graph::identityUserFlow {
        microsoft::graph::userFlowApiConnectorConfiguration apiConnectorConfiguration;
        QList<microsoft::graph::identityProvider> identityProviders;
        QList<microsoft::graph::userFlowLanguageConfiguration> languages;
        QList<microsoft::graph::identityUserFlowAttributeAssignment> userAttributeAssignments;
        QList<microsoft::graph::identityProviderBase> userFlowIdentityProviders;
    };

    struct invokeUserFlowListener : graph::authenticationListener {
        std::unique_ptr<microsoft::graph::b2xIdentityUserFlow> userFlow;
    };

    struct trustFramework {
        QList<microsoft::graph::trustFrameworkKeySet> keySets;
        QList<microsoft::graph::trustFrameworkPolicy> policies;
    };

    struct classifcationErrorBase {
        QString code;
        microsoft::graph::classificationInnerError innerError;
        QString message;
        QString target;
    };

    struct classificationError : graph::classifcationErrorBase {
        QList<microsoft::graph::classifcationErrorBase> details;
    };

    struct sensitiveContentLocation {
        int confidence;
        QList<microsoft::graph::sensitiveContentEvidence> evidences;
        QString idMatch;
        int length;
        int offset;
    };

    struct dlpEvaluatePoliciesRequest {
        microsoft::graph::dlpEvaluationInput evaluationInput;
        microsoft::graph::dlpNotification notificationInfo;
        QString target;
    };

    struct dlpPoliciesJobResult {
        QList<microsoft::graph::matchingDlpRule> matchingRules;
    };

    struct evaluateLabelJobResult {
        microsoft::graph::responsiblePolicy responsiblePolicy;
        QList<microsoft::graph::responsibleSensitiveType> responsibleSensitiveTypes;
        microsoft::graph::matchingLabel sensitivityLabel;
    };

    struct evaluateLabelJobResultGroup {
        microsoft::graph::evaluateLabelJobResult automatic;
        microsoft::graph::evaluateLabelJobResult recommended;
    };

    struct jobResponseBase : graph::entity {
        QDateTime creationDateTime;
        QDateTime endDateTime;
        microsoft::graph::classificationError error;
        QDateTime startDateTime;
        QString status;
        QString tenantId;
        QString type;
    };

    struct exactMatchDataStoreBase : graph::entity {
        QList<microsoft::graph::exactDataMatchStoreColumn> columns;
        QDateTime dataLastUpdatedDateTime;
        QString description;
        QString displayName;
    };

    struct dlpEvaluatePoliciesJobResponse : graph::jobResponseBase {
        microsoft::graph::dlpPoliciesJobResult result;
    };

    struct evaluateLabelJobResponse : graph::jobResponseBase {
        microsoft::graph::evaluateLabelJobResultGroup result;
    };

    struct apiServicePrincipal {
        QList<microsoft::graph::resourceSpecificPermission> resourceSpecificApplicationPermissions;
    };

    struct appManagementConfiguration {
        QList<microsoft::graph::passwordCredentialConfiguration> passwordCredentials;
    };

    struct appMetadata {
        QList<microsoft::graph::appMetadataEntry> data;
        int version;
    };

    struct instanceResourceAccess {
        QList<microsoft::graph::resourcePermission> permissions;
        QString resourceAppId;
    };

    struct directory : graph::entity {
        QList<microsoft::graph::administrativeUnit> administrativeUnits;
        QList<microsoft::graph::directoryObject> deletedItems;
        QList<microsoft::graph::sharedEmailDomain> sharedEmailDomains;
        QList<microsoft::graph::featureRolloutPolicy> featureRolloutPolicies;
    };

    struct domain : graph::entity {
        QString authenticationType;
        QString availabilityStatus;
        bool isAdminManaged;
        bool isDefault;
        bool isInitial;
        bool isRoot;
        bool isVerified;
        int passwordNotificationWindowInDays;
        int passwordValidityPeriodInDays;
        microsoft::graph::domainState state;
        QList<QString> supportedServices;
        QList<microsoft::graph::directoryObject> domainNameReferences;
        QList<microsoft::graph::domainDnsRecord> serviceConfigurationRecords;
        QList<microsoft::graph::sharedEmailDomainInvitation> sharedEmailDomainInvitations;
        QList<microsoft::graph::domainDnsRecord> verificationDnsRecords;
    };

    struct organizationalBranding : graph::organizationalBrandingProperties {
        QList<microsoft::graph::organizationalBrandingLocalization> localizations;
    };

    struct organizationSettings : graph::entity {
        std::unique_ptr<microsoft::graph::itemInsightsSettings> itemInsights;
        QList<microsoft::graph::profileCardProperty> profileCardProperties;
    };

    struct unifiedRoleAssignmentScheduleInstance : graph::unifiedRoleScheduleInstanceBase {
        QString assignmentType;
        QDateTime endDateTime;
        QString memberType;
        QString roleAssignmentOriginId;
        QString roleAssignmentScheduleId;
        QDateTime startDateTime;
        std::unique_ptr<microsoft::graph::unifiedRoleEligibilityScheduleInstance> activatedUsing;
    };

    struct educationFeedback {
        microsoft::graph::identitySet feedbackBy;
        QDateTime feedbackDateTime;
        microsoft::graph::educationItemBody text;
    };

    struct educationSubmission : graph::entity {
        microsoft::graph::educationSubmissionRecipient recipient;
        QString resourcesFolderUrl;
        microsoft::graph::identitySet returnedBy;
        QDateTime returnedDateTime;
        microsoft::graph::educationSubmissionStatus status;
        microsoft::graph::identitySet submittedBy;
        QDateTime submittedDateTime;
        microsoft::graph::identitySet unsubmittedBy;
        QDateTime unsubmittedDateTime;
        QList<microsoft::graph::educationOutcome> outcomes;
        QList<microsoft::graph::educationSubmissionResource> resources;
        QList<microsoft::graph::educationSubmissionResource> submittedResources;
    };

    struct educationFeedbackOutcome : graph::educationOutcome {
        microsoft::graph::educationFeedback feedback;
        microsoft::graph::educationFeedback publishedFeedback;
    };

    struct educationSynchronizationProfile : graph::entity {
        microsoft::graph::educationSynchronizationDataProvider dataProvider;
        QString displayName;
        QDate expirationDate;
        bool handleSpecialCharacterConstraint;
        microsoft::graph::educationIdentitySynchronizationConfiguration identitySynchronizationConfiguration;
        QList<microsoft::graph::educationSynchronizationLicenseAssignment> licensesToAssign;
        microsoft::graph::educationSynchronizationProfileState state;
        QList<microsoft::graph::educationSynchronizationError> errors;
        std::unique_ptr<microsoft::graph::educationSynchronizationProfileStatus> profileStatus;
    };

    struct educationSynchronizationCustomizations : graph::educationSynchronizationCustomizationsBase {
        microsoft::graph::educationSynchronizationCustomization school;
        microsoft::graph::educationSynchronizationCustomization section;
        microsoft::graph::educationSynchronizationCustomization student;
        microsoft::graph::educationSynchronizationCustomization studentEnrollment;
        microsoft::graph::educationSynchronizationCustomization teacher;
        microsoft::graph::educationSynchronizationCustomization teacherRoster;
    };

    struct educationIdentityCreationConfiguration : graph::educationIdentitySynchronizationConfiguration {
        QList<microsoft::graph::educationIdentityDomain> userDomains;
    };

    struct educationIdentityMatchingConfiguration : graph::educationIdentitySynchronizationConfiguration {
        QList<microsoft::graph::educationIdentityMatchingOptions> matchingOptions;
    };

    struct educationOneRosterApiDataProvider : graph::educationSynchronizationDataProvider {
        microsoft::graph::educationSynchronizationConnectionSettings connectionSettings;
        QString connectionUrl;
        microsoft::graph::educationSynchronizationCustomizations customizations;
        QString providerName;
        QList<QString> schoolsIds;
        QList<QString> termIds;
    };

    struct educationPowerSchoolDataProvider : graph::educationSynchronizationDataProvider {
        bool allowTeachersInMultipleSchools;
        QString clientId;
        QString clientSecret;
        QString connectionUrl;
        microsoft::graph::educationSynchronizationCustomizations customizations;
        QList<QString> schoolsIds;
        QString schoolYear;
    };

    struct contentClassification {
        int confidence;
        QList<microsoft::graph::matchLocation> matches;
        QString sensitiveTypeId;
        int uniqueCount;
    };

    struct exactMatchClassificationRequest {
        QList<microsoft::graph::contentClassification> contentClassifications;
        QList<QString> sensitiveTypeIds;
        QString text;
        int timeoutInMs;
    };

    struct exactMatchDetectedSensitiveContent : graph::detectedSensitiveContentBase {
        QList<microsoft::graph::sensitiveContentLocation> matches;
    };

    struct exactMatchJobBase : graph::entity {
        QDateTime completionDateTime;
        QDateTime creationDateTime;
        microsoft::graph::classificationError error;
        QDateTime lastUpdatedDateTime;
        QDateTime startDateTime;
    };

    struct exactMatchSessionBase : graph::exactMatchJobBase {
        QString dataStoreId;
        QDateTime processingCompletionDateTime;
        int remainingBlockCount;
        int remainingJobCount;
        QString state;
        int totalBlockCount;
        int totalJobCount;
        QDateTime uploadCompletionDateTime;
    };

    struct exactMatchSession : graph::exactMatchSessionBase {
        QString checksum;
        QString dataUploadURI;
        QList<QString> fields;
        QString fileName;
        int rowsPerBlock;
        QString salt;
        QString uploadAgentId;
        std::unique_ptr<microsoft::graph::exactMatchUploadAgent> uploadAgent;
    };

    struct exactMatchLookupJob : graph::exactMatchJobBase {
        QString state;
        QList<microsoft::graph::lookupResultRow> matchingRows;
    };

    struct workbookFilterCriteria {
        QString color;
        QString criterion1;
        QString criterion2;
        QString dynamicCriteria;
        QString filterOn;
        microsoft::graph::workbookIcon icon;
        QString _operator;
        microsoft::graph::Json values;
    };

    struct quota {
        long long deleted;
        long long remaining;
        QString state;
        microsoft::graph::storagePlanInformation storagePlanInformation;
        long long total;
        long long used;
    };

    struct bundle {
        microsoft::graph::album album;
        int childCount;
    };

    struct file {
        microsoft::graph::hashes hashes;
        QString mimeType;
        bool processingMetadata;
    };

    struct folder {
        int childCount;
        microsoft::graph::folderView view;
    };

    struct media {
        bool isTranscriptionShown;
        microsoft::graph::mediaSource mediaSource;
    };

    struct pendingOperations {
        microsoft::graph::pendingContentUpdate pendingContentUpdate;
    };

    struct remoteItem {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::file file;
        microsoft::graph::fileSystemInfo fileSystemInfo;
        microsoft::graph::folder folder;
        QString id;
        microsoft::graph::image image;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString name;
        microsoft::graph::package package;
        microsoft::graph::itemReference parentReference;
        microsoft::graph::shared shared;
        microsoft::graph::sharepointIds sharepointIds;
        long long size;
        microsoft::graph::specialFolder specialFolder;
        microsoft::graph::video video;
        QString webDavUrl;
        QString webUrl;
    };

    struct thumbnailSet : graph::entity {
        microsoft::graph::thumbnail large;
        microsoft::graph::thumbnail medium;
        microsoft::graph::thumbnail small;
        microsoft::graph::thumbnail source;
    };

    struct workbookComment : graph::entity {
        QString content;
        QString contentType;
        QList<microsoft::graph::workbookCommentReply> replies;
    };

    struct workbookChartDataLabels : graph::entity {
        QString position;
        QString separator;
        bool showBubbleSize;
        bool showCategoryName;
        bool showLegendKey;
        bool showPercentage;
        bool showSeriesName;
        bool showValue;
        std::unique_ptr<microsoft::graph::workbookChartDataLabelFormat> format;
    };

    struct workbookChartAreaFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFill> fill;
        std::unique_ptr<microsoft::graph::workbookChartFont> font;
    };

    struct workbookChartLegend : graph::entity {
        bool overlay;
        QString position;
        bool visible;
        std::unique_ptr<microsoft::graph::workbookChartLegendFormat> format;
    };

    struct workbookChartTitle : graph::entity {
        bool overlay;
        QString text;
        bool visible;
        std::unique_ptr<microsoft::graph::workbookChartTitleFormat> format;
    };

    struct workbookChartAxisFormat : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartFont> font;
        std::unique_ptr<microsoft::graph::workbookChartLineFormat> line;
    };

    struct workbookChartGridlines : graph::entity {
        bool visible;
        std::unique_ptr<microsoft::graph::workbookChartGridlinesFormat> format;
    };

    struct workbookChartAxisTitle : graph::entity {
        QString text;
        bool visible;
        std::unique_ptr<microsoft::graph::workbookChartAxisTitleFormat> format;
    };

    struct workbookChartPoint : graph::entity {
        microsoft::graph::Json value;
        std::unique_ptr<microsoft::graph::workbookChartPointFormat> format;
    };

    struct workbookFilter : graph::entity {
        microsoft::graph::workbookFilterCriteria criteria;
    };

    struct workbookRangeFormat : graph::entity {
        double columnWidth;
        QString horizontalAlignment;
        double rowHeight;
        QString verticalAlignment;
        bool wrapText;
        QList<microsoft::graph::workbookRangeBorder> borders;
        std::unique_ptr<microsoft::graph::workbookRangeFill> fill;
        std::unique_ptr<microsoft::graph::workbookRangeFont> font;
        std::unique_ptr<microsoft::graph::workbookFormatProtection> protection;
    };

    struct workbookTableColumn : graph::entity {
        int index;
        QString name;
        microsoft::graph::Json values;
        std::unique_ptr<microsoft::graph::workbookFilter> filter;
    };

    struct attendeeAvailability {
        microsoft::graph::attendeeBase attendee;
        microsoft::graph::freeBusyStatus availability;
    };

    struct locationConstraintItem : graph::location {
        bool resolveAvailability;
    };

    struct meetingTimeSuggestion {
        QList<microsoft::graph::attendeeAvailability> attendeeAvailability;
        double confidence;
        QList<microsoft::graph::location> locations;
        microsoft::graph::timeSlot meetingTimeSlot;
        int order;
        microsoft::graph::freeBusyStatus organizerAvailability;
        QString suggestionReason;
    };

    struct meetingTimeSuggestionsResult {
        QString emptySuggestionsReason;
        QList<microsoft::graph::meetingTimeSuggestion> meetingTimeSuggestions;
    };

    struct attendee : graph::attendeeBase {
        microsoft::graph::timeSlot proposedNewTime;
        microsoft::graph::responseStatus status;
    };

    struct automaticRepliesMailTips {
        QString message;
        microsoft::graph::localeInfo messageLanguage;
        microsoft::graph::dateTimeTimeZone scheduledEndTime;
        microsoft::graph::dateTimeTimeZone scheduledStartTime;
    };

    struct convertIdResult {
        microsoft::graph::genericError errorDetails;
        QString sourceId;
        QString targetId;
    };

    struct customTimeZone : graph::timeZoneBase {
        int bias;
        microsoft::graph::daylightTimeZoneOffset daylightOffset;
        microsoft::graph::standardTimeZoneOffset standardOffset;
    };

    struct mailTips {
        microsoft::graph::automaticRepliesMailTips automaticReplies;
        QString customMailTip;
        bool deliveryRestricted;
        microsoft::graph::emailAddress emailAddress;
        microsoft::graph::mailTipsError error;
        int externalMemberCount;
        bool isModerated;
        bool mailboxFull;
        int maxMessageSize;
        microsoft::graph::recipientScopeType recipientScope;
        QList<microsoft::graph::recipient> recipientSuggestions;
        int totalMemberCount;
    };

    struct messageRulePredicates {
        QList<QString> bodyContains;
        QList<QString> bodyOrSubjectContains;
        QList<QString> categories;
        QList<microsoft::graph::recipient> fromAddresses;
        bool hasAttachments;
        QList<QString> headerContains;
        microsoft::graph::importance importance;
        bool isApprovalRequest;
        bool isAutomaticForward;
        bool isAutomaticReply;
        bool isEncrypted;
        bool isMeetingRequest;
        bool isMeetingResponse;
        bool isNonDeliveryReport;
        bool isPermissionControlled;
        bool isReadReceipt;
        bool isSigned;
        bool isVoicemail;
        microsoft::graph::messageActionFlag messageActionFlag;
        bool notSentToMe;
        QList<QString> recipientContains;
        QList<QString> senderContains;
        microsoft::graph::sensitivity sensitivity;
        bool sentCcMe;
        bool sentOnlyToMe;
        QList<microsoft::graph::recipient> sentToAddresses;
        bool sentToMe;
        bool sentToOrCcMe;
        QList<QString> subjectContains;
        microsoft::graph::sizeRange withinSizeRange;
    };

    struct patternedRecurrence {
        microsoft::graph::recurrencePattern pattern;
        microsoft::graph::recurrenceRange range;
    };

    struct reminder {
        QString changeKey;
        microsoft::graph::dateTimeTimeZone eventEndTime;
        QString eventId;
        microsoft::graph::location eventLocation;
        microsoft::graph::dateTimeTimeZone eventStartTime;
        QString eventSubject;
        QString eventWebLink;
        microsoft::graph::dateTimeTimeZone reminderFireTime;
    };

    struct scheduleInformation {
        QString availabilityView;
        microsoft::graph::freeBusyError error;
        QString scheduleId;
        QList<microsoft::graph::scheduleItem> scheduleItems;
        microsoft::graph::workingHours workingHours;
    };

    struct calendarSharingMessage : graph::message {
        bool canAccept;
        microsoft::graph::calendarSharingMessageAction sharingMessageAction;
        QList<microsoft::graph::calendarSharingMessageAction> sharingMessageActions;
        QString suggestedCalendarName;
    };

    struct post : graph::outlookItem {
        microsoft::graph::itemBody body;
        QString conversationId;
        QString conversationThreadId;
        microsoft::graph::recipient from;
        bool hasAttachments;
        microsoft::graph::importance importance;
        QList<microsoft::graph::recipient> newParticipants;
        QDateTime receivedDateTime;
        microsoft::graph::recipient sender;
        QList<microsoft::graph::attachment> attachments;
        QList<microsoft::graph::extension> extensions;
        std::unique_ptr<microsoft::graph::post> inReplyTo;
        QList<microsoft::graph::mention> mentions;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct messageRule : graph::entity {
        microsoft::graph::messageRuleActions actions;
        microsoft::graph::messageRulePredicates conditions;
        QString displayName;
        microsoft::graph::messageRulePredicates exceptions;
        bool hasError;
        bool isEnabled;
        bool isReadOnly;
        int sequence;
    };

    struct outlookTask : graph::outlookItem {
        QString assignedTo;
        microsoft::graph::itemBody body;
        microsoft::graph::dateTimeTimeZone completedDateTime;
        microsoft::graph::dateTimeTimeZone dueDateTime;
        bool hasAttachments;
        microsoft::graph::importance importance;
        bool isReminderOn;
        QString owner;
        QString parentFolderId;
        microsoft::graph::patternedRecurrence recurrence;
        microsoft::graph::dateTimeTimeZone reminderDateTime;
        microsoft::graph::sensitivity sensitivity;
        microsoft::graph::dateTimeTimeZone startDateTime;
        microsoft::graph::taskStatus status;
        QString subject;
        QList<microsoft::graph::attachment> attachments;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct outlookTaskFolder : graph::entity {
        QString changeKey;
        bool isDefaultFolder;
        QString name;
        QUuid parentGroupKey;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
        QList<microsoft::graph::outlookTask> tasks;
    };

    struct outlookTaskGroup : graph::entity {
        QString changeKey;
        QUuid groupKey;
        bool isDefaultGroup;
        QString name;
        QList<microsoft::graph::outlookTaskFolder> taskFolders;
    };

    struct columnValidation {
        QString defaultLanguage;
        QList<microsoft::graph::displayNameLocalization> descriptions;
        QString formula;
    };

    struct itemActionSet {
        microsoft::graph::commentAction comment;
        microsoft::graph::createAction create;
        microsoft::graph::deleteAction _delete;
        microsoft::graph::editAction edit;
        microsoft::graph::mentionAction mention;
        microsoft::graph::moveAction move;
        microsoft::graph::renameAction rename;
        microsoft::graph::restoreAction restore;
        microsoft::graph::shareAction share;
        microsoft::graph::versionAction version;
    };

    struct hybridAgentUpdaterConfiguration {
        bool allowUpdateConfigurationOverride;
        QDateTime deferUpdateDateTime;
        microsoft::graph::updateWindow updateWindow;
    };

    struct expressionEvaluationDetails {
        QString expression;
        QList<microsoft::graph::expressionEvaluationDetails> expressionEvaluationDetails;
        bool expressionResult;
        microsoft::graph::propertyToEvaluate propertyToEvaluate;
    };

    struct membershipRuleEvaluationDetails {
        microsoft::graph::expressionEvaluationDetails membershipRuleEvaluationDetails;
    };

    struct attributeDefinition {
        bool anchor;
        QList<microsoft::graph::stringKeyStringValuePair> apiExpressions;
        bool caseExact;
        QString defaultValue;
        bool flowNullValues;
        QList<microsoft::graph::metadataEntry> metadata;
        bool multivalued;
        microsoft::graph::mutability mutability;
        QString name;
        QList<microsoft::graph::referencedObject> referencedObjects;
        bool required;
        microsoft::graph::attributeType type;
    };

    struct objectDefinition {
        QList<microsoft::graph::attributeDefinition> attributes;
        QList<microsoft::graph::metadataEntry> metadata;
        QString name;
        QList<QString> supportedApis;
    };

    struct filterClause {
        QString operatorName;
        QString sourceOperandName;
        microsoft::graph::filterOperand targetOperand;
    };

    struct publicErrorResponse {
        microsoft::graph::publicError error;
    };

    struct synchronizationJobApplicationParameters {
        QString ruleId;
        QList<microsoft::graph::synchronizationJobSubject> subjects;
    };

    struct synchronizationStatus {
        microsoft::graph::synchronizationStatusCode code;
        long long countSuccessiveCompleteFailures;
        bool escrowsPruned;
        microsoft::graph::synchronizationTaskExecution lastExecution;
        microsoft::graph::synchronizationTaskExecution lastSuccessfulExecution;
        microsoft::graph::synchronizationTaskExecution lastSuccessfulExecutionWithExports;
        QList<microsoft::graph::synchronizationProgress> progress;
        microsoft::graph::synchronizationQuarantine quarantine;
        QDateTime steadyStateFirstAchievedTime;
        QDateTime steadyStateLastAchievedTime;
        QList<microsoft::graph::stringKeyLongValuePair> synchronizedEntryCountByType;
        QString troubleshootingUrl;
    };

    struct directoryDefinition : graph::entity {
        microsoft::graph::directoryDefinitionDiscoverabilities discoverabilities;
        QDateTime discoveryDateTime;
        QString name;
        QList<microsoft::graph::objectDefinition> objects;
        bool readOnly;
        QString version;
    };

    struct call : graph::entity {
        QList<microsoft::graph::modality> activeModalities;
        microsoft::graph::participantInfo answeredBy;
        QString callbackUri;
        QString callChainId;
        microsoft::graph::callOptions callOptions;
        QList<microsoft::graph::callRoute> callRoutes;
        microsoft::graph::chatInfo chatInfo;
        microsoft::graph::callDirection direction;
        microsoft::graph::incomingContext incomingContext;
        microsoft::graph::mediaConfig mediaConfig;
        microsoft::graph::callMediaState mediaState;
        microsoft::graph::meetingCapability meetingCapability;
        microsoft::graph::meetingInfo meetingInfo;
        QString myParticipantId;
        QList<microsoft::graph::modality> requestedModalities;
        microsoft::graph::resultInfo resultInfo;
        int ringingTimeoutInSeconds;
        QList<microsoft::graph::routingPolicy> routingPolicies;
        microsoft::graph::participantInfo source;
        microsoft::graph::callState state;
        QString subject;
        QList<microsoft::graph::invitationParticipantInfo> targets;
        QString tenantId;
        QString terminationReason;
        microsoft::graph::toneInfo toneInfo;
        microsoft::graph::callTranscriptionInfo transcription;
        QList<microsoft::graph::audioRoutingGroup> audioRoutingGroups;
        QList<microsoft::graph::commsOperation> operations;
        QList<microsoft::graph::participant> participants;
    };

    struct accessReviewNotificationRecipientItem {
        microsoft::graph::accessReviewNotificationRecipientScope notificationRecipientScope;
        QString notificationTemplateType;
    };

    struct accessReviewScheduleSettings {
        QList<microsoft::graph::accessReviewApplyAction> applyActions;
        bool autoApplyDecisionsEnabled;
        QString defaultDecision;
        bool defaultDecisionEnabled;
        int instanceDurationInDays;
        bool justificationRequiredOnApproval;
        bool mailNotificationsEnabled;
        std::chrono::system_clock::duration recommendationLookBackDuration;
        bool recommendationsEnabled;
        microsoft::graph::patternedRecurrence recurrence;
        bool reminderNotificationsEnabled;
    };

    struct accessReviewSettings {
        bool accessRecommendationsEnabled;
        int activityDurationInDays;
        bool autoApplyReviewResultsEnabled;
        bool autoReviewEnabled;
        microsoft::graph::autoReviewSettings autoReviewSettings;
        bool justificationRequiredOnApproval;
        bool mailNotificationsEnabled;
        microsoft::graph::accessReviewRecurrenceSettings recurrenceSettings;
        bool remindersEnabled;
    };

    struct businessFlowSettings : graph::accessReviewSettings {
        int durationInDays;
    };

    struct governanceNotificationPolicy {
        QList<QString> enabledTemplateTypes;
        QList<microsoft::graph::governanceNotificationTemplate> notificationTemplates;
    };

    struct governancePolicy {
        QList<microsoft::graph::governanceCriteria> decisionMakerCriteria;
        microsoft::graph::governanceNotificationPolicy notificationPolicy;
    };

    struct accessReview : graph::entity {
        QString businessFlowTemplateId;
        microsoft::graph::userIdentity createdBy;
        QString description;
        QString displayName;
        QDateTime endDateTime;
        microsoft::graph::identity reviewedEntity;
        QString reviewerType;
        microsoft::graph::accessReviewSettings settings;
        QDateTime startDateTime;
        QString status;
        QList<microsoft::graph::accessReviewDecision> decisions;
        QList<microsoft::graph::accessReview> instances;
        QList<microsoft::graph::accessReviewDecision> myDecisions;
        QList<microsoft::graph::accessReviewReviewer> reviewers;
    };

    struct userConsentRequest : graph::request {
        QString reason;
        std::unique_ptr<microsoft::graph::approval> approval;
    };

    struct businessFlow : graph::entity {
        QString customData;
        QString deDuplicationId;
        QString description;
        QString displayName;
        microsoft::graph::governancePolicy policy;
        QString policyTemplateId;
        QString recordVersion;
        QString schemaId;
        microsoft::graph::businessFlowSettings settings;
    };

    struct governancePolicyTemplate : graph::entity {
        QString displayName;
        microsoft::graph::governancePolicy policy;
        microsoft::graph::businessFlowSettings settings;
    };

    struct connectedOrganization : graph::entity {
        QString createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QList<microsoft::graph::identitySource> identitySources;
        QString modifiedBy;
        QDateTime modifiedDateTime;
        microsoft::graph::connectedOrganizationState state;
        QList<microsoft::graph::directoryObject> externalSponsors;
        QList<microsoft::graph::directoryObject> internalSponsors;
    };

    struct agreementFileLocalization : graph::agreementFileProperties {
        QList<microsoft::graph::agreementFileVersion> versions;
    };

    struct conditionalAccessDevices {
        microsoft::graph::conditionalAccessFilter deviceFilter;
        QList<QString> excludeDevices;
        QList<QString> excludeDeviceStates;
        QList<QString> includeDevices;
        QList<QString> includeDeviceStates;
    };

    struct conditionalAccessSessionControls {
        microsoft::graph::applicationEnforcedRestrictionsSessionControl applicationEnforcedRestrictions;
        microsoft::graph::cloudAppSecuritySessionControl cloudAppSecurity;
        bool disableResilienceDefaults;
        microsoft::graph::persistentBrowserSessionControl persistentBrowser;
        microsoft::graph::signInFrequencySessionControl signInFrequency;
    };

    struct accessPackageLocalizedContent {
        QString defaultText;
        QList<microsoft::graph::accessPackageLocalizedText> localizedTexts;
    };

    struct requestSchedule {
        microsoft::graph::expirationPattern expiration;
        microsoft::graph::patternedRecurrence recurrence;
        QDateTime startDateTime;
    };

    struct accessPackageResourceAttribute {
        microsoft::graph::accessPackageResourceAttributeDestination attributeDestination;
        QString attributeName;
        microsoft::graph::accessPackageResourceAttributeSource attributeSource;
        QString id;
    };

    struct approvalStage {
        int approvalStageTimeOutInDays;
        QList<microsoft::graph::userSet> escalationApprovers;
        int escalationTimeInMinutes;
        bool isApproverJustificationRequired;
        bool isEscalationEnabled;
        QList<microsoft::graph::userSet> primaryApprovers;
    };

    struct accessPackageSubject : graph::entity {
        QString altSecId;
        QString connectedOrganizationId;
        QString displayName;
        QString email;
        QString objectId;
        QString onPremisesSecurityIdentifier;
        QString principalName;
        QString type;
        std::unique_ptr<microsoft::graph::connectedOrganization> connectedOrganization;
    };

    struct applyLabelAction : graph::informationProtectionAction {
        QList<microsoft::graph::informationProtectionAction> actions;
        microsoft::graph::actionSource actionSource;
        microsoft::graph::labelDetails label;
        QList<QUuid> responsibleSensitiveTypeIds;
    };

    struct androidEnrollmentCompanyCode {
        QString enrollmentToken;
        QString qrCodeContent;
        microsoft::graph::mimeContent qrCodeImage;
    };

    struct win32LobAppAssignmentSettings : graph::mobileAppAssignmentSettings {
        microsoft::graph::win32LobAppDeliveryOptimizationPriority deliveryOptimizationPriority;
        microsoft::graph::mobileAppInstallTimeSettings installTimeSettings;
        microsoft::graph::win32LobAppNotification notifications;
        microsoft::graph::win32LobAppRestartSettings restartSettings;
    };

    struct managedDeviceMobileAppConfiguration : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QList<QString> targetedMobileApps;
        int version;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationAssignment> assignments;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationDeviceStatus> deviceStatuses;
        std::unique_ptr<microsoft::graph::managedDeviceMobileAppConfigurationDeviceSummary> deviceStatusSummary;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationUserStatus> userStatuses;
        std::unique_ptr<microsoft::graph::managedDeviceMobileAppConfigurationUserSummary> userStatusSummary;
    };

    struct androidForWorkMobileAppConfiguration : graph::managedDeviceMobileAppConfiguration {
        QString packageId;
        QString payloadJson;
        QList<microsoft::graph::androidPermissionAction> permissionActions;
        microsoft::graph::androidProfileApplicability profileApplicability;
    };

    struct androidManagedStoreAppConfiguration : graph::managedDeviceMobileAppConfiguration {
        bool appSupportsOemConfig;
        QString packageId;
        QString payloadJson;
        QList<microsoft::graph::androidPermissionAction> permissionActions;
        microsoft::graph::androidProfileApplicability profileApplicability;
    };

    struct iosLobAppProvisioningConfiguration : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime expirationDateTime;
        QDateTime lastModifiedDateTime;
        QByteArray payload;
        QString payloadFileName;
        QList<QString> roleScopeTagIds;
        int version;
        QList<microsoft::graph::iosLobAppProvisioningConfigurationAssignment> assignments;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationDeviceStatus> deviceStatuses;
        QList<microsoft::graph::mobileAppProvisioningConfigGroupAssignment> groupAssignments;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationUserStatus> userStatuses;
    };

    struct managedEBook : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QString informationUrl;
        microsoft::graph::mimeContent largeCover;
        QDateTime lastModifiedDateTime;
        QString privacyInformationUrl;
        QDateTime publishedDateTime;
        QString publisher;
        QList<microsoft::graph::managedEBookAssignment> assignments;
        QList<microsoft::graph::managedEBookCategory> categories;
        QList<microsoft::graph::deviceInstallState> deviceStates;
        std::unique_ptr<microsoft::graph::eBookInstallSummary> installSummary;
        QList<microsoft::graph::userInstallStateSummary> userStateSummary;
    };

    struct policySet : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        microsoft::graph::errorCode errorCode;
        QList<QString> guidedDeploymentTags;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTags;
        microsoft::graph::policySetStatus status;
        QList<microsoft::graph::policySetAssignment> assignments;
        QList<microsoft::graph::policySetItem> items;
    };

    struct vppToken : graph::entity {
        QString appleId;
        bool automaticallyUpdateApps;
        bool claimTokenManagementFromExternalMdm;
        QString countryOrRegion;
        bool dataSharingConsentGranted;
        QString displayName;
        QDateTime expirationDateTime;
        QDateTime lastModifiedDateTime;
        QDateTime lastSyncDateTime;
        microsoft::graph::vppTokenSyncStatus lastSyncStatus;
        QString locationName;
        QString organizationName;
        QList<QString> roleScopeTagIds;
        microsoft::graph::vppTokenState state;
        QString token;
        QList<microsoft::graph::vppTokenActionResult> tokenActionResults;
        microsoft::graph::vppTokenAccountType vppTokenAccountType;
    };

    struct windowsManagementApp : graph::entity {
        QString availableVersion;
        microsoft::graph::managedInstallerStatus managedInstaller;
        QString managedInstallerConfiguredDateTime;
        QList<microsoft::graph::windowsManagementAppHealthState> healthStates;
    };

    struct targetedManagedAppProtection : graph::managedAppProtection {
        microsoft::graph::targetedManagedAppGroupType appGroupType;
        bool isAssigned;
        microsoft::graph::appManagementLevel targetedAppManagementLevels;
        QList<microsoft::graph::targetedManagedAppPolicyAssignment> assignments;
    };

    struct windowsInformationProtection : graph::managedAppPolicy {
        bool azureRightsManagementServicesAllowed;
        microsoft::graph::windowsInformationProtectionDataRecoveryCertificate dataRecoveryCertificate;
        microsoft::graph::windowsInformationProtectionEnforcementLevel enforcementLevel;
        QString enterpriseDomain;
        QList<microsoft::graph::windowsInformationProtectionResourceCollection> enterpriseInternalProxyServers;
        QList<microsoft::graph::windowsInformationProtectionIPRangeCollection> enterpriseIPRanges;
        bool enterpriseIPRangesAreAuthoritative;
        QList<microsoft::graph::windowsInformationProtectionResourceCollection> enterpriseNetworkDomainNames;
        QList<microsoft::graph::windowsInformationProtectionResourceCollection> enterpriseProtectedDomainNames;
        QList<microsoft::graph::windowsInformationProtectionProxiedDomainCollection> enterpriseProxiedDomains;
        QList<microsoft::graph::windowsInformationProtectionResourceCollection> enterpriseProxyServers;
        bool enterpriseProxyServersAreAuthoritative;
        QList<microsoft::graph::windowsInformationProtectionApp> exemptApps;
        bool iconsVisible;
        bool indexingEncryptedStoresOrItemsBlocked;
        bool isAssigned;
        QList<microsoft::graph::windowsInformationProtectionResourceCollection> neutralDomainResources;
        QList<microsoft::graph::windowsInformationProtectionApp> protectedApps;
        bool protectionUnderLockConfigRequired;
        bool revokeOnUnenrollDisabled;
        QUuid rightsManagementServicesTemplateId;
        QList<microsoft::graph::windowsInformationProtectionResourceCollection> smbAutoEncryptedFileExtensions;
        QList<microsoft::graph::targetedManagedAppPolicyAssignment> assignments;
        QList<microsoft::graph::windowsInformationProtectionAppLockerFile> exemptAppLockerFiles;
        QList<microsoft::graph::windowsInformationProtectionAppLockerFile> protectedAppLockerFiles;
    };

    struct mdmWindowsInformationProtectionPolicy : graph::windowsInformationProtection {
    };

    struct windowsInformationProtectionPolicy : graph::windowsInformationProtection {
        int daysWithoutContactBeforeUnenroll;
        QString mdmEnrollmentUrl;
        int minutesOfInactivityBeforeDeviceLock;
        int numberOfPastPinsRemembered;
        int passwordMaximumAttemptCount;
        int pinExpirationDays;
        microsoft::graph::windowsInformationProtectionPinCharacterRequirements pinLowercaseLetters;
        int pinMinimumLength;
        microsoft::graph::windowsInformationProtectionPinCharacterRequirements pinSpecialCharacters;
        microsoft::graph::windowsInformationProtectionPinCharacterRequirements pinUppercaseLetters;
        bool revokeOnMdmHandoffDisabled;
        bool windowsHelloForBusinessBlocked;
    };

    struct iosMobileAppConfiguration : graph::managedDeviceMobileAppConfiguration {
        QByteArray encodedSettingXml;
        QList<microsoft::graph::appConfigurationSettingItem> settings;
    };

    struct mobileAppContent : graph::entity {
        QList<microsoft::graph::mobileContainedApp> containedApps;
        QList<microsoft::graph::mobileAppContentFile> files;
    };

    struct auditActor {
        QString applicationDisplayName;
        QString applicationId;
        QString ipAddress;
        QString remoteTenantId;
        QString remoteUserId;
        QString servicePrincipalName;
        QString type;
        QString userId;
        QList<QString> userPermissions;
        QString userPrincipalName;
        QList<microsoft::graph::roleScopeTagInfo> userRoleScopeTags;
    };

    struct iosVppEBook : graph::managedEBook {
        QString appleId;
        QList<QString> genres;
        QString language;
        QList<QString> roleScopeTagIds;
        QString seller;
        int totalLicenseCount;
        int usedLicenseCount;
        QString vppOrganizationName;
        QUuid vppTokenId;
    };

    struct assignmentFilterEvaluationSummary {
        QString assignmentFilterDisplayName;
        QString assignmentFilterId;
        QDateTime assignmentFilterLastModifiedDateTime;
        microsoft::graph::devicePlatformType assignmentFilterPlatform;
        microsoft::graph::deviceAndAppManagementAssignmentFilterType assignmentFilterType;
        QList<microsoft::graph::assignmentFilterTypeAndEvaluationResult> assignmentFilterTypeAndEvaluationResults;
        QDateTime evaluationDateTime;
        microsoft::graph::assignmentFilterEvaluationResult evaluationResult;
    };

    struct assignmentFilterStatusDetails {
        QList<microsoft::graph::keyValuePair> deviceProperties;
        QList<microsoft::graph::assignmentFilterEvaluationSummary> evalutionSummaries;
        QString managedDeviceId;
        QString payloadId;
        QString userId;
    };

    struct managedMobileApp : graph::entity {
        microsoft::graph::mobileAppIdentifier mobileAppIdentifier;
        QString version;
    };

    struct managedAppPolicyDeploymentSummary : graph::entity {
        int configurationDeployedUserCount;
        QList<microsoft::graph::managedAppPolicyDeploymentSummaryPerApp> configurationDeploymentSummaryPerApp;
        QString displayName;
        QDateTime lastRefreshTime;
        QString version;
    };

    struct deviceComplianceScheduledActionForRule : graph::entity {
        QString ruleName;
        QList<microsoft::graph::deviceComplianceActionItem> scheduledActionConfigurations;
    };

    struct officeClientConfiguration : graph::entity {
        QList<microsoft::graph::officeClientCheckinStatus> checkinStatuses;
        QString description;
        QString displayName;
        QByteArray policyPayload;
        int priority;
        microsoft::graph::officeUserCheckinSummary userCheckinSummary;
        QByteArray userPreferencePayload;
        QList<microsoft::graph::officeClientConfigurationAssignment> assignments;
    };

    struct officeConfiguration {
        QList<microsoft::graph::officeClientCheckinStatus> tenantCheckinStatuses;
        microsoft::graph::officeUserCheckinSummary tenantUserCheckinSummary;
        QList<microsoft::graph::officeClientConfiguration> clientConfigurations;
    };

    struct windowsOfficeClientConfiguration : graph::officeClientConfiguration {
    };

    struct windowsOfficeClientSecurityConfiguration : graph::officeClientConfiguration {
    };

    struct appleVpnAlwaysOnConfiguration {
        microsoft::graph::vpnServiceExceptionAction airPrintExceptionAction;
        bool allowAllCaptiveNetworkPlugins;
        bool allowCaptiveWebSheet;
        microsoft::graph::specifiedCaptiveNetworkPlugins allowedCaptiveNetworkPlugins;
        microsoft::graph::vpnServiceExceptionAction cellularExceptionAction;
        int natKeepAliveIntervalInSeconds;
        bool natKeepAliveOffloadEnable;
        microsoft::graph::vpnTunnelConfigurationType tunnelConfiguration;
        bool userToggleEnabled;
        microsoft::graph::vpnServiceExceptionAction voicemailExceptionAction;
    };

    struct bitLockerFixedDrivePolicy {
        microsoft::graph::bitLockerEncryptionMethod encryptionMethod;
        microsoft::graph::bitLockerRecoveryOptions recoveryOptions;
        bool requireEncryptionForWriteAccess;
    };

    struct credentialSingleSignOnExtension : graph::singleSignOnExtension {
        QList<microsoft::graph::keyTypedValuePair> configurations;
        QList<QString> domains;
        QString extensionIdentifier;
        QString realm;
        QString teamIdentifier;
    };

    struct deviceCompliancePolicySettingState {
        QString currentValue;
        long long errorCode;
        QString errorDescription;
        QString instanceDisplayName;
        QString setting;
        QString settingInstanceId;
        QString settingName;
        QList<microsoft::graph::settingSource> sources;
        microsoft::graph::complianceStatus state;
        QString userEmail;
        QString userId;
        QString userName;
        QString userPrincipalName;
    };

    struct iosHomeScreenFolder : graph::iosHomeScreenItem {
        QList<microsoft::graph::iosHomeScreenFolderPage> pages;
    };

    struct windowsKioskSingleUWPApp : graph::windowsKioskAppConfiguration {
        microsoft::graph::windowsKioskUWPApp uwpApp;
    };

    struct windowsKioskSingleWin32App : graph::windowsKioskAppConfiguration {
        microsoft::graph::windowsKioskWin32App win32App;
    };

    struct macOSSoftwareUpdateCategorySummary : graph::entity {
        QString deviceId;
        QString displayName;
        int failedUpdateCount;
        QDateTime lastUpdatedDateTime;
        int successfulUpdateCount;
        int totalUpdateCount;
        microsoft::graph::macOSSoftwareUpdateCategory updateCategory;
        QString userId;
        QList<microsoft::graph::macOSSoftwareUpdateStateSummary> updateStateSummaries;
    };

    struct deviceManagementConfigurationSettingInstance {
        QString settingDefinitionId;
        microsoft::graph::deviceManagementConfigurationSettingInstanceTemplateReference settingInstanceTemplateReference;
    };

    struct deviceManagementConfigurationSettingValue {
        microsoft::graph::deviceManagementConfigurationSettingValueTemplateReference settingValueTemplateReference;
    };

    struct deviceManagementConfigurationChoiceSettingValue : graph::deviceManagementConfigurationSettingValue {
        QList<microsoft::graph::deviceManagementConfigurationSettingInstance> children;
        QString value;
    };

    struct deviceManagementConfigurationChoiceSettingInstance : graph::deviceManagementConfigurationSettingInstance {
        microsoft::graph::deviceManagementConfigurationChoiceSettingValue choiceSettingValue;
    };

    struct deviceManagementConfigurationChoiceSettingValueDefinitionTemplate {
        QList<microsoft::graph::deviceManagementConfigurationOptionDefinitionTemplate> allowedOptions;
    };

    struct deviceManagementConfigurationGroupSettingValue : graph::deviceManagementConfigurationSettingValue {
        QList<microsoft::graph::deviceManagementConfigurationSettingInstance> children;
    };

    struct deviceManagementConfigurationGroupSettingCollectionInstanceTemplate : graph::deviceManagementConfigurationSettingInstanceTemplate {
        bool allowUnmanagedValues;
        QList<microsoft::graph::deviceManagementConfigurationGroupSettingValueTemplate> groupSettingCollectionValueTemplate;
    };

    struct deviceManagementConfigurationGroupSettingInstance : graph::deviceManagementConfigurationSettingInstance {
        microsoft::graph::deviceManagementConfigurationGroupSettingValue groupSettingValue;
    };

    struct deviceManagementConfigurationSimpleSettingValue : graph::deviceManagementConfigurationSettingValue {
    };

    struct deviceManagementConfigurationIntegerSettingValue : graph::deviceManagementConfigurationSimpleSettingValue {
        int value;
    };

    struct deviceManagementConfigurationOptionDefinition {
        QList<microsoft::graph::deviceManagementConfigurationSettingDependedOnBy> dependedOnBy;
        QList<microsoft::graph::deviceManagementConfigurationDependentOn> dependentOn;
        QString description;
        QString displayName;
        QString helpText;
        QString itemId;
        QString name;
        microsoft::graph::deviceManagementConfigurationSettingValue optionValue;
    };

    struct deviceManagementConfigurationStringSettingValue : graph::deviceManagementConfigurationSimpleSettingValue {
        QString value;
    };

    struct deviceManagementConfigurationReferenceSettingValue : graph::deviceManagementConfigurationStringSettingValue {
        QString note;
    };

    struct deviceManagementConfigurationSettingGroupCollectionInstance : graph::deviceManagementConfigurationSettingInstance {
    };

    struct deviceManagementConfigurationSettingGroupInstance : graph::deviceManagementConfigurationSettingInstance {
    };

    struct deviceManagementConfigurationSimpleSettingCollectionInstance : graph::deviceManagementConfigurationSettingInstance {
        QList<microsoft::graph::deviceManagementConfigurationSimpleSettingValue> simpleSettingCollectionValue;
    };

    struct deviceManagementConfigurationSimpleSettingInstance : graph::deviceManagementConfigurationSettingInstance {
        microsoft::graph::deviceManagementConfigurationSimpleSettingValue simpleSettingValue;
    };

    struct deviceManagementConfigurationChoiceSettingDefinition : graph::deviceManagementConfigurationSettingDefinition {
        QString defaultOptionId;
        QList<microsoft::graph::deviceManagementConfigurationOptionDefinition> options;
    };

    struct deviceManagementConfigurationChoiceSettingCollectionDefinition : graph::deviceManagementConfigurationChoiceSettingDefinition {
        int maximumCount;
        int minimumCount;
    };

    struct deviceManagementConfigurationSetting : graph::entity {
        microsoft::graph::deviceManagementConfigurationSettingInstance settingInstance;
        QList<microsoft::graph::deviceManagementConfigurationSettingDefinition> settingDefinitions;
    };

    struct deviceManagementConfigurationSettingGroupDefinition : graph::deviceManagementConfigurationSettingDefinition {
        QList<QString> childIds;
        QList<microsoft::graph::deviceManagementConfigurationSettingDependedOnBy> dependedOnBy;
        QList<microsoft::graph::deviceManagementConfigurationDependentOn> dependentOn;
    };

    struct deviceManagementConfigurationSettingGroupCollectionDefinition : graph::deviceManagementConfigurationSettingGroupDefinition {
        int maximumCount;
        int minimumCount;
    };

    struct deviceManagementConfigurationSimpleSettingDefinition : graph::deviceManagementConfigurationSettingDefinition {
        microsoft::graph::deviceManagementConfigurationSettingValue defaultValue;
        QList<microsoft::graph::deviceManagementConfigurationSettingDependedOnBy> dependedOnBy;
        QList<microsoft::graph::deviceManagementConfigurationDependentOn> dependentOn;
        microsoft::graph::deviceManagementConfigurationSettingValueDefinition valueDefinition;
    };

    struct deviceManagementConfigurationSimpleSettingCollectionDefinition : graph::deviceManagementConfigurationSimpleSettingDefinition {
        int maximumCount;
        int minimumCount;
    };

    struct deviceManagementExchangeAccessRule {
        microsoft::graph::deviceManagementExchangeAccessLevel accessLevel;
        microsoft::graph::deviceManagementExchangeDeviceClass deviceClass;
    };

    struct deviceComanagementAuthorityConfiguration : graph::deviceEnrollmentConfiguration {
        QString configurationManagerAgentCommandLineArgument;
        bool installConfigurationManagerAgent;
        int managedDeviceAuthority;
    };

    struct deviceEnrollmentLimitConfiguration : graph::deviceEnrollmentConfiguration {
        int limit;
    };

    struct deviceEnrollmentPlatformRestrictionConfiguration : graph::deviceEnrollmentConfiguration {
        microsoft::graph::deviceEnrollmentPlatformRestriction platformRestriction;
        microsoft::graph::enrollmentRestrictionPlatformType platformType;
    };

    struct deviceEnrollmentPlatformRestrictionsConfiguration : graph::deviceEnrollmentConfiguration {
        microsoft::graph::deviceEnrollmentPlatformRestriction androidForWorkRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction androidRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction aospRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction iosRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction macOSRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction macRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction windowsHomeSkuRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction windowsMobileRestriction;
        microsoft::graph::deviceEnrollmentPlatformRestriction windowsRestriction;
    };

    struct deviceEnrollmentWindowsHelloForBusinessConfiguration : graph::deviceEnrollmentConfiguration {
        microsoft::graph::enablement enhancedBiometricsState;
        int pinExpirationInDays;
        microsoft::graph::windowsHelloForBusinessPinUsage pinLowercaseCharactersUsage;
        int pinMaximumLength;
        int pinMinimumLength;
        int pinPreviousBlockCount;
        microsoft::graph::windowsHelloForBusinessPinUsage pinSpecialCharactersUsage;
        microsoft::graph::windowsHelloForBusinessPinUsage pinUppercaseCharactersUsage;
        bool remotePassportEnabled;
        bool securityDeviceRequired;
        microsoft::graph::enablement securityKeyForSignIn;
        microsoft::graph::enablement state;
        bool unlockWithBiometricsEnabled;
    };

    struct windows10EnrollmentCompletionPageConfiguration : graph::deviceEnrollmentConfiguration {
        bool allowDeviceResetOnInstallFailure;
        bool allowDeviceUseOnInstallFailure;
        bool allowLogCollectionOnInstallFailure;
        bool blockDeviceSetupRetryByUser;
        QString customErrorMessage;
        bool disableUserStatusTrackingAfterFirstUser;
        int installProgressTimeoutInMinutes;
        QList<QString> selectedMobileAppIds;
        bool showInstallationProgress;
        bool trackInstallProgressForAutopilotOnly;
    };

    struct deviceManagementEnumConstraint : graph::deviceManagementConstraint {
        QList<microsoft::graph::deviceManagementEnumValue> values;
    };

    struct deviceManagementAbstractComplexSettingDefinition : graph::deviceManagementSettingDefinition {
        QList<QString> implementations;
    };

    struct deviceManagementCollectionSettingDefinition : graph::deviceManagementSettingDefinition {
        QString elementDefinitionId;
    };

    struct deviceManagementComplexSettingDefinition : graph::deviceManagementSettingDefinition {
        QList<QString> propertyDefinitionIds;
    };

    struct deviceHealthScriptRemediationHistory {
        QList<microsoft::graph::deviceHealthScriptRemediationHistoryData> historyData;
        QDateTime lastModifiedDateTime;
    };

    struct updateWindowsDeviceAccountActionParameter {
        bool calendarSyncEnabled;
        microsoft::graph::windowsDeviceAccount deviceAccount;
        QString deviceAccountEmail;
        QString exchangeServer;
        bool passwordRotationEnabled;
        QString sessionInitiationProtocalAddress;
    };

    struct windows10XCertificateProfile : graph::deviceManagementResourceAccessProfileBase {
    };

    struct windows10XSCEPCertificateProfile : graph::windows10XCertificateProfile {
        microsoft::graph::certificateStore certificateStore;
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        QList<microsoft::graph::hashAlgorithms> hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyStorageProviderOption keyStorageProvider;
        microsoft::graph::keyUsages keyUsage;
        int renewalThresholdPercentage;
        QUuid rootCertificateId;
        QList<QString> scepServerUrls;
        QList<microsoft::graph::windows10XCustomSubjectAlternativeName> subjectAlternativeNameFormats;
        QString subjectNameFormatString;
    };

    struct windows10XTrustedRootCertificate : graph::deviceManagementResourceAccessProfileBase {
        QString certFileName;
        microsoft::graph::certificateDestinationStore destinationStore;
        QByteArray trustedRootCertificate;
    };

    struct windows10XVpnConfiguration : graph::deviceManagementResourceAccessProfileBase {
        QUuid authenticationCertificateId;
        QByteArray customXml;
        QString customXmlFileName;
    };

    struct windows10XWifiConfiguration : graph::deviceManagementResourceAccessProfileBase {
        QUuid authenticationCertificateId;
        QByteArray customXml;
        QString customXmlFileName;
    };

    struct importedWindowsAutopilotDeviceIdentityUpload : graph::entity {
        QDateTime createdDateTimeUtc;
        microsoft::graph::importedWindowsAutopilotDeviceIdentityUploadStatus status;
        QList<microsoft::graph::importedWindowsAutopilotDeviceIdentity> deviceIdentities;
    };

    struct androidManagedAppRegistration : graph::managedAppRegistration {
        QString patchVersion;
    };

    struct iosManagedAppRegistration : graph::managedAppRegistration {
    };

    struct securityConfigurationTask : graph::deviceAppManagementTask {
        microsoft::graph::endpointSecurityConfigurationApplicablePlatform applicablePlatform;
        microsoft::graph::endpointSecurityConfigurationType endpointSecurityPolicy;
        microsoft::graph::endpointSecurityConfigurationProfileType endpointSecurityPolicyProfile;
        QString insights;
        QList<microsoft::graph::keyValuePair> intendedSettings;
        int managedDeviceCount;
        QList<microsoft::graph::vulnerableManagedDevice> managedDevices;
    };

    struct deviceManagementTroubleshootingErrorDetails {
        QString context;
        QString failure;
        QString failureDetails;
        QString remediation;
        QList<microsoft::graph::deviceManagementTroubleshootingErrorResource> resources;
    };

    struct mobileAppIntentAndStateDetail {
        QString applicationId;
        QString displayName;
        QString displayVersion;
        microsoft::graph::resultantAppState installState;
        microsoft::graph::mobileAppIntent mobileAppIntent;
        QList<microsoft::graph::mobileAppSupportedDeviceType> supportedDeviceTypes;
    };

    struct serviceHealth : graph::entity {
        QString service;
        microsoft::graph::serviceHealthStatus status;
        QList<microsoft::graph::serviceHealthIssue> issues;
    };

    struct bucketAggregationDefinition {
        bool isDescending;
        int minimumCount;
        QString prefixFilter;
        QList<microsoft::graph::bucketAggregationRange> ranges;
        microsoft::graph::bucketAggregationSortProperty sortBy;
    };

    struct searchAlteration {
        QString alteredHighlightedQueryString;
        QString alteredQueryString;
        QList<microsoft::graph::alteredQueryToken> alteredQueryTokens;
    };

    struct searchAggregation {
        QList<microsoft::graph::searchBucket> buckets;
        QString field;
    };

    struct searchHitsContainer {
        QList<microsoft::graph::searchAggregation> aggregations;
        QList<microsoft::graph::searchHit> hits;
        bool moreResultsAvailable;
        int total;
    };

    struct searchQuery {
        QString queryString;
        microsoft::graph::searchQueryString query_string;
    };

    struct searchResultSet {
        QList<microsoft::graph::searchHitsContainer> hitsContainers;
        microsoft::graph::resultTemplateDictionary resultTemplates;
        QList<QString> searchTerms;
    };

    struct customer : graph::entity {
        microsoft::graph::postalAddressType address;
        QString blocked;
        QString currencyCode;
        QUuid currencyId;
        QString displayName;
        QString email;
        QDateTime lastModifiedDateTime;
        QString number;
        QUuid paymentMethodId;
        QUuid paymentTermsId;
        QString phoneNumber;
        QUuid shipmentMethodId;
        QString taxAreaDisplayName;
        QUuid taxAreaId;
        bool taxLiable;
        QString taxRegistrationNumber;
        QString type;
        QString website;
        std::unique_ptr<microsoft::graph::currency> currency;
        std::unique_ptr<microsoft::graph::paymentMethod> paymentMethod;
        std::unique_ptr<microsoft::graph::paymentTerm> paymentTerm;
        QList<microsoft::graph::picture> picture;
        std::unique_ptr<microsoft::graph::shipmentMethod> shipmentMethod;
    };

    struct dimension : graph::entity {
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::dimensionValue> dimensionValues;
    };

    struct employee : graph::entity {
        microsoft::graph::postalAddressType address;
        QDate birthDate;
        QString displayName;
        QString email;
        QDate employmentDate;
        QString givenName;
        QString jobTitle;
        QDateTime lastModifiedDateTime;
        QString middleName;
        QString mobilePhone;
        QString number;
        QString personalEmail;
        QString phoneNumber;
        QString statisticsGroupCode;
        QString status;
        QString surname;
        QDate terminationDate;
        QList<microsoft::graph::picture> picture;
    };

    struct item : graph::entity {
        QUuid baseUnitOfMeasureId;
        bool blocked;
        QString displayName;
        QString gtin;
        double inventory;
        QString itemCategoryCode;
        QUuid itemCategoryId;
        QDateTime lastModifiedDateTime;
        QString number;
        bool priceIncludesTax;
        QString taxGroupCode;
        QUuid taxGroupId;
        QString type;
        double unitCost;
        double unitPrice;
        std::unique_ptr<microsoft::graph::itemCategory> itemCategory;
        QList<microsoft::graph::picture> picture;
    };

    struct purchaseInvoiceLine : graph::entity {
        QUuid accountId;
        double amountExcludingTax;
        double amountIncludingTax;
        QString description;
        double discountAmount;
        bool discountAppliedBeforeTax;
        double discountPercent;
        QUuid documentId;
        QDate expectedReceiptDate;
        double invoiceDiscountAllocation;
        QUuid itemId;
        QString lineType;
        double netAmount;
        double netAmountIncludingTax;
        double netTaxAmount;
        double quantity;
        int sequence;
        QString taxCode;
        double taxPercent;
        double totalTaxAmount;
        double unitCost;
        std::unique_ptr<microsoft::graph::account> account;
        std::unique_ptr<microsoft::graph::item> item;
    };

    struct purchaseInvoice : graph::entity {
        microsoft::graph::postalAddressType buyFromAddress;
        QString currencyCode;
        QUuid currencyId;
        double discountAmount;
        bool discountAppliedBeforeTax;
        QDate dueDate;
        QDate invoiceDate;
        QDateTime lastModifiedDateTime;
        QString number;
        microsoft::graph::postalAddressType payToAddress;
        QString payToContact;
        QString payToName;
        QUuid payToVendorId;
        QString payToVendorNumber;
        bool pricesIncludeTax;
        microsoft::graph::postalAddressType shipToAddress;
        QString shipToContact;
        QString shipToName;
        QString status;
        double totalAmountExcludingTax;
        double totalAmountIncludingTax;
        double totalTaxAmount;
        QUuid vendorId;
        QString vendorInvoiceNumber;
        QString vendorName;
        QString vendorNumber;
        std::unique_ptr<microsoft::graph::currency> currency;
        QList<microsoft::graph::purchaseInvoiceLine> purchaseInvoiceLines;
        std::unique_ptr<microsoft::graph::vendor> vendor;
    };

    struct salesCreditMemoLine : graph::entity {
        QUuid accountId;
        double amountExcludingTax;
        double amountIncludingTax;
        QString description;
        double discountAmount;
        bool discountAppliedBeforeTax;
        double discountPercent;
        QUuid documentId;
        double invoiceDiscountAllocation;
        QUuid itemId;
        QString lineType;
        double netAmount;
        double netAmountIncludingTax;
        double netTaxAmount;
        double quantity;
        int sequence;
        QDate shipmentDate;
        QString taxCode;
        double taxPercent;
        double totalTaxAmount;
        QUuid unitOfMeasureId;
        double unitPrice;
        std::unique_ptr<microsoft::graph::account> account;
        std::unique_ptr<microsoft::graph::item> item;
    };

    struct salesCreditMemo : graph::entity {
        microsoft::graph::postalAddressType billingPostalAddress;
        QUuid billToCustomerId;
        QString billToCustomerNumber;
        QString billToName;
        QDate creditMemoDate;
        QString currencyCode;
        QUuid currencyId;
        QUuid customerId;
        QString customerName;
        QString customerNumber;
        double discountAmount;
        bool discountAppliedBeforeTax;
        QDate dueDate;
        QString email;
        QString externalDocumentNumber;
        QUuid invoiceId;
        QString invoiceNumber;
        QDateTime lastModifiedDateTime;
        QString number;
        QUuid paymentTermsId;
        QString phoneNumber;
        bool pricesIncludeTax;
        QString salesperson;
        microsoft::graph::postalAddressType sellingPostalAddress;
        QString status;
        double totalAmountExcludingTax;
        double totalAmountIncludingTax;
        double totalTaxAmount;
        std::unique_ptr<microsoft::graph::currency> currency;
        std::unique_ptr<microsoft::graph::customer> customer;
        std::unique_ptr<microsoft::graph::paymentTerm> paymentTerm;
        QList<microsoft::graph::salesCreditMemoLine> salesCreditMemoLines;
    };

    struct salesInvoiceLine : graph::entity {
        QUuid accountId;
        double amountExcludingTax;
        double amountIncludingTax;
        QString description;
        double discountAmount;
        bool discountAppliedBeforeTax;
        double discountPercent;
        QUuid documentId;
        double invoiceDiscountAllocation;
        QUuid itemId;
        QString lineType;
        double netAmount;
        double netAmountIncludingTax;
        double netTaxAmount;
        double quantity;
        int sequence;
        QDate shipmentDate;
        QString taxCode;
        double taxPercent;
        double totalTaxAmount;
        QUuid unitOfMeasureId;
        double unitPrice;
        std::unique_ptr<microsoft::graph::account> account;
        std::unique_ptr<microsoft::graph::item> item;
    };

    struct salesInvoice : graph::entity {
        microsoft::graph::postalAddressType billingPostalAddress;
        QUuid billToCustomerId;
        QString billToCustomerNumber;
        QString billToName;
        QString currencyCode;
        QUuid currencyId;
        QUuid customerId;
        QString customerName;
        QString customerNumber;
        QString customerPurchaseOrderReference;
        double discountAmount;
        bool discountAppliedBeforeTax;
        QDate dueDate;
        QString email;
        QString externalDocumentNumber;
        QDate invoiceDate;
        QDateTime lastModifiedDateTime;
        QString number;
        QUuid orderId;
        QString orderNumber;
        QUuid paymentTermsId;
        QString phoneNumber;
        bool pricesIncludeTax;
        QString salesperson;
        microsoft::graph::postalAddressType sellingPostalAddress;
        QUuid shipmentMethodId;
        microsoft::graph::postalAddressType shippingPostalAddress;
        QString shipToContact;
        QString shipToName;
        QString status;
        double totalAmountExcludingTax;
        double totalAmountIncludingTax;
        double totalTaxAmount;
        std::unique_ptr<microsoft::graph::currency> currency;
        std::unique_ptr<microsoft::graph::customer> customer;
        std::unique_ptr<microsoft::graph::paymentTerm> paymentTerm;
        QList<microsoft::graph::salesInvoiceLine> salesInvoiceLines;
        std::unique_ptr<microsoft::graph::shipmentMethod> shipmentMethod;
    };

    struct salesOrderLine : graph::entity {
        QUuid accountId;
        double amountExcludingTax;
        double amountIncludingTax;
        QString description;
        double discountAmount;
        bool discountAppliedBeforeTax;
        double discountPercent;
        QUuid documentId;
        double invoiceDiscountAllocation;
        double invoicedQuantity;
        double invoiceQuantity;
        QUuid itemId;
        QString lineType;
        double netAmount;
        double netAmountIncludingTax;
        double netTaxAmount;
        double quantity;
        int sequence;
        QDate shipmentDate;
        double shippedQuantity;
        double shipQuantity;
        QString taxCode;
        double taxPercent;
        double totalTaxAmount;
        QUuid unitOfMeasureId;
        double unitPrice;
        std::unique_ptr<microsoft::graph::account> account;
        std::unique_ptr<microsoft::graph::item> item;
    };

    struct salesOrder : graph::entity {
        microsoft::graph::postalAddressType billingPostalAddress;
        QUuid billToCustomerId;
        QString billToCustomerNumber;
        QString billToName;
        QString currencyCode;
        QUuid currencyId;
        QUuid customerId;
        QString customerName;
        QString customerNumber;
        double discountAmount;
        bool discountAppliedBeforeTax;
        QString email;
        QString externalDocumentNumber;
        bool fullyShipped;
        QDateTime lastModifiedDateTime;
        QString number;
        QDate orderDate;
        bool partialShipping;
        QUuid paymentTermsId;
        QString phoneNumber;
        bool pricesIncludeTax;
        QDate requestedDeliveryDate;
        QString salesperson;
        microsoft::graph::postalAddressType sellingPostalAddress;
        microsoft::graph::postalAddressType shippingPostalAddress;
        QString shipToContact;
        QString shipToName;
        QString status;
        double totalAmountExcludingTax;
        double totalAmountIncludingTax;
        double totalTaxAmount;
        std::unique_ptr<microsoft::graph::currency> currency;
        std::unique_ptr<microsoft::graph::customer> customer;
        std::unique_ptr<microsoft::graph::paymentTerm> paymentTerm;
        QList<microsoft::graph::salesOrderLine> salesOrderLines;
    };

    struct salesQuoteLine : graph::entity {
        QUuid accountId;
        double amountExcludingTax;
        double amountIncludingTax;
        QString description;
        double discountAmount;
        bool discountAppliedBeforeTax;
        double discountPercent;
        QUuid documentId;
        QUuid itemId;
        QString lineType;
        double netAmount;
        double netAmountIncludingTax;
        double netTaxAmount;
        double quantity;
        int sequence;
        QString taxCode;
        double taxPercent;
        double totalTaxAmount;
        QUuid unitOfMeasureId;
        double unitPrice;
        std::unique_ptr<microsoft::graph::account> account;
        std::unique_ptr<microsoft::graph::item> item;
    };

    struct salesQuote : graph::entity {
        QDate acceptedDate;
        microsoft::graph::postalAddressType billingPostalAddress;
        QUuid billToCustomerId;
        QString billToCustomerNumber;
        QString billToName;
        QString currencyCode;
        QUuid currencyId;
        QUuid customerId;
        QString customerName;
        QString customerNumber;
        double discountAmount;
        QDate documentDate;
        QDate dueDate;
        QString email;
        QString externalDocumentNumber;
        QDateTime lastModifiedDateTime;
        QString number;
        QUuid paymentTermsId;
        QString phoneNumber;
        QString salesperson;
        microsoft::graph::postalAddressType sellingPostalAddress;
        QDateTime sentDate;
        QUuid shipmentMethodId;
        microsoft::graph::postalAddressType shippingPostalAddress;
        QString shipToContact;
        QString shipToName;
        QString status;
        double totalAmountExcludingTax;
        double totalAmountIncludingTax;
        double totalTaxAmount;
        QDate validUntilDate;
        std::unique_ptr<microsoft::graph::currency> currency;
        std::unique_ptr<microsoft::graph::customer> customer;
        std::unique_ptr<microsoft::graph::paymentTerm> paymentTerm;
        QList<microsoft::graph::salesQuoteLine> salesQuoteLines;
        std::unique_ptr<microsoft::graph::shipmentMethod> shipmentMethod;
    };

    struct payloadTypes {
        QString rawContent;
        microsoft::graph::visualProperties visualContent;
    };

    struct plannerTaskCreation {
        microsoft::graph::plannerTeamsPublicationInfo teamsPublicationInfo;
    };

    struct plannerTask : graph::plannerDelta {
        int activeChecklistItemCount;
        microsoft::graph::plannerAppliedCategories appliedCategories;
        QString assigneePriority;
        microsoft::graph::plannerAssignments assignments;
        QString bucketId;
        int checklistItemCount;
        microsoft::graph::identitySet completedBy;
        QDateTime completedDateTime;
        QString conversationThreadId;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::plannerTaskCreation creationSource;
        QDateTime dueDateTime;
        bool hasDescription;
        QString orderHint;
        int percentComplete;
        QString planId;
        microsoft::graph::plannerPreviewType previewType;
        int priority;
        int referenceCount;
        QDateTime startDateTime;
        QString title;
        std::unique_ptr<microsoft::graph::plannerAssignedToTaskBoardTaskFormat> assignedToTaskBoardFormat;
        std::unique_ptr<microsoft::graph::plannerBucketTaskBoardTaskFormat> bucketTaskBoardFormat;
        std::unique_ptr<microsoft::graph::plannerTaskDetails> details;
        std::unique_ptr<microsoft::graph::plannerProgressTaskBoardTaskFormat> progressTaskBoardFormat;
    };

    struct regionalAndLanguageSettings : graph::entity {
        QList<microsoft::graph::localeInfo> authoringLanguages;
        microsoft::graph::localeInfo defaultDisplayLanguage;
        microsoft::graph::localeInfo defaultRegionalFormat;
        microsoft::graph::localeInfo defaultSpeechInputLanguage;
        microsoft::graph::localeInfo defaultTranslationLanguage;
        microsoft::graph::regionalFormatOverrides regionalFormatOverrides;
        microsoft::graph::translationPreferences translationPreferences;
    };

    struct notebookLinks {
        microsoft::graph::externalLink oneNoteClientUrl;
        microsoft::graph::externalLink oneNoteWebUrl;
    };

    struct onenotePagePreview {
        microsoft::graph::onenotePagePreviewLinks links;
        QString previewText;
    };

    struct recentNotebook {
        QString displayName;
        QDateTime lastAccessedTime;
        microsoft::graph::recentNotebookLinks links;
        microsoft::graph::onenoteSourceService sourceService;
    };

    struct documentComment : graph::entity {
        QString content;
        QList<microsoft::graph::documentCommentReply> replies;
    };

    struct presentation : graph::entity {
        QList<microsoft::graph::documentComment> comments;
    };

    struct overallPrintUsageSummary {
        int activePrintersCount;
        int activeUsersCount;
        int daysInPeriod;
        QList<microsoft::graph::printerUsageSummary> topPrinters;
        QList<microsoft::graph::userPrintUsageSummary> topUsers;
        int totalIncompleteJobs;
        int totalJobsProcessed;
    };

    struct printerDocumentConfiguration {
        bool collate;
        microsoft::graph::printColorMode colorMode;
        int copies;
        int dpi;
        microsoft::graph::printDuplexMode duplexMode;
        microsoft::graph::printerFeedDirection feedDirection;
        microsoft::graph::printerFeedOrientation feedOrientation;
        QList<microsoft::graph::printFinishing> finishings;
        bool fitPdfToPage;
        QString inputBin;
        microsoft::graph::printMargin margin;
        QString mediaSize;
        QString mediaType;
        microsoft::graph::printMultipageLayout multipageLayout;
        microsoft::graph::printOrientation orientation;
        QString outputBin;
        QList<microsoft::graph::integerRange> pageRanges;
        int pagesPerSheet;
        microsoft::graph::printQuality quality;
        microsoft::graph::printScaling scaling;
    };

    struct printService : graph::entity {
        QList<microsoft::graph::printServiceEndpoint> endpoints;
    };

    struct printDocument : graph::entity {
        microsoft::graph::printerDocumentConfiguration configuration;
        QString contentType;
        QString displayName;
        long long size;
    };

    struct attackSimulationRepeatOffender {
        microsoft::graph::attackSimulationUser attackSimulationUser;
        int repeatOffenceCount;
    };

    struct attackSimulationTrainingUserCoverage {
        microsoft::graph::attackSimulationUser attackSimulationUser;
        QList<microsoft::graph::userTrainingStatusInfo> userTrainings;
    };

    struct simulationReportOverview {
        QList<microsoft::graph::recommendedAction> recommendedActions;
        int resolvedTargetsCount;
        microsoft::graph::simulationEventsContent simulationEventsContent;
        microsoft::graph::trainingEventsContent trainingEventsContent;
    };

    struct userTrainingEventInfo {
        QString displayName;
        microsoft::graph::trainingStatus latestTrainingStatus;
        microsoft::graph::userTrainingContentEventInfo trainingAssignedProperties;
        microsoft::graph::userTrainingContentEventInfo trainingCompletedProperties;
        microsoft::graph::userTrainingContentEventInfo trainingUpdatedProperties;
    };

    struct alert : graph::entity {
        QString activityGroupName;
        QList<microsoft::graph::alertDetection> alertDetections;
        QString assignedTo;
        QString azureSubscriptionId;
        QString azureTenantId;
        QString category;
        QDateTime closedDateTime;
        QList<microsoft::graph::cloudAppSecurityState> cloudAppStates;
        QList<QString> comments;
        int confidence;
        QDateTime createdDateTime;
        QString description;
        QList<QString> detectionIds;
        QDateTime eventDateTime;
        microsoft::graph::alertFeedback feedback;
        QList<microsoft::graph::fileSecurityState> fileStates;
        QList<microsoft::graph::alertHistoryState> historyStates;
        QList<microsoft::graph::hostSecurityState> hostStates;
        QList<QString> incidentIds;
        QList<microsoft::graph::investigationSecurityState> investigationSecurityStates;
        QDateTime lastEventDateTime;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::malwareState> malwareStates;
        QList<microsoft::graph::messageSecurityState> messageSecurityStates;
        QList<microsoft::graph::networkConnection> networkConnections;
        QList<microsoft::graph::process> processes;
        QList<QString> recommendedActions;
        QList<microsoft::graph::registryKeyState> registryKeyStates;
        QList<microsoft::graph::securityResource> securityResources;
        microsoft::graph::alertSeverity severity;
        QList<QString> sourceMaterials;
        microsoft::graph::alertStatus status;
        QList<QString> tags;
        QString title;
        QList<microsoft::graph::alertTrigger> triggers;
        QList<microsoft::graph::uriClickSecurityState> uriClickSecurityStates;
        QList<microsoft::graph::userSecurityState> userStates;
        microsoft::graph::securityVendorInformation vendorInformation;
        QList<microsoft::graph::vulnerabilityState> vulnerabilityStates;
    };

    struct cloudAppSecurityProfile : graph::entity {
        QString azureSubscriptionId;
        QString azureTenantId;
        QDateTime createdDateTime;
        QString deploymentPackageUrl;
        QString destinationServiceName;
        bool isSigned;
        QDateTime lastModifiedDateTime;
        QString manifest;
        QString name;
        microsoft::graph::applicationPermissionsRequired permissionsRequired;
        QString platform;
        QString policyName;
        QString publisher;
        QString riskScore;
        QList<QString> tags;
        QString type;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct domainSecurityProfile : graph::entity {
        QList<QString> activityGroupNames;
        QString azureSubscriptionId;
        QString azureTenantId;
        int countHits;
        int countInOrg;
        QList<microsoft::graph::reputationCategory> domainCategories;
        QDateTime domainRegisteredDateTime;
        QDateTime firstSeenDateTime;
        QDateTime lastSeenDateTime;
        QString name;
        microsoft::graph::domainRegistrant registrant;
        QString riskScore;
        QList<QString> tags;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct fileSecurityProfile : graph::entity {
        QList<QString> activityGroupNames;
        QString azureSubscriptionId;
        QString azureTenantId;
        QString certificateThumbprint;
        QList<QString> extensions;
        QString fileType;
        QDateTime firstSeenDateTime;
        QList<microsoft::graph::fileHash> hashes;
        QDateTime lastSeenDateTime;
        QList<microsoft::graph::malwareState> malwareStates;
        QList<QString> names;
        QString riskScore;
        long long size;
        QList<QString> tags;
        microsoft::graph::securityVendorInformation vendorInformation;
        QList<microsoft::graph::vulnerabilityState> vulnerabilityStates;
    };

    struct hostSecurityProfile : graph::entity {
        QString azureSubscriptionId;
        QString azureTenantId;
        QDateTime firstSeenDateTime;
        QString fqdn;
        bool isAzureAdJoined;
        bool isAzureAdRegistered;
        bool isHybridAzureDomainJoined;
        QDateTime lastSeenDateTime;
        QList<microsoft::graph::logonUser> logonUsers;
        QString netBiosName;
        QList<microsoft::graph::networkInterface> networkInterfaces;
        QString os;
        QString osVersion;
        QString parentHost;
        QList<QString> relatedHostIds;
        QString riskScore;
        QList<QString> tags;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct ipSecurityProfile : graph::entity {
        QList<QString> activityGroupNames;
        QString address;
        QString azureSubscriptionId;
        QString azureTenantId;
        int countHits;
        int countHosts;
        QDateTime firstSeenDateTime;
        QList<microsoft::graph::ipCategory> ipCategories;
        QList<microsoft::graph::ipReferenceData> ipReferenceData;
        QDateTime lastSeenDateTime;
        QString riskScore;
        QList<QString> tags;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct secureScoreControlProfile : graph::entity {
        QString actionType;
        QString actionUrl;
        QString azureTenantId;
        QList<microsoft::graph::complianceInformation> complianceInformation;
        QString controlCategory;
        QList<microsoft::graph::secureScoreControlStateUpdate> controlStateUpdates;
        bool deprecated;
        QString implementationCost;
        QDateTime lastModifiedDateTime;
        double maxScore;
        int rank;
        QString remediation;
        QString remediationImpact;
        QString service;
        QList<QString> threats;
        QString tier;
        QString title;
        QString userImpact;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct secureScore : graph::entity {
        int activeUserCount;
        QList<microsoft::graph::averageComparativeScore> averageComparativeScores;
        QString azureTenantId;
        QList<microsoft::graph::controlScore> controlScores;
        QDateTime createdDateTime;
        double currentScore;
        QList<QString> enabledServices;
        int licensedUserCount;
        double maxScore;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct securityAction : graph::entity {
        QString actionReason;
        QString appId;
        QString azureTenantId;
        QString clientContext;
        QDateTime completedDateTime;
        QDateTime createdDateTime;
        microsoft::graph::resultInfo errorInfo;
        QDateTime lastActionDateTime;
        QString name;
        QList<microsoft::graph::keyValuePair> parameters;
        QList<microsoft::graph::securityActionState> states;
        microsoft::graph::operationStatus status;
        QString user;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct userSecurityProfile : graph::entity {
        QList<microsoft::graph::userAccount> accounts;
        QString azureSubscriptionId;
        QString azureTenantId;
        QDateTime createdDateTime;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QString riskScore;
        QList<QString> tags;
        QString userPrincipalName;
        microsoft::graph::securityVendorInformation vendorInformation;
    };

    struct commsApplication {
        QList<microsoft::graph::call> calls;
        QList<microsoft::graph::onlineMeeting> onlineMeetings;
    };

    struct participantJoiningNotification : graph::entity {
        std::unique_ptr<microsoft::graph::call> call;
    };

    struct participantLeftNotification : graph::entity {
        QString participantId;
        std::unique_ptr<microsoft::graph::call> call;
    };

    struct changeNotification {
        microsoft::graph::changeType changeType;
        QString clientState;
        microsoft::graph::changeNotificationEncryptedContent encryptedContent;
        QString id;
        microsoft::graph::lifecycleEventType lifecycleEvent;
        QString resource;
        microsoft::graph::resourceData resourceData;
        QDateTime subscriptionExpirationDateTime;
        QUuid subscriptionId;
        QUuid tenantId;
    };

    struct changeNotificationCollection {
        QList<QString> validationTokens;
        QList<microsoft::graph::changeNotification> value;
    };

    struct connectionOperation : graph::entity {
        microsoft::graph::publicError error;
        microsoft::graph::connectionOperationStatus status;
    };

    struct externalGroup : graph::entity {
        QString description;
        QString displayName;
        QList<microsoft::graph::externalGroupMember> members;
    };

    struct actionResultPart {
        microsoft::graph::publicError error;
    };

    struct aadUserConversationMemberResult : graph::actionResultPart {
        QString userId;
    };

    struct callEndedEventMessageDetail : graph::eventMessageDetail {
        std::chrono::system_clock::duration callDuration;
        microsoft::graph::teamworkCallEventType callEventType;
        QString callId;
        QList<microsoft::graph::callParticipantInfo> callParticipants;
        microsoft::graph::identitySet initiator;
    };

    struct chatMessageMentionedIdentitySet : graph::identitySet {
        microsoft::graph::teamworkConversationIdentity conversation;
        microsoft::graph::teamworkTagIdentity tag;
    };

    struct chatMessagePolicyViolation {
        microsoft::graph::chatMessagePolicyViolationDlpActionTypes dlpAction;
        QString justificationText;
        microsoft::graph::chatMessagePolicyViolationPolicyTip policyTip;
        microsoft::graph::chatMessagePolicyViolationUserActionTypes userAction;
        microsoft::graph::chatMessagePolicyViolationVerdictDetailsTypes verdictDetails;
    };

    struct chatMessageReaction {
        QDateTime createdDateTime;
        QString reactionType;
        microsoft::graph::chatMessageReactionIdentitySet user;
    };

    struct conversationMemberRoleUpdatedEventMessageDetail : graph::eventMessageDetail {
        QList<QString> conversationMemberRoles;
        microsoft::graph::teamworkUserIdentity conversationMemberUser;
        microsoft::graph::identitySet initiator;
    };

    struct teamsAppDefinition : graph::entity {
        microsoft::graph::teamsAppInstallationScopes allowedInstallationScopes;
        QString azureADAppId;
        microsoft::graph::identitySet createdBy;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        microsoft::graph::teamsAppPublishingState publishingState;
        QString shortdescription;
        QString teamsAppId;
        QString version;
        std::unique_ptr<microsoft::graph::teamworkBot> bot;
        std::unique_ptr<microsoft::graph::teamsAppIcon> colorIcon;
        std::unique_ptr<microsoft::graph::teamsAppIcon> outlineIcon;
    };

    struct workforceIntegration : graph::changeTrackedEntity {
        int apiVersion;
        QString displayName;
        microsoft::graph::eligibilityFilteringEnabledEntities eligibilityFilteringEnabledEntities;
        microsoft::graph::workforceIntegrationEncryption encryption;
        bool isActive;
        microsoft::graph::workforceIntegrationSupportedEntities supportedEntities;
        microsoft::graph::workforceIntegrationSupportedEntities supports;
        QString url;
    };

    struct shiftItem : graph::scheduleEntity {
        QList<microsoft::graph::shiftActivity> activities;
        QString displayName;
        QString notes;
    };

    struct openShiftItem : graph::shiftItem {
        int openSlotCount;
    };

    struct shiftAvailability {
        microsoft::graph::patternedRecurrence recurrence;
        QList<microsoft::graph::timeRange> timeSlots;
        QString timeZone;
    };

    struct timeCardBreak {
        QString breakId;
        microsoft::graph::timeCardEvent end;
        microsoft::graph::itemBody notes;
        microsoft::graph::timeCardEvent start;
    };

    struct timeCardEntry {
        QList<microsoft::graph::timeCardBreak> breaks;
        microsoft::graph::timeCardEvent clockInEvent;
        microsoft::graph::timeCardEvent clockOutEvent;
    };

    struct openShift : graph::changeTrackedEntity {
        microsoft::graph::openShiftItem draftOpenShift;
        bool isStagedForDeletion;
        QString schedulingGroupId;
        microsoft::graph::openShiftItem sharedOpenShift;
    };

    struct shift : graph::changeTrackedEntity {
        microsoft::graph::shiftItem draftShift;
        bool isStagedForDeletion;
        QString schedulingGroupId;
        microsoft::graph::shiftItem sharedShift;
        QString userId;
    };

    struct timeCard : graph::changeTrackedEntity {
        QList<microsoft::graph::timeCardBreak> breaks;
        microsoft::graph::timeCardEvent clockInEvent;
        microsoft::graph::timeCardEvent clockOutEvent;
        microsoft::graph::confirmedBy confirmedBy;
        microsoft::graph::itemBody notes;
        microsoft::graph::timeCardEntry originalEntry;
        microsoft::graph::timeCardState state;
        QString userId;
    };

    struct emailFileAssessmentRequest : graph::threatAssessmentRequest {
        QString contentData;
        microsoft::graph::mailDestinationRoutingReason destinationRoutingReason;
        QString recipientEmail;
    };

    struct fileAssessmentRequest : graph::threatAssessmentRequest {
        QString contentData;
        QString fileName;
    };

    struct mailAssessmentRequest : graph::threatAssessmentRequest {
        microsoft::graph::mailDestinationRoutingReason destinationRoutingReason;
        QString messageUri;
        QString recipientEmail;
    };

    struct urlAssessmentRequest : graph::threatAssessmentRequest {
        QString url;
    };

    struct todoTask : graph::entity {
        microsoft::graph::itemBody body;
        QDateTime bodyLastModifiedDateTime;
        microsoft::graph::dateTimeTimeZone completedDateTime;
        QDateTime createdDateTime;
        microsoft::graph::dateTimeTimeZone dueDateTime;
        microsoft::graph::importance importance;
        bool isReminderOn;
        QDateTime lastModifiedDateTime;
        microsoft::graph::patternedRecurrence recurrence;
        microsoft::graph::dateTimeTimeZone reminderDateTime;
        microsoft::graph::taskStatus status;
        QString title;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::linkedResource> linkedResources;
    };

    struct document : graph::entity {
        QList<microsoft::graph::documentComment> comments;
    };

} // namespace microsoft::graph

namespace microsoft::graph::ediscovery {
    struct reviewSet : graph::entity {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString displayName;
        QList<microsoft::graph::ediscovery::reviewSetQuery> queries;
    };

    struct dataSourceContainer : graph::entity {
        QDateTime createdDateTime;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QDateTime releasedDateTime;
        microsoft::graph::ediscovery::dataSourceContainerStatus status;
        std::unique_ptr<microsoft::graph::ediscovery::caseIndexOperation> lastIndexOperation;
    };

    struct noncustodialDataSource : microsoft::graph::ediscovery::dataSourceContainer {
        bool applyHoldToSource;
        std::unique_ptr<microsoft::graph::ediscovery::dataSource> dataSource;
    };

    struct caseExportOperation : microsoft::graph::ediscovery::caseOperation {
        QString azureBlobContainer;
        QString azureBlobToken;
        QString description;
        microsoft::graph::ediscovery::exportOptions exportOptions;
        microsoft::graph::ediscovery::exportFileStructure exportStructure;
        QString outputFolderId;
        QString outputName;
        std::unique_ptr<microsoft::graph::ediscovery::reviewSet> reviewSet;
    };

} // namespace microsoft::graph::ediscovery

namespace microsoft::graph::callRecords {
    struct media {
        microsoft::graph::callRecords::deviceInfo calleeDevice;
        microsoft::graph::callRecords::networkInfo calleeNetwork;
        microsoft::graph::callRecords::deviceInfo callerDevice;
        microsoft::graph::callRecords::networkInfo callerNetwork;
        QString label;
        QList<microsoft::graph::callRecords::mediaStream> streams;
    };

    struct participantEndpoint : microsoft::graph::callRecords::endpoint {
        microsoft::graph::callRecords::userFeedback feedback;
        microsoft::graph::identitySet identity;
    };

    struct segment : graph::entity {
        microsoft::graph::callRecords::endpoint callee;
        microsoft::graph::callRecords::endpoint caller;
        QDateTime endDateTime;
        microsoft::graph::callRecords::failureInfo failureInfo;
        QList<microsoft::graph::callRecords::media> media;
        QDateTime startDateTime;
    };

} // namespace microsoft::graph::callRecords

namespace microsoft::graph::managedTenants {
    struct managementAction : graph::entity {
        microsoft::graph::managedTenants::managementCategory category;
        QString description;
        QString displayName;
        QString referenceTemplateId;
        QList<microsoft::graph::managedTenants::workloadAction> workloadActions;
    };

    struct managementIntent : graph::entity {
        QString displayName;
        bool isGlobal;
        QList<microsoft::graph::managedTenants::managementTemplateDetailedInfo> managementTemplates;
    };

    struct managementTemplate : graph::entity {
        microsoft::graph::managedTenants::managementCategory category;
        QString description;
        QString displayName;
        QList<microsoft::graph::managedTenants::templateParameter> parameters;
        QList<microsoft::graph::managedTenants::workloadAction> workloadActions;
    };

    struct tenantCustomizedInformation : graph::entity {
        QList<microsoft::graph::managedTenants::tenantContactInformation> contacts;
        QString displayName;
        QString tenantId;
        QString website;
    };

    struct tenantTag : graph::entity {
        QString createdByUserId;
        QDateTime createdDateTime;
        QDateTime deletedDateTime;
        QString description;
        QString displayName;
        QString lastActionByUserId;
        QDateTime lastActionDateTime;
        QList<microsoft::graph::managedTenants::tenantInfo> tenants;
    };

    struct managementActionDeploymentStatus {
        QString managementActionId;
        QString managementTemplateId;
        microsoft::graph::managedTenants::managementActionStatus status;
        QList<microsoft::graph::managedTenants::workloadActionDeploymentStatus> workloadActionDeploymentStatuses;
    };

    struct managementIntentInfo {
        QString managementIntentDisplayName;
        QString managementIntentId;
        QList<microsoft::graph::managedTenants::managementTemplateDetailedInfo> managementTemplates;
    };

    struct tenantStatusInformation {
        microsoft::graph::managedTenants::delegatedPrivilegeStatus delegatedPrivilegeStatus;
        QDateTime lastDelegatedPrivilegeRefreshDateTime;
        QString offboardedByUserId;
        QDateTime offboardedDateTime;
        QString onboardedByUserId;
        QDateTime onboardedDateTime;
        microsoft::graph::managedTenants::tenantOnboardingStatus onboardingStatus;
        QList<microsoft::graph::managedTenants::workloadStatus> workloadStatuses;
    };

} // namespace microsoft::graph::managedTenants

namespace microsoft::graph::search {
    struct searchAnswer : graph::entity {
        QString description;
        QString displayName;
        microsoft::graph::search::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString webUrl;
    };

    struct acronym : microsoft::graph::search::searchAnswer {
        QString standsFor;
        microsoft::graph::search::answerState state;
    };

    struct bookmark : microsoft::graph::search::searchAnswer {
        QDateTime availabilityEndDateTime;
        QDateTime availabilityStartDateTime;
        QList<QString> categories;
        QList<QString> groupIds;
        bool isSuggested;
        microsoft::graph::search::answerKeyword keywords;
        QList<QString> languageTags;
        QList<microsoft::graph::devicePlatformType> platforms;
        QList<QString> powerAppIds;
        microsoft::graph::search::answerState state;
        QList<microsoft::graph::search::answerVariant> targetedVariations;
    };

    struct qna : microsoft::graph::search::searchAnswer {
        QDateTime availabilityEndDateTime;
        QDateTime availabilityStartDateTime;
        QList<QString> groupIds;
        bool isSuggested;
        microsoft::graph::search::answerKeyword keywords;
        QList<QString> languageTags;
        QList<microsoft::graph::devicePlatformType> platforms;
        microsoft::graph::search::answerState state;
        QList<microsoft::graph::search::answerVariant> targetedVariations;
    };

} // namespace microsoft::graph::search

namespace microsoft::graph::externalConnectors {
    struct displayTemplate {
        QString id;
        microsoft::graph::Json layout;
        int priority;
        QList<microsoft::graph::externalConnectors::propertyRule> rules;
    };

    struct searchSettings {
        QList<microsoft::graph::externalConnectors::displayTemplate> searchResultTemplates;
    };

    struct connectionOperation : graph::entity {
        microsoft::graph::publicError error;
        microsoft::graph::externalConnectors::connectionOperationStatus status;
    };

    struct externalGroup : graph::entity {
        QString description;
        QString displayName;
        QList<microsoft::graph::externalConnectors::externalGroupMember> members;
    };

} // namespace microsoft::graph::externalConnectors

namespace microsoft::graph::windowsUpdates {
    struct monitoringSettings {
        QList<microsoft::graph::windowsUpdates::monitoringRule> monitoringRules;
    };

    struct deploymentState {
        QList<microsoft::graph::windowsUpdates::deploymentStateReason> reasons;
        microsoft::graph::windowsUpdates::requestedDeploymentStateValue requestedValue;
        microsoft::graph::windowsUpdates::deploymentStateValue value;
    };

    struct catalog : graph::entity {
        QList<microsoft::graph::windowsUpdates::catalogEntry> entries;
    };

} // namespace microsoft::graph::windowsUpdates

namespace microsoft::graph {
    struct auditLogRoot {
        QList<microsoft::graph::directoryAudit> directoryAudits;
        QList<microsoft::graph::provisioningObjectSummary> directoryProvisioning;
        QList<microsoft::graph::provisioningObjectSummary> provisioning;
        QList<microsoft::graph::restrictedSignIn> restrictedSignIns;
        QList<microsoft::graph::signIn> signIns;
    };

    struct informationProtection : graph::entity {
        std::unique_ptr<microsoft::graph::bitlocker> bitlocker;
        QList<microsoft::graph::dataLossPreventionPolicy> dataLossPreventionPolicies;
        QList<microsoft::graph::sensitivityLabel> sensitivityLabels;
        std::unique_ptr<microsoft::graph::sensitivityPolicySettings> sensitivityPolicySettings;
        std::unique_ptr<microsoft::graph::informationProtectionPolicy> policy;
        QList<microsoft::graph::threatAssessmentRequest> threatAssessmentRequests;
    };

    struct contactFolder : graph::entity {
        QString displayName;
        QString parentFolderId;
        QString wellKnownName;
        QList<microsoft::graph::contactFolder> childFolders;
        QList<microsoft::graph::contact> contacts;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct mailFolder : graph::entity {
        int childFolderCount;
        QString displayName;
        bool isHidden;
        QString parentFolderId;
        int totalItemCount;
        int unreadItemCount;
        QString wellKnownName;
        QList<microsoft::graph::mailFolder> childFolders;
        QList<microsoft::graph::messageRule> messageRules;
        QList<microsoft::graph::message> messages;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
        QList<microsoft::graph::userConfiguration> userConfigurations;
    };

    struct outlookUser : graph::entity {
        QList<microsoft::graph::outlookCategory> masterCategories;
        QList<microsoft::graph::outlookTaskFolder> taskFolders;
        QList<microsoft::graph::outlookTaskGroup> taskGroups;
        QList<microsoft::graph::outlookTask> tasks;
    };

    struct person : graph::entity {
        QString birthday;
        QString companyName;
        QString department;
        QString displayName;
        QList<microsoft::graph::rankedEmailAddress> emailAddresses;
        QString givenName;
        bool isFavorite;
        QString mailboxType;
        QString officeLocation;
        QString personNotes;
        QString personType;
        QList<microsoft::graph::phone> phones;
        QList<microsoft::graph::location> postalAddresses;
        QString profession;
        QList<microsoft::graph::personDataSource> sources;
        QString surname;
        QString title;
        QString userPrincipalName;
        QList<microsoft::graph::website> websites;
        QString yomiCompany;
    };

    struct appConsentRequest : graph::entity {
        QString appDisplayName;
        QString appId;
        QString consentType;
        QList<microsoft::graph::appConsentRequestScope> pendingScopes;
        QList<microsoft::graph::userConsentRequest> userConsentRequests;
    };

    struct deviceManagementTroubleshootingEvent : graph::entity {
        QList<microsoft::graph::keyValuePair> additionalInformation;
        QString correlationId;
        QDateTime eventDateTime;
        QString eventName;
        microsoft::graph::deviceManagementTroubleshootingErrorDetails troubleshootingErrorDetails;
    };

    struct mobileAppIntentAndState : graph::entity {
        QString managedDeviceIdentifier;
        QList<microsoft::graph::mobileAppIntentAndStateDetail> mobileAppList;
        QString userId;
    };

    struct notification : graph::entity {
        int displayTimeToLive;
        QDateTime expirationDateTime;
        QString groupName;
        microsoft::graph::payloadTypes payload;
        microsoft::graph::priority priority;
        QString targetHostName;
        microsoft::graph::targetPolicyEndpoints targetPolicy;
    };

    struct device : graph::directoryObject {
        bool accountEnabled;
        QList<microsoft::graph::alternativeSecurityId> alternativeSecurityIds;
        QDateTime approximateLastSignInDateTime;
        QDateTime complianceExpirationDateTime;
        QString deviceCategory;
        QString deviceId;
        QString deviceMetadata;
        QString deviceOwnership;
        int deviceVersion;
        QString displayName;
        QString domainName;
        QString enrollmentProfileName;
        QString enrollmentType;
        microsoft::graph::onPremisesExtensionAttributes extensionAttributes;
        QList<QString> hostnames;
        bool isCompliant;
        bool isManaged;
        bool isRooted;
        QString managementType;
        QDateTime onPremisesLastSyncDateTime;
        bool onPremisesSyncEnabled;
        QString operatingSystem;
        QString operatingSystemVersion;
        QList<QString> physicalIds;
        QString profileType;
        QDateTime registrationDateTime;
        QList<QString> systemLabels;
        QString trustType;
        QString kind;
        QString manufacturer;
        QString model;
        QString name;
        QString platform;
        QString status;
        QList<microsoft::graph::usageRight> usageRights;
        QList<microsoft::graph::directoryObject> memberOf;
        QList<microsoft::graph::directoryObject> registeredOwners;
        QList<microsoft::graph::directoryObject> registeredUsers;
        QList<microsoft::graph::directoryObject> transitiveMemberOf;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::command> commands;
    };

    struct appManagementPolicy : graph::policyBase {
        bool isEnabled;
        microsoft::graph::appManagementConfiguration restrictions;
        QList<microsoft::graph::directoryObject> appliesTo;
    };

    struct tenantAppManagementPolicy : graph::policyBase {
        microsoft::graph::appManagementConfiguration applicationRestrictions;
        bool isEnabled;
        microsoft::graph::appManagementConfiguration servicePrincipalRestrictions;
    };

    struct directoryRoleAccessReviewPolicy : graph::entity {
        microsoft::graph::accessReviewScheduleSettings settings;
    };

    struct bookingBusiness : graph::bookingNamedEntity {
        microsoft::graph::physicalAddress address;
        QList<microsoft::graph::bookingWorkHours> businessHours;
        QString businessType;
        QString defaultCurrencyIso;
        QString email;
        bool isPublished;
        QString phone;
        QString publicUrl;
        microsoft::graph::bookingSchedulingPolicy schedulingPolicy;
        QString webSiteUrl;
        QList<microsoft::graph::bookingAppointment> appointments;
        QList<microsoft::graph::bookingAppointment> calendarView;
        QList<microsoft::graph::bookingCustomer> customers;
        QList<microsoft::graph::bookingService> services;
        QList<microsoft::graph::bookingStaffMember> staffMembers;
    };

    struct androidManagedStoreAccountEnterpriseSettings : graph::entity {
        bool androidDeviceOwnerFullyManagedEnrollmentEnabled;
        microsoft::graph::androidManagedStoreAccountBindStatus bindStatus;
        QList<microsoft::graph::androidEnrollmentCompanyCode> companyCodes;
        bool deviceOwnerManagementEnabled;
        microsoft::graph::androidManagedStoreAccountEnrollmentTarget enrollmentTarget;
        QDateTime lastAppSyncDateTime;
        microsoft::graph::androidManagedStoreAccountAppSyncStatus lastAppSyncStatus;
        QDateTime lastModifiedDateTime;
        QList<QString> managedGooglePlayInitialScopeTagIds;
        QString ownerOrganizationName;
        QString ownerUserPrincipalName;
        QList<QString> targetGroupIds;
    };

    struct auditEvent : graph::entity {
        QString activity;
        QDateTime activityDateTime;
        QString activityOperationType;
        QString activityResult;
        QString activityType;
        microsoft::graph::auditActor actor;
        QString category;
        QString componentName;
        QUuid correlationId;
        QString displayName;
        QList<microsoft::graph::auditResource> resources;
    };

    struct deviceCompliancePolicy : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        int version;
        QList<microsoft::graph::deviceCompliancePolicyAssignment> assignments;
        QList<microsoft::graph::settingStateDeviceSummary> deviceSettingStateSummaries;
        QList<microsoft::graph::deviceComplianceDeviceStatus> deviceStatuses;
        std::unique_ptr<microsoft::graph::deviceComplianceDeviceOverview> deviceStatusOverview;
        QList<microsoft::graph::deviceComplianceScheduledActionForRule> scheduledActionsForRule;
        QList<microsoft::graph::deviceComplianceUserStatus> userStatuses;
        std::unique_ptr<microsoft::graph::deviceComplianceUserOverview> userStatusOverview;
    };

    struct macOSSoftwareUpdateAccountSummary : graph::entity {
        QString deviceId;
        QString deviceName;
        QString displayName;
        int failedUpdateCount;
        QDateTime lastUpdatedDateTime;
        QString osVersion;
        int successfulUpdateCount;
        int totalUpdateCount;
        QString userId;
        QString userPrincipalName;
        QList<microsoft::graph::macOSSoftwareUpdateCategorySummary> categorySummaries;
    };

    struct deviceManagementConfigurationPolicy : graph::entity {
        QDateTime createdDateTime;
        QString creationSource;
        QString description;
        bool isAssigned;
        QDateTime lastModifiedDateTime;
        QString name;
        microsoft::graph::deviceManagementConfigurationPlatforms platforms;
        QList<QString> roleScopeTagIds;
        int settingCount;
        microsoft::graph::deviceManagementConfigurationTechnologies technologies;
        microsoft::graph::deviceManagementConfigurationPolicyTemplateReference templateReference;
        QList<microsoft::graph::deviceManagementConfigurationPolicyAssignment> assignments;
        QList<microsoft::graph::deviceManagementConfigurationSetting> settings;
    };

    struct deviceManagementConfigurationPolicyTemplate : graph::entity {
        bool allowUnmanagedSettings;
        QString baseId;
        QString description;
        QString displayName;
        QString displayVersion;
        microsoft::graph::deviceManagementTemplateLifecycleState lifecycleState;
        microsoft::graph::deviceManagementConfigurationPlatforms platforms;
        int settingTemplateCount;
        microsoft::graph::deviceManagementConfigurationTechnologies technologies;
        microsoft::graph::deviceManagementConfigurationTemplateFamily templateFamily;
        int version;
        QList<microsoft::graph::deviceManagementConfigurationSettingTemplate> settingTemplates;
    };

    struct deviceManagementReusablePolicySetting : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        int referencingConfigurationPolicyCount;
        QString settingDefinitionId;
        microsoft::graph::deviceManagementConfigurationSettingInstance settingInstance;
        int version;
        QList<microsoft::graph::deviceManagementConfigurationPolicy> referencingConfigurationPolicies;
    };

    struct deviceManagementExchangeOnPremisesPolicy : graph::entity {
        QList<microsoft::graph::deviceManagementExchangeAccessRule> accessRules;
        microsoft::graph::deviceManagementExchangeAccessLevel defaultAccessLevel;
        QList<microsoft::graph::deviceManagementExchangeDeviceClass> knownDeviceClasses;
        QByteArray notificationContent;
        std::unique_ptr<microsoft::graph::onPremisesConditionalAccessSettings> conditionalAccessSettings;
    };

    struct deviceManagementSettingCategory : graph::entity {
        QString displayName;
        bool hasRequiredSetting;
        QList<microsoft::graph::deviceManagementSettingDefinition> settingDefinitions;
    };

    struct deviceCompliancePolicyState : graph::entity {
        QString displayName;
        microsoft::graph::policyPlatformType platformType;
        int settingCount;
        QList<microsoft::graph::deviceCompliancePolicySettingState> settingStates;
        microsoft::graph::complianceStatus state;
        QString userId;
        QString userPrincipalName;
        int version;
    };

    struct unifiedRbacResourceNamespace : graph::entity {
        QString name;
        QList<microsoft::graph::unifiedRbacResourceAction> resourceActions;
    };

    struct schedule : graph::entity {
        bool enabled;
        bool offerShiftRequestsEnabled;
        bool openShiftsEnabled;
        microsoft::graph::operationStatus provisionStatus;
        QString provisionStatusCode;
        bool swapShiftsRequestsEnabled;
        bool timeClockEnabled;
        microsoft::graph::timeClockSettings timeClockSettings;
        bool timeOffRequestsEnabled;
        QString timeZone;
        QList<QString> workforceIntegrationIds;
        QList<microsoft::graph::offerShiftRequest> offerShiftRequests;
        QList<microsoft::graph::openShiftChangeRequest> openShiftChangeRequests;
        QList<microsoft::graph::openShift> openShifts;
        QList<microsoft::graph::schedulingGroup> schedulingGroups;
        QList<microsoft::graph::shift> shifts;
        QList<microsoft::graph::swapShiftsChangeRequest> swapShiftsChangeRequests;
        QList<microsoft::graph::timeCard> timeCards;
        QList<microsoft::graph::timeOffReason> timeOffReasons;
        QList<microsoft::graph::timeOffRequest> timeOffRequests;
        QList<microsoft::graph::timeOff> timesOff;
    };

    struct conversationThread : graph::entity {
        QList<microsoft::graph::recipient> ccRecipients;
        bool hasAttachments;
        bool isLocked;
        QDateTime lastDeliveredDateTime;
        QString preview;
        QString topic;
        QList<microsoft::graph::recipient> toRecipients;
        QList<QString> uniqueSenders;
        QList<microsoft::graph::post> posts;
    };

    struct columnDefinition : graph::entity {
        microsoft::graph::booleanColumn boolean;
        microsoft::graph::calculatedColumn calculated;
        microsoft::graph::choiceColumn choice;
        QString columnGroup;
        microsoft::graph::contentApprovalStatusColumn contentApprovalStatus;
        microsoft::graph::currencyColumn currency;
        microsoft::graph::dateTimeColumn dateTime;
        microsoft::graph::defaultColumnValue defaultValue;
        QString description;
        QString displayName;
        bool enforceUniqueValues;
        microsoft::graph::geolocationColumn geolocation;
        bool hidden;
        microsoft::graph::hyperlinkOrPictureColumn hyperlinkOrPicture;
        bool indexed;
        bool isDeletable;
        bool isReorderable;
        bool isSealed;
        microsoft::graph::lookupColumn lookup;
        QString name;
        microsoft::graph::numberColumn number;
        microsoft::graph::personOrGroupColumn personOrGroup;
        bool propagateChanges;
        bool readOnly;
        bool required;
        microsoft::graph::termColumn term;
        microsoft::graph::textColumn text;
        microsoft::graph::thumbnailColumn thumbnail;
        microsoft::graph::columnTypes type;
        microsoft::graph::columnValidation validation;
        std::unique_ptr<microsoft::graph::columnDefinition> sourceColumn;
    };

    struct b2cIdentityUserFlow : graph::identityUserFlow {
        microsoft::graph::userFlowApiConnectorConfiguration apiConnectorConfiguration;
        QString defaultLanguageTag;
        bool isLanguageCustomizationEnabled;
        QList<microsoft::graph::identityProvider> identityProviders;
        QList<microsoft::graph::userFlowLanguageConfiguration> languages;
        QList<microsoft::graph::identityUserFlowAttributeAssignment> userAttributeAssignments;
        QList<microsoft::graph::identityProviderBase> userFlowIdentityProviders;
    };

    struct detectedSensitiveContent : graph::detectedSensitiveContentBase {
        QList<microsoft::graph::classificationAttribute> classificationAttributes;
        microsoft::graph::classificationMethod classificationMethod;
        QList<microsoft::graph::sensitiveContentLocation> matches;
        microsoft::graph::sensitiveTypeScope scope;
        microsoft::graph::sensitiveTypeSource sensitiveTypeSource;
    };

    struct detectedSensitiveContentWrapper {
        QList<microsoft::graph::detectedSensitiveContent> classification;
    };

    struct machineLearningDetectedSensitiveContent : graph::detectedSensitiveContent {
        microsoft::graph::mlClassificationMatchTolerance matchTolerance;
        QString modelVersion;
    };

    struct classificationJobResponse : graph::jobResponseBase {
        microsoft::graph::detectedSensitiveContentWrapper result;
    };

    struct exactMatchDataStore : graph::exactMatchDataStoreBase {
        QList<microsoft::graph::exactMatchSession> sessions;
    };

    struct organization : graph::directoryObject {
        QList<microsoft::graph::assignedPlan> assignedPlans;
        QList<QString> businessPhones;
        QString city;
        QString country;
        QString countryLetterCode;
        QDateTime createdDateTime;
        microsoft::graph::directorySizeQuota directorySizeQuota;
        QString displayName;
        bool isMultipleDataLocationsForServicesEnabled;
        QList<QString> marketingNotificationEmails;
        QDateTime onPremisesLastSyncDateTime;
        bool onPremisesSyncEnabled;
        QString postalCode;
        QString preferredLanguage;
        microsoft::graph::privacyProfile privacyProfile;
        QList<microsoft::graph::provisionedPlan> provisionedPlans;
        QList<QString> securityComplianceNotificationMails;
        QList<QString> securityComplianceNotificationPhones;
        QString state;
        QString street;
        QList<QString> technicalNotificationMails;
        QList<microsoft::graph::verifiedDomain> verifiedDomains;
        microsoft::graph::certificateConnectorSetting certificateConnectorSetting;
        microsoft::graph::mdmAuthority mobileDeviceManagementAuthority;
        std::unique_ptr<microsoft::graph::organizationalBranding> branding;
        QList<microsoft::graph::certificateBasedAuthConfiguration> certificateBasedAuthConfiguration;
        QList<microsoft::graph::extension> extensions;
        std::unique_ptr<microsoft::graph::organizationSettings> settings;
    };

    struct unifiedRoleEligibilitySchedule : graph::unifiedRoleScheduleBase {
        QString memberType;
        microsoft::graph::requestSchedule scheduleInfo;
    };

    struct educationAssignment : graph::entity {
        microsoft::graph::educationAddedStudentAction addedStudentAction;
        microsoft::graph::educationAddToCalendarOptions addToCalendarAction;
        bool allowLateSubmissions;
        bool allowStudentsToAddResourcesToSubmission;
        QDateTime assignDateTime;
        QDateTime assignedDateTime;
        microsoft::graph::educationAssignmentRecipient assignTo;
        QString classId;
        QDateTime closeDateTime;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString displayName;
        QDateTime dueDateTime;
        microsoft::graph::educationAssignmentGradeType grading;
        microsoft::graph::educationItemBody instructions;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString notificationChannelUrl;
        QString resourcesFolderUrl;
        microsoft::graph::educationAssignmentStatus status;
        QString webUrl;
        QList<microsoft::graph::educationCategory> categories;
        QList<microsoft::graph::educationAssignmentResource> resources;
        std::unique_ptr<microsoft::graph::educationRubric> rubric;
        QList<microsoft::graph::educationSubmission> submissions;
    };

    struct educationCsvDataProvider : graph::educationSynchronizationDataProvider {
        microsoft::graph::educationSynchronizationCustomizations customizations;
    };

    struct exactMatchClassificationResult {
        QList<microsoft::graph::exactMatchDetectedSensitiveContent> classification;
        QList<microsoft::graph::classificationError> errors;
    };

    struct workbookChartSeries : graph::entity {
        QString name;
        std::unique_ptr<microsoft::graph::workbookChartSeriesFormat> format;
        QList<microsoft::graph::workbookChartPoint> points;
    };

    struct workbookChartAxis : graph::entity {
        microsoft::graph::Json majorUnit;
        microsoft::graph::Json maximum;
        microsoft::graph::Json minimum;
        microsoft::graph::Json minorUnit;
        std::unique_ptr<microsoft::graph::workbookChartAxisFormat> format;
        std::unique_ptr<microsoft::graph::workbookChartGridlines> majorGridlines;
        std::unique_ptr<microsoft::graph::workbookChartGridlines> minorGridlines;
        std::unique_ptr<microsoft::graph::workbookChartAxisTitle> title;
    };

    struct locationConstraint {
        bool isRequired;
        QList<microsoft::graph::locationConstraintItem> locations;
        bool suggestLocation;
    };

    struct mailSearchFolder : graph::mailFolder {
        QString filterQuery;
        bool includeNestedFolders;
        bool isSupported;
        QList<QString> sourceFolderIds;
    };

    struct documentSet {
        QList<microsoft::graph::contentTypeInfo> allowedContentTypes;
        QList<microsoft::graph::documentSetContent> defaultContents;
        bool propagateWelcomePageChanges;
        bool shouldPrefixNameToFile;
        QString welcomePageUrl;
        QList<microsoft::graph::columnDefinition> sharedColumns;
        QList<microsoft::graph::columnDefinition> welcomePageColumns;
    };

    struct evaluateDynamicMembershipResult {
        QString membershipRule;
        microsoft::graph::expressionEvaluationDetails membershipRuleEvaluationDetails;
        bool membershipRuleEvaluationResult;
    };

    struct expressionInputObject {
        microsoft::graph::objectDefinition definition;
        QList<microsoft::graph::stringKeyObjectValuePair> properties;
    };

    struct filterGroup {
        QList<microsoft::graph::filterClause> clauses;
        QString name;
    };

    struct appConsentApprovalRoute : graph::entity {
        QList<microsoft::graph::appConsentRequest> appConsentRequests;
    };

    struct approvalWorkflowProvider : graph::entity {
        QString displayName;
        QList<microsoft::graph::businessFlow> businessFlows;
        QList<microsoft::graph::businessFlow> businessFlowsWithRequestsAwaitingMyDecision;
        QList<microsoft::graph::governancePolicyTemplate> policyTemplates;
    };

    struct agreementFile : graph::agreementFileProperties {
        QList<microsoft::graph::agreementFileLocalization> localizations;
    };

    struct conditionalAccessConditionSet {
        microsoft::graph::conditionalAccessApplications applications;
        microsoft::graph::conditionalAccessClientApplications clientApplications;
        QList<microsoft::graph::conditionalAccessClientApp> clientAppTypes;
        microsoft::graph::conditionalAccessDevices devices;
        microsoft::graph::conditionalAccessDeviceStates deviceStates;
        microsoft::graph::conditionalAccessLocations locations;
        microsoft::graph::conditionalAccessPlatforms platforms;
        QList<microsoft::graph::riskLevel> signInRiskLevels;
        QList<microsoft::graph::riskLevel> userRiskLevels;
        microsoft::graph::conditionalAccessUsers users;
    };

    struct accessPackageQuestion {
        QString id;
        bool isRequired;
        int sequence;
        microsoft::graph::accessPackageLocalizedContent text;
    };

    struct accessPackageAnswerChoice {
        QString actualValue;
        microsoft::graph::accessPackageLocalizedContent displayValue;
    };

    struct accessPackageMultipleChoiceQuestion : graph::accessPackageQuestion {
        bool allowsMultipleSelection;
        QList<microsoft::graph::accessPackageAnswerChoice> choices;
    };

    struct accessPackageResourceAttributeQuestion : graph::accessPackageResourceAttributeSource {
        microsoft::graph::accessPackageQuestion question;
    };

    struct accessPackageTextInputQuestion : graph::accessPackageQuestion {
        bool isSingleLineQuestion;
    };

    struct approvalSettings {
        QString approvalMode;
        QList<microsoft::graph::approvalStage> approvalStages;
        bool isApprovalRequired;
        bool isApprovalRequiredForExtension;
        bool isRequestorJustificationRequired;
    };

    struct androidManagedAppProtection : graph::targetedManagedAppProtection {
        QString allowedAndroidDeviceManufacturers;
        QList<QString> allowedAndroidDeviceModels;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidDeviceManufacturerNotAllowed;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidDeviceModelNotAllowed;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidSafetyNetAppsVerificationFailed;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidSafetyNetDeviceAttestationFailed;
        microsoft::graph::managedAppRemediationAction appActionIfDeviceLockNotSet;
        QList<microsoft::graph::keyValuePair> approvedKeyboards;
        bool biometricAuthenticationBlocked;
        int blockAfterCompanyPortalUpdateDeferralInDays;
        bool connectToVpnOnLaunch;
        QString customBrowserDisplayName;
        QString customBrowserPackageId;
        QString customDialerAppDisplayName;
        QString customDialerAppPackageId;
        int deployedAppCount;
        bool deviceLockRequired;
        bool disableAppEncryptionIfDeviceEncryptionIsEnabled;
        bool encryptAppData;
        QList<microsoft::graph::keyValuePair> exemptedAppPackages;
        bool keyboardsRestricted;
        QString minimumRequiredCompanyPortalVersion;
        QString minimumRequiredPatchVersion;
        QString minimumWarningCompanyPortalVersion;
        QString minimumWarningPatchVersion;
        QString minimumWipeCompanyPortalVersion;
        QString minimumWipePatchVersion;
        microsoft::graph::androidManagedAppSafetyNetAppsVerificationType requiredAndroidSafetyNetAppsVerificationType;
        microsoft::graph::androidManagedAppSafetyNetDeviceAttestationType requiredAndroidSafetyNetDeviceAttestationType;
        microsoft::graph::androidManagedAppSafetyNetEvaluationType requiredAndroidSafetyNetEvaluationType;
        bool screenCaptureBlocked;
        int warnAfterCompanyPortalUpdateDeferralInDays;
        int wipeAfterCompanyPortalUpdateDeferralInDays;
        QList<microsoft::graph::managedMobileApp> apps;
        std::unique_ptr<microsoft::graph::managedAppPolicyDeploymentSummary> deploymentSummary;
    };

    struct defaultManagedAppProtection : graph::managedAppProtection {
        QString allowedAndroidDeviceManufacturers;
        QList<QString> allowedAndroidDeviceModels;
        QString allowedIosDeviceModels;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidDeviceManufacturerNotAllowed;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidDeviceModelNotAllowed;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidSafetyNetAppsVerificationFailed;
        microsoft::graph::managedAppRemediationAction appActionIfAndroidSafetyNetDeviceAttestationFailed;
        microsoft::graph::managedAppRemediationAction appActionIfDeviceLockNotSet;
        microsoft::graph::managedAppRemediationAction appActionIfIosDeviceModelNotAllowed;
        microsoft::graph::managedAppDataEncryptionType appDataEncryptionType;
        bool biometricAuthenticationBlocked;
        int blockAfterCompanyPortalUpdateDeferralInDays;
        bool connectToVpnOnLaunch;
        QString customBrowserDisplayName;
        QString customBrowserPackageId;
        QString customBrowserProtocol;
        QString customDialerAppDisplayName;
        QString customDialerAppPackageId;
        QString customDialerAppProtocol;
        QList<microsoft::graph::keyValuePair> customSettings;
        int deployedAppCount;
        bool deviceLockRequired;
        bool disableAppEncryptionIfDeviceEncryptionIsEnabled;
        bool disableProtectionOfManagedOutboundOpenInData;
        bool encryptAppData;
        QList<microsoft::graph::keyValuePair> exemptedAppPackages;
        QList<microsoft::graph::keyValuePair> exemptedAppProtocols;
        bool faceIdBlocked;
        bool filterOpenInToOnlyManagedApps;
        QString minimumRequiredCompanyPortalVersion;
        QString minimumRequiredPatchVersion;
        QString minimumRequiredSdkVersion;
        QString minimumWarningCompanyPortalVersion;
        QString minimumWarningPatchVersion;
        QString minimumWipeCompanyPortalVersion;
        QString minimumWipePatchVersion;
        QString minimumWipeSdkVersion;
        bool protectInboundDataFromUnknownSources;
        microsoft::graph::androidManagedAppSafetyNetAppsVerificationType requiredAndroidSafetyNetAppsVerificationType;
        microsoft::graph::androidManagedAppSafetyNetDeviceAttestationType requiredAndroidSafetyNetDeviceAttestationType;
        microsoft::graph::androidManagedAppSafetyNetEvaluationType requiredAndroidSafetyNetEvaluationType;
        bool screenCaptureBlocked;
        bool thirdPartyKeyboardsBlocked;
        int warnAfterCompanyPortalUpdateDeferralInDays;
        int wipeAfterCompanyPortalUpdateDeferralInDays;
        QList<microsoft::graph::managedMobileApp> apps;
        std::unique_ptr<microsoft::graph::managedAppPolicyDeploymentSummary> deploymentSummary;
    };

    struct iosManagedAppProtection : graph::targetedManagedAppProtection {
        QString allowedIosDeviceModels;
        microsoft::graph::managedAppRemediationAction appActionIfIosDeviceModelNotAllowed;
        microsoft::graph::managedAppDataEncryptionType appDataEncryptionType;
        QString customBrowserProtocol;
        QString customDialerAppProtocol;
        int deployedAppCount;
        bool disableProtectionOfManagedOutboundOpenInData;
        QList<microsoft::graph::keyValuePair> exemptedAppProtocols;
        bool faceIdBlocked;
        bool filterOpenInToOnlyManagedApps;
        QString minimumRequiredSdkVersion;
        QString minimumWipeSdkVersion;
        bool protectInboundDataFromUnknownSources;
        bool thirdPartyKeyboardsBlocked;
        QList<microsoft::graph::managedMobileApp> apps;
        std::unique_ptr<microsoft::graph::managedAppPolicyDeploymentSummary> deploymentSummary;
    };

    struct targetedManagedAppConfiguration : graph::managedAppConfiguration {
        microsoft::graph::targetedManagedAppGroupType appGroupType;
        int deployedAppCount;
        bool isAssigned;
        QList<microsoft::graph::managedMobileApp> apps;
        QList<microsoft::graph::targetedManagedAppPolicyAssignment> assignments;
        std::unique_ptr<microsoft::graph::managedAppPolicyDeploymentSummary> deploymentSummary;
    };

    struct androidCompliancePolicy : graph::deviceCompliancePolicy {
        microsoft::graph::deviceThreatProtectionLevel advancedThreatProtectionRequiredSecurityLevel;
        QString conditionStatementId;
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        QString minAndroidSecurityPatchLevel;
        QString osMaximumVersion;
        QString osMinimumVersion;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::androidRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        microsoft::graph::androidRequiredPasswordComplexity requiredPasswordComplexity;
        QList<microsoft::graph::appListItem> restrictedApps;
        bool securityBlockDeviceAdministratorManagedDevices;
        bool securityBlockJailbrokenDevices;
        bool securityDisableUsbDebugging;
        bool securityPreventInstallAppsFromUnknownSources;
        bool securityRequireCompanyPortalAppIntegrity;
        bool securityRequireGooglePlayServices;
        bool securityRequireSafetyNetAttestationBasicIntegrity;
        bool securityRequireSafetyNetAttestationCertifiedDevice;
        bool securityRequireUpToDateSecurityProviders;
        bool securityRequireVerifyApps;
        bool storageRequireEncryption;
    };

    struct androidDeviceOwnerCompliancePolicy : graph::deviceCompliancePolicy {
        microsoft::graph::deviceThreatProtectionLevel advancedThreatProtectionRequiredSecurityLevel;
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        QString minAndroidSecurityPatchLevel;
        QString osMaximumVersion;
        QString osMinimumVersion;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinimumLetterCharacters;
        int passwordMinimumLowerCaseCharacters;
        int passwordMinimumNonLetterCharacters;
        int passwordMinimumNumericCharacters;
        int passwordMinimumSymbolCharacters;
        int passwordMinimumUpperCaseCharacters;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordCountToBlock;
        bool passwordRequired;
        microsoft::graph::androidDeviceOwnerRequiredPasswordType passwordRequiredType;
        bool securityRequireIntuneAppIntegrity;
        bool securityRequireSafetyNetAttestationBasicIntegrity;
        bool securityRequireSafetyNetAttestationCertifiedDevice;
        bool storageRequireEncryption;
    };

    struct androidForWorkCompliancePolicy : graph::deviceCompliancePolicy {
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        QString minAndroidSecurityPatchLevel;
        QString osMaximumVersion;
        QString osMinimumVersion;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::androidRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool securityBlockJailbrokenDevices;
        bool securityDisableUsbDebugging;
        bool securityPreventInstallAppsFromUnknownSources;
        bool securityRequireCompanyPortalAppIntegrity;
        microsoft::graph::androidSafetyNetEvaluationType securityRequiredAndroidSafetyNetEvaluationType;
        bool securityRequireGooglePlayServices;
        bool securityRequireSafetyNetAttestationBasicIntegrity;
        bool securityRequireSafetyNetAttestationCertifiedDevice;
        bool securityRequireUpToDateSecurityProviders;
        bool securityRequireVerifyApps;
        bool storageRequireEncryption;
    };

    struct androidWorkProfileCompliancePolicy : graph::deviceCompliancePolicy {
        microsoft::graph::deviceThreatProtectionLevel advancedThreatProtectionRequiredSecurityLevel;
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        QString minAndroidSecurityPatchLevel;
        QString osMaximumVersion;
        QString osMinimumVersion;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::androidRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool securityBlockJailbrokenDevices;
        bool securityDisableUsbDebugging;
        bool securityPreventInstallAppsFromUnknownSources;
        bool securityRequireCompanyPortalAppIntegrity;
        microsoft::graph::androidSafetyNetEvaluationType securityRequiredAndroidSafetyNetEvaluationType;
        bool securityRequireGooglePlayServices;
        bool securityRequireSafetyNetAttestationBasicIntegrity;
        bool securityRequireSafetyNetAttestationCertifiedDevice;
        bool securityRequireUpToDateSecurityProviders;
        bool securityRequireVerifyApps;
        bool storageRequireEncryption;
    };

    struct aospDeviceOwnerCompliancePolicy : graph::deviceCompliancePolicy {
        QString minAndroidSecurityPatchLevel;
        QString osMaximumVersion;
        QString osMinimumVersion;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        bool passwordRequired;
        microsoft::graph::androidDeviceOwnerRequiredPasswordType passwordRequiredType;
        bool securityBlockJailbrokenDevices;
        bool storageRequireEncryption;
    };

    struct defaultDeviceCompliancePolicy : graph::deviceCompliancePolicy {
    };

    struct deviceCompliancePolicyGroupAssignment : graph::entity {
        bool excludeGroup;
        QString targetGroupId;
        std::unique_ptr<microsoft::graph::deviceCompliancePolicy> deviceCompliancePolicy;
    };

    struct iosCompliancePolicy : graph::deviceCompliancePolicy {
        microsoft::graph::deviceThreatProtectionLevel advancedThreatProtectionRequiredSecurityLevel;
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        bool managedEmailProfileRequired;
        QString osMaximumBuildVersion;
        QString osMaximumVersion;
        QString osMinimumBuildVersion;
        QString osMinimumVersion;
        bool passcodeBlockSimple;
        int passcodeExpirationDays;
        int passcodeMinimumCharacterSetCount;
        int passcodeMinimumLength;
        int passcodeMinutesOfInactivityBeforeLock;
        int passcodeMinutesOfInactivityBeforeScreenTimeout;
        int passcodePreviousPasscodeBlockCount;
        bool passcodeRequired;
        microsoft::graph::requiredPasswordType passcodeRequiredType;
        QList<microsoft::graph::appListItem> restrictedApps;
        bool securityBlockJailbrokenDevices;
    };

    struct macOSCompliancePolicy : graph::deviceCompliancePolicy {
        microsoft::graph::deviceThreatProtectionLevel advancedThreatProtectionRequiredSecurityLevel;
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        bool firewallBlockAllIncoming;
        bool firewallEnabled;
        bool firewallEnableStealthMode;
        microsoft::graph::macOSGatekeeperAppSources gatekeeperAllowedAppSource;
        QString osMaximumBuildVersion;
        QString osMaximumVersion;
        QString osMinimumBuildVersion;
        QString osMinimumVersion;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        bool storageRequireEncryption;
        bool systemIntegrityProtectionEnabled;
    };

    struct windows10CompliancePolicy : graph::deviceCompliancePolicy {
        bool activeFirewallRequired;
        bool antiSpywareRequired;
        bool antivirusRequired;
        bool bitLockerEnabled;
        bool codeIntegrityEnabled;
        bool configurationManagerComplianceRequired;
        bool defenderEnabled;
        QString defenderVersion;
        microsoft::graph::deviceCompliancePolicyScript deviceCompliancePolicyScript;
        bool deviceThreatProtectionEnabled;
        microsoft::graph::deviceThreatProtectionLevel deviceThreatProtectionRequiredSecurityLevel;
        bool earlyLaunchAntiMalwareDriverEnabled;
        QString mobileOsMaximumVersion;
        QString mobileOsMinimumVersion;
        QString osMaximumVersion;
        QString osMinimumVersion;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        bool passwordRequiredToUnlockFromIdle;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        bool requireHealthyDeviceReport;
        bool rtpEnabled;
        bool secureBootEnabled;
        bool signatureOutOfDate;
        bool storageRequireEncryption;
        bool tpmRequired;
        QList<microsoft::graph::operatingSystemVersionRange> validOperatingSystemBuildRanges;
    };

    struct windows10MobileCompliancePolicy : graph::deviceCompliancePolicy {
        bool activeFirewallRequired;
        bool bitLockerEnabled;
        bool codeIntegrityEnabled;
        bool earlyLaunchAntiMalwareDriverEnabled;
        QString osMaximumVersion;
        QString osMinimumVersion;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        bool passwordRequireToUnlockFromIdle;
        bool secureBootEnabled;
        bool storageRequireEncryption;
        QList<microsoft::graph::operatingSystemVersionRange> validOperatingSystemBuildRanges;
    };

    struct windows81CompliancePolicy : graph::deviceCompliancePolicy {
        QString osMaximumVersion;
        QString osMinimumVersion;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        bool storageRequireEncryption;
    };

    struct windowsPhone81CompliancePolicy : graph::deviceCompliancePolicy {
        QString osMaximumVersion;
        QString osMinimumVersion;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        bool storageRequireEncryption;
    };

    struct deviceManagementConfigurationChoiceSettingCollectionInstance : graph::deviceManagementConfigurationSettingInstance {
        QList<microsoft::graph::deviceManagementConfigurationChoiceSettingValue> choiceSettingCollectionValue;
    };

    struct deviceManagementConfigurationChoiceSettingValueTemplate {
        microsoft::graph::deviceManagementConfigurationChoiceSettingValueDefaultTemplate defaultValue;
        microsoft::graph::deviceManagementConfigurationChoiceSettingValueDefinitionTemplate recommendedValueDefinition;
        microsoft::graph::deviceManagementConfigurationChoiceSettingValueDefinitionTemplate requiredValueDefinition;
        QString settingValueTemplateId;
    };

    struct deviceManagementConfigurationChoiceSettingInstanceTemplate : graph::deviceManagementConfigurationSettingInstanceTemplate {
        microsoft::graph::deviceManagementConfigurationChoiceSettingValueTemplate choiceSettingValueTemplate;
    };

    struct deviceManagementConfigurationGroupSettingCollectionInstance : graph::deviceManagementConfigurationSettingInstance {
        QList<microsoft::graph::deviceManagementConfigurationGroupSettingValue> groupSettingCollectionValue;
    };

    struct deviceManagementIntentSettingCategory : graph::deviceManagementSettingCategory {
        QList<microsoft::graph::deviceManagementSettingInstance> settings;
    };

    struct deviceManagementTemplateSettingCategory : graph::deviceManagementSettingCategory {
        QList<microsoft::graph::deviceManagementSettingInstance> recommendedSettings;
    };

    struct mobileAppTroubleshootingHistoryItem {
        QDateTime occurrenceDateTime;
        microsoft::graph::deviceManagementTroubleshootingErrorDetails troubleshootingErrorDetails;
    };

    struct mobileAppTroubleshootingAppPolicyCreationHistory : graph::mobileAppTroubleshootingHistoryItem {
        QString errorCode;
        microsoft::graph::runState runState;
    };

    struct mobileAppTroubleshootingAppStateHistory : graph::mobileAppTroubleshootingHistoryItem {
        microsoft::graph::mobileAppActionType actionType;
        QString errorCode;
        microsoft::graph::runState runState;
    };

    struct mobileAppTroubleshootingAppTargetHistory : graph::mobileAppTroubleshootingHistoryItem {
        QString errorCode;
        microsoft::graph::runState runState;
        QString securityGroupId;
    };

    struct mobileAppTroubleshootingAppUpdateHistory : graph::mobileAppTroubleshootingHistoryItem {
    };

    struct mobileAppTroubleshootingDeviceCheckinHistory : graph::mobileAppTroubleshootingHistoryItem {
    };

    struct appleVppTokenTroubleshootingEvent : graph::deviceManagementTroubleshootingEvent {
        QString tokenId;
    };

    struct enrollmentTroubleshootingEvent : graph::deviceManagementTroubleshootingEvent {
        QString deviceId;
        microsoft::graph::deviceEnrollmentType enrollmentType;
        microsoft::graph::deviceEnrollmentFailureReason failureCategory;
        QString failureReason;
        QString managedDeviceIdentifier;
        QString operatingSystem;
        QString osVersion;
        QString userId;
    };

    struct serviceAnnouncement : graph::entity {
        QList<microsoft::graph::serviceHealth> healthOverviews;
        QList<microsoft::graph::serviceHealthIssue> issues;
        QList<microsoft::graph::serviceUpdateMessage> messages;
    };

    struct aggregationOption {
        microsoft::graph::bucketAggregationDefinition bucketDefinition;
        QString field;
        int size;
    };

    struct alterationResponse {
        QString originalQueryString;
        microsoft::graph::searchAlteration queryAlteration;
        microsoft::graph::searchAlterationType queryAlterationType;
    };

    struct searchRequest {
        QList<QString> aggregationFilters;
        QList<microsoft::graph::aggregationOption> aggregations;
        QList<QString> contentSources;
        bool enableTopResults;
        QList<microsoft::graph::entityType> entityTypes;
        QList<QString> fields;
        int from;
        microsoft::graph::searchQuery query;
        microsoft::graph::resultTemplateOption resultTemplateOptions;
        int size;
        QList<microsoft::graph::sortProperty> sortProperties;
        QList<QString> stored_fields;
    };

    struct searchResponse {
        microsoft::graph::alterationResponse queryAlterationResponse;
        QList<microsoft::graph::searchResultSet> value;
    };

    struct searchEntity : graph::entity {
        QList<microsoft::graph::search::acronym> acronyms;
        QList<microsoft::graph::search::bookmark> bookmarks;
        QList<microsoft::graph::search::qna> qnas;
    };

    struct customerPayment : graph::entity {
        double amount;
        QUuid appliesToInvoiceId;
        QString appliesToInvoiceNumber;
        QString comment;
        QString contactId;
        QUuid customerId;
        QString customerNumber;
        QString description;
        QString documentNumber;
        QString externalDocumentNumber;
        QString journalDisplayName;
        QDateTime lastModifiedDateTime;
        int lineNumber;
        QDate postingDate;
        std::unique_ptr<microsoft::graph::customer> customer;
    };

    struct plannerBucket : graph::plannerDelta {
        QString name;
        QString orderHint;
        QString planId;
        QList<microsoft::graph::plannerTask> tasks;
    };

    struct plannerPlan : graph::plannerDelta {
        microsoft::graph::plannerPlanContainer container;
        microsoft::graph::plannerPlanContextCollection contexts;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString owner;
        QString title;
        QList<microsoft::graph::plannerBucket> buckets;
        std::unique_ptr<microsoft::graph::plannerPlanDetails> details;
        QList<microsoft::graph::plannerTask> tasks;
    };

    struct plannerRoster : graph::entity {
        QList<microsoft::graph::plannerRosterMember> members;
        QList<microsoft::graph::plannerPlan> plans;
    };

    struct shiftPreferences : graph::changeTrackedEntity {
        QList<microsoft::graph::shiftAvailability> availability;
    };

    struct CopyNotebookModel {
        QString createdBy;
        microsoft::graph::identitySet createdByIdentity;
        QDateTime createdTime;
        QString id;
        bool isDefault;
        bool isShared;
        QString lastModifiedBy;
        microsoft::graph::identitySet lastModifiedByIdentity;
        QDateTime lastModifiedTime;
        microsoft::graph::notebookLinks links;
        QString name;
        QString sectionGroupsUrl;
        QString sectionsUrl;
        QString self;
        microsoft::graph::onenoteUserRole userRole;
    };

    struct unifiedRoleManagementPolicyApprovalRule : graph::unifiedRoleManagementPolicyRule {
        microsoft::graph::approvalSettings setting;
    };

    struct userSimulationDetails {
        int assignedTrainingsCount;
        int completedTrainingsCount;
        QDateTime compromisedDateTime;
        int inProgressTrainingsCount;
        bool isCompromised;
        QDateTime reportedPhishDateTime;
        QList<microsoft::graph::userSimulationEventInfo> simulationEvents;
        microsoft::graph::attackSimulationUser simulationUser;
        QList<microsoft::graph::userTrainingEventInfo> trainingEvents;
    };

    struct microsoftAuthenticatorAuthenticationMethod : graph::authenticationMethod {
        QDateTime createdDateTime;
        QString deviceTag;
        QString displayName;
        QString phoneAppVersion;
        std::unique_ptr<microsoft::graph::device> device;
    };

    struct passwordlessMicrosoftAuthenticatorAuthenticationMethod : graph::authenticationMethod {
        QDateTime createdDateTime;
        QDateTime creationDateTime;
        QString displayName;
        std::unique_ptr<microsoft::graph::device> device;
    };

    struct windowsHelloForBusinessAuthenticationMethod : graph::authenticationMethod {
        QDateTime createdDateTime;
        QString displayName;
        microsoft::graph::authenticationMethodKeyStrength keyStrength;
        std::unique_ptr<microsoft::graph::device> device;
    };

    struct externalConnection : graph::entity {
        microsoft::graph::configuration configuration;
        QString description;
        QString name;
        microsoft::graph::connectionState state;
        QList<microsoft::graph::externalGroup> groups;
        QList<microsoft::graph::externalItem> items;
        QList<microsoft::graph::connectionOperation> operations;
        std::unique_ptr<microsoft::graph::schema> schema;
    };

    struct chatMessageMention {
        int id;
        microsoft::graph::chatMessageMentionedIdentitySet mentioned;
        QString mentionText;
    };

    struct teamsApp : graph::entity {
        QString displayName;
        microsoft::graph::teamsAppDistributionMethod distributionMethod;
        QString externalId;
        QList<microsoft::graph::teamsAppDefinition> appDefinitions;
    };

    struct chatMessage : graph::entity {
        QList<microsoft::graph::chatMessageAttachment> attachments;
        microsoft::graph::itemBody body;
        microsoft::graph::channelIdentity channelIdentity;
        QString chatId;
        QDateTime createdDateTime;
        QDateTime deletedDateTime;
        QString etag;
        microsoft::graph::eventMessageDetail eventDetail;
        microsoft::graph::chatMessageFromIdentitySet from;
        microsoft::graph::chatMessageImportance importance;
        QDateTime lastEditedDateTime;
        QDateTime lastModifiedDateTime;
        QString locale;
        QList<microsoft::graph::chatMessageMention> mentions;
        microsoft::graph::chatMessageType messageType;
        microsoft::graph::chatMessagePolicyViolation policyViolation;
        QList<microsoft::graph::chatMessageReaction> reactions;
        QString replyToId;
        QString subject;
        QString summary;
        QString webUrl;
        QList<microsoft::graph::chatMessageHostedContent> hostedContents;
        QList<microsoft::graph::chatMessage> replies;
    };

    struct teamsTab : graph::entity {
        microsoft::graph::teamsTabConfiguration configuration;
        QString displayName;
        QString messageId;
        QString sortOrderIndex;
        QString teamsAppId;
        QString webUrl;
        std::unique_ptr<microsoft::graph::teamsApp> teamsApp;
    };

    struct teamwork : graph::entity {
        QList<microsoft::graph::workforceIntegration> workforceIntegrations;
    };

    struct todoTaskList : graph::entity {
        QString displayName;
        bool isOwner;
        bool isShared;
        microsoft::graph::wellknownListName wellknownListName;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::todoTask> tasks;
    };

} // namespace microsoft::graph

namespace microsoft::graph::callRecords {
    struct session : graph::entity {
        microsoft::graph::callRecords::endpoint callee;
        microsoft::graph::callRecords::endpoint caller;
        QDateTime endDateTime;
        microsoft::graph::callRecords::failureInfo failureInfo;
        QList<microsoft::graph::callRecords::modality> modalities;
        QDateTime startDateTime;
        QList<microsoft::graph::callRecords::segment> segments;
    };

} // namespace microsoft::graph::callRecords

namespace microsoft::graph::managedTenants {
    struct managementActionTenantDeploymentStatus : graph::entity {
        QList<microsoft::graph::managedTenants::managementActionDeploymentStatus> statuses;
        QString tenantGroupId;
        QString tenantId;
    };

    struct tenantGroup : graph::entity {
        bool allTenantsIncluded;
        QString displayName;
        QList<microsoft::graph::managedTenants::managementActionInfo> managementActions;
        QList<microsoft::graph::managedTenants::managementIntentInfo> managementIntents;
        QList<QString> tenantIds;
    };

    struct tenant : graph::entity {
        microsoft::graph::managedTenants::tenantContract contract;
        QDateTime createdDateTime;
        QString displayName;
        QDateTime lastUpdatedDateTime;
        QString tenantId;
        microsoft::graph::managedTenants::tenantStatusInformation tenantStatusInformation;
    };

} // namespace microsoft::graph::managedTenants

namespace microsoft::graph::externalConnectors {
    struct externalConnection : graph::entity {
        microsoft::graph::externalConnectors::configuration configuration;
        QString connectorId;
        QString description;
        QString name;
        microsoft::graph::externalConnectors::searchSettings searchSettings;
        microsoft::graph::externalConnectors::connectionState state;
        QList<microsoft::graph::externalConnectors::externalGroup> groups;
        QList<microsoft::graph::externalConnectors::externalItem> items;
        QList<microsoft::graph::externalConnectors::connectionOperation> operations;
        std::unique_ptr<microsoft::graph::externalConnectors::schema> schema;
    };

} // namespace microsoft::graph::externalConnectors

namespace microsoft::graph::windowsUpdates {
    struct deploymentSettings {
        microsoft::graph::windowsUpdates::monitoringSettings monitoring;
        microsoft::graph::windowsUpdates::rolloutSettings rollout;
    };

    struct windowsDeploymentSettings : microsoft::graph::windowsUpdates::deploymentSettings {
        microsoft::graph::windowsUpdates::userExperienceSettings userExperience;
    };

    struct deployment : graph::entity {
        microsoft::graph::windowsUpdates::deployableContent content;
        QDateTime createdDateTime;
        QDateTime lastModifiedDateTime;
        microsoft::graph::windowsUpdates::deploymentSettings settings;
        microsoft::graph::windowsUpdates::deploymentState state;
        std::unique_ptr<microsoft::graph::windowsUpdates::deploymentAudience> audience;
    };

    struct updates : graph::entity {
        std::unique_ptr<microsoft::graph::windowsUpdates::catalog> catalog;
        QList<microsoft::graph::windowsUpdates::deployment> deployments;
        QList<microsoft::graph::windowsUpdates::updatableAsset> updatableAssets;
    };

} // namespace microsoft::graph::windowsUpdates

namespace microsoft::graph {
    struct mobileAppTroubleshootingEvent : graph::deviceManagementTroubleshootingEvent {
        QString applicationId;
        QList<microsoft::graph::mobileAppTroubleshootingHistoryItem> history;
        QString managedDeviceIdentifier;
        QString userId;
        QList<microsoft::graph::appLogCollectionRequest> appLogCollectionRequests;
    };

    struct plannerUser : graph::plannerDelta {
        microsoft::graph::plannerFavoritePlanReferenceCollection favoritePlanReferences;
        microsoft::graph::plannerRecentPlanReferenceCollection recentPlanReferences;
        QList<microsoft::graph::plannerDelta> all;
        QList<microsoft::graph::plannerPlan> favoritePlans;
        QList<microsoft::graph::plannerPlan> plans;
        QList<microsoft::graph::plannerPlan> recentPlans;
        QList<microsoft::graph::plannerPlan> rosterPlans;
        QList<microsoft::graph::plannerTask> tasks;
    };

    struct userSettings : graph::entity {
        bool contributionToContentDiscoveryAsOrganizationDisabled;
        bool contributionToContentDiscoveryDisabled;
        std::unique_ptr<microsoft::graph::userInsightsSettings> itemInsights;
        std::unique_ptr<microsoft::graph::regionalAndLanguageSettings> regionalAndLanguageSettings;
        std::unique_ptr<microsoft::graph::shiftPreferences> shiftPreferences;
    };

    struct authentication : graph::entity {
        QList<microsoft::graph::emailAuthenticationMethod> emailMethods;
        QList<microsoft::graph::fido2AuthenticationMethod> fido2Methods;
        QList<microsoft::graph::authenticationMethod> methods;
        QList<microsoft::graph::microsoftAuthenticatorAuthenticationMethod> microsoftAuthenticatorMethods;
        QList<microsoft::graph::longRunningOperation> operations;
        QList<microsoft::graph::passwordlessMicrosoftAuthenticatorAuthenticationMethod> passwordlessMicrosoftAuthenticatorMethods;
        QList<microsoft::graph::passwordAuthenticationMethod> passwordMethods;
        QList<microsoft::graph::phoneAuthenticationMethod> phoneMethods;
        QList<microsoft::graph::temporaryAccessPassAuthenticationMethod> temporaryAccessPassMethods;
        QList<microsoft::graph::windowsHelloForBusinessAuthenticationMethod> windowsHelloForBusinessMethods;
    };

    struct todo : graph::entity {
        QList<microsoft::graph::todoTaskList> lists;
    };

    struct conditionalAccessPolicy : graph::entity {
        microsoft::graph::conditionalAccessConditionSet conditions;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        microsoft::graph::conditionalAccessGrantControls grantControls;
        QDateTime modifiedDateTime;
        microsoft::graph::conditionalAccessSessionControls sessionControls;
        microsoft::graph::conditionalAccessPolicyState state;
    };

    struct deviceManagementIntent : graph::entity {
        QString description;
        QString displayName;
        bool isAssigned;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QString templateId;
        QList<microsoft::graph::deviceManagementIntentAssignment> assignments;
        QList<microsoft::graph::deviceManagementIntentSettingCategory> categories;
        QList<microsoft::graph::deviceManagementIntentDeviceSettingStateSummary> deviceSettingStateSummaries;
        QList<microsoft::graph::deviceManagementIntentDeviceState> deviceStates;
        std::unique_ptr<microsoft::graph::deviceManagementIntentDeviceStateSummary> deviceStateSummary;
        QList<microsoft::graph::deviceManagementSettingInstance> settings;
        QList<microsoft::graph::deviceManagementIntentUserState> userStates;
        std::unique_ptr<microsoft::graph::deviceManagementIntentUserStateSummary> userStateSummary;
    };

    struct deviceManagementTemplate : graph::entity {
        QString description;
        QString displayName;
        int intentCount;
        bool isDeprecated;
        microsoft::graph::policyPlatformType platformType;
        QDateTime publishedDateTime;
        microsoft::graph::deviceManagementTemplateSubtype templateSubtype;
        microsoft::graph::deviceManagementTemplateType templateType;
        QString versionInfo;
        QList<microsoft::graph::deviceManagementTemplateSettingCategory> categories;
        QList<microsoft::graph::deviceManagementTemplate> migratableTo;
        QList<microsoft::graph::deviceManagementSettingInstance> settings;
    };

    struct rbacApplicationMultiple : graph::entity {
        QList<microsoft::graph::unifiedRbacResourceNamespace> resourceNamespaces;
        QList<microsoft::graph::unifiedRoleAssignmentMultiple> roleAssignments;
        QList<microsoft::graph::unifiedRoleDefinition> roleDefinitions;
    };

    struct teamsAppInstallation : graph::entity {
        std::unique_ptr<microsoft::graph::teamsApp> teamsApp;
        std::unique_ptr<microsoft::graph::teamsAppDefinition> teamsAppDefinition;
    };

    struct conversation : graph::entity {
        bool hasAttachments;
        QDateTime lastDeliveredDateTime;
        QString preview;
        QString topic;
        QList<QString> uniqueSenders;
        QList<microsoft::graph::conversationThread> threads;
    };

    struct plannerGroup : graph::entity {
        QList<microsoft::graph::plannerPlan> plans;
    };

    struct contentType : graph::entity {
        QList<QString> associatedHubsUrls;
        QString description;
        microsoft::graph::documentSet documentSet;
        microsoft::graph::documentSetContent documentTemplate;
        QString group;
        bool hidden;
        microsoft::graph::itemReference inheritedFrom;
        bool isBuiltIn;
        QString name;
        microsoft::graph::contentTypeOrder order;
        QString parentId;
        bool propagateChanges;
        bool readOnly;
        bool sealed;
        std::unique_ptr<microsoft::graph::contentType> base;
        QList<microsoft::graph::contentType> baseTypes;
        QList<microsoft::graph::columnLink> columnLinks;
        QList<microsoft::graph::columnDefinition> columnPositions;
        QList<microsoft::graph::columnDefinition> columns;
    };

    struct conditionalAccessRoot : graph::entity {
        QList<microsoft::graph::authenticationContextClassReference> authenticationContextClassReferences;
        QList<microsoft::graph::namedLocation> namedLocations;
        QList<microsoft::graph::conditionalAccessPolicy> policies;
    };

    struct dataClassificationService : graph::entity {
        QList<microsoft::graph::exactMatchDataStore> exactMatchDataStores;
        QList<microsoft::graph::fileClassificationRequest> classifyFile;
        QList<microsoft::graph::jobResponseBase> classifyFileJobs;
        QList<microsoft::graph::textClassificationRequest> classifyText;
        QList<microsoft::graph::jobResponseBase> classifyTextJobs;
        QList<microsoft::graph::jobResponseBase> evaluateDlpPoliciesJobs;
        QList<microsoft::graph::jobResponseBase> evaluateLabelJobs;
        QList<microsoft::graph::jobResponseBase> jobs;
        QList<microsoft::graph::sensitiveType> sensitiveTypes;
        QList<microsoft::graph::sensitivityLabel> sensitivityLabels;
        QList<microsoft::graph::exactMatchUploadAgent> exactMatchUploadAgents;
    };

    struct unifiedRoleAssignmentSchedule : graph::unifiedRoleScheduleBase {
        QString assignmentType;
        QString memberType;
        microsoft::graph::requestSchedule scheduleInfo;
        std::unique_ptr<microsoft::graph::unifiedRoleEligibilitySchedule> activatedUsing;
    };

    struct unifiedRoleEligibilityScheduleRequest : graph::request {
        QString action;
        QString appScopeId;
        QString directoryScopeId;
        bool isValidationOnly;
        QString justification;
        QString principalId;
        QString roleDefinitionId;
        microsoft::graph::requestSchedule scheduleInfo;
        QString targetScheduleId;
        microsoft::graph::ticketInfo ticketInfo;
        std::unique_ptr<microsoft::graph::appScope> appScope;
        std::unique_ptr<microsoft::graph::directoryObject> directoryScope;
        std::unique_ptr<microsoft::graph::directoryObject> principal;
        std::unique_ptr<microsoft::graph::unifiedRoleDefinition> roleDefinition;
        std::unique_ptr<microsoft::graph::unifiedRoleEligibilitySchedule> targetSchedule;
    };

    struct workbookChartAxes : graph::entity {
        std::unique_ptr<microsoft::graph::workbookChartAxis> categoryAxis;
        std::unique_ptr<microsoft::graph::workbookChartAxis> seriesAxis;
        std::unique_ptr<microsoft::graph::workbookChartAxis> valueAxis;
    };

    struct filter {
        QList<microsoft::graph::filterGroup> categoryFilterGroups;
        QList<microsoft::graph::filterGroup> groups;
        QList<microsoft::graph::filterGroup> inputFilterGroups;
    };

    struct agreement : graph::entity {
        QString displayName;
        bool isPerDeviceAcceptanceRequired;
        bool isViewingBeforeAcceptanceRequired;
        microsoft::graph::termsExpiration termsExpiration;
        std::chrono::system_clock::duration userReacceptRequiredFrequency;
        QList<microsoft::graph::agreementAcceptance> acceptances;
        std::unique_ptr<microsoft::graph::agreementFile> file;
        QList<microsoft::graph::agreementFileLocalization> files;
    };

    struct accessPackageAnswer {
        microsoft::graph::accessPackageQuestion answeredQuestion;
        QString displayValue;
    };

    struct accessPackageAnswerString : graph::accessPackageAnswer {
        QString value;
    };

    struct accessPackageAssignmentRequestRequirements {
        QList<microsoft::graph::accessPackageAnswer> existingAnswers;
        bool isApprovalRequired;
        bool isApprovalRequiredForExtension;
        bool isCustomAssignmentScheduleAllowed;
        bool isRequestorJustificationRequired;
        QString policyDescription;
        QString policyDisplayName;
        QString policyId;
        QList<microsoft::graph::accessPackageQuestion> questions;
        microsoft::graph::requestSchedule schedule;
    };

    struct deviceManagementConfigurationChoiceSettingCollectionInstanceTemplate : graph::deviceManagementConfigurationSettingInstanceTemplate {
        bool allowUnmanagedValues;
        QList<microsoft::graph::deviceManagementConfigurationChoiceSettingValueTemplate> choiceSettingCollectionValueTemplate;
    };

    struct securityBaselineTemplate : graph::deviceManagementTemplate {
        QList<microsoft::graph::securityBaselineCategoryStateSummary> categoryDeviceStateSummaries;
        QList<microsoft::graph::securityBaselineDeviceState> deviceStates;
        std::unique_ptr<microsoft::graph::securityBaselineStateSummary> deviceStateSummary;
    };

    struct customerPaymentJournal : graph::entity {
        QUuid balancingAccountId;
        QString balancingAccountNumber;
        QString code;
        QString displayName;
        QDateTime lastModifiedDateTime;
        std::unique_ptr<microsoft::graph::account> account;
        QList<microsoft::graph::customerPayment> customerPayments;
    };

    struct planner {
        QList<microsoft::graph::plannerBucket> buckets;
        QList<microsoft::graph::plannerPlan> plans;
        QList<microsoft::graph::plannerRoster> rosters;
        QList<microsoft::graph::plannerTask> tasks;
    };

    struct simulationReport {
        microsoft::graph::simulationReportOverview overview;
        QList<microsoft::graph::userSimulationDetails> simulationUsers;
    };

    struct simulation : graph::entity {
        microsoft::graph::simulationAttackTechnique attackTechnique;
        microsoft::graph::simulationAttackType attackType;
        bool cleanupArtifacts;
        QDateTime completionDateTime;
        microsoft::graph::emailIdentity createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        bool enableRegionTimezoneDelivery;
        bool includeAllAccountTargets;
        bool isAutomated;
        microsoft::graph::emailIdentity lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QDateTime launchDateTime;
        microsoft::graph::simulationMode mode;
        microsoft::graph::payloadDeliveryPlatform payloadDeliveryPlatform;
        microsoft::graph::payloadSource payloadSource;
        microsoft::graph::simulationReport report;
        microsoft::graph::simulationStatus status;
        microsoft::graph::trainingAssignmentPreference trainingAssignmentPreference;
        microsoft::graph::trainingContentPreference trainingContentPreference;
        QDateTime trainingDueDateTime;
    };

    struct external : graph::entity {
        QList<microsoft::graph::externalConnection> connections;
    };

    struct appCatalogs {
        QList<microsoft::graph::teamsApp> teamsApps;
    };

} // namespace microsoft::graph

namespace microsoft::graph::callRecords {
    struct callRecord : graph::entity {
        QDateTime endDateTime;
        QString joinWebUrl;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::callRecords::modality> modalities;
        microsoft::graph::identitySet organizer;
        QList<microsoft::graph::identitySet> participants;
        QDateTime startDateTime;
        microsoft::graph::callRecords::callType type;
        long long version;
        QList<microsoft::graph::callRecords::session> sessions;
    };

} // namespace microsoft::graph::callRecords

namespace microsoft::graph::managedTenants {
    struct managedTenant : graph::entity {
        QList<microsoft::graph::managedTenants::aggregatedPolicyCompliance> aggregatedPolicyCompliances;
        QList<microsoft::graph::managedTenants::cloudPcConnection> cloudPcConnections;
        QList<microsoft::graph::managedTenants::cloudPcDevice> cloudPcDevices;
        QList<microsoft::graph::managedTenants::cloudPcOverview> cloudPcsOverview;
        QList<microsoft::graph::managedTenants::conditionalAccessPolicyCoverage> conditionalAccessPolicyCoverages;
        QList<microsoft::graph::managedTenants::credentialUserRegistrationsSummary> credentialUserRegistrationsSummaries;
        QList<microsoft::graph::managedTenants::deviceCompliancePolicySettingStateSummary> deviceCompliancePolicySettingStateSummaries;
        QList<microsoft::graph::managedTenants::managedDeviceCompliance> managedDeviceCompliances;
        QList<microsoft::graph::managedTenants::managedDeviceComplianceTrend> managedDeviceComplianceTrends;
        QList<microsoft::graph::managedTenants::managementAction> managementActions;
        QList<microsoft::graph::managedTenants::managementActionTenantDeploymentStatus> managementActionTenantDeploymentStatuses;
        QList<microsoft::graph::managedTenants::managementIntent> managementIntents;
        QList<microsoft::graph::managedTenants::managementTemplate> managementTemplates;
        QList<microsoft::graph::managedTenants::riskyUser> riskyUsers;
        QList<microsoft::graph::managedTenants::tenantGroup> tenantGroups;
        QList<microsoft::graph::managedTenants::tenant> tenants;
        QList<microsoft::graph::managedTenants::tenantCustomizedInformation> tenantsCustomizedInformation;
        QList<microsoft::graph::managedTenants::tenantDetailedInformation> tenantsDetailedInformation;
        QList<microsoft::graph::managedTenants::tenantTag> tenantTags;
        QList<microsoft::graph::managedTenants::windowsDeviceMalwareState> windowsDeviceMalwareStates;
        QList<microsoft::graph::managedTenants::windowsProtectionState> windowsProtectionStates;
    };

} // namespace microsoft::graph::managedTenants

namespace microsoft::graph::externalConnectors {
    struct external {
        QList<microsoft::graph::externalConnectors::externalConnection> connections;
    };

} // namespace microsoft::graph::externalConnectors

namespace microsoft::graph::windowsUpdates {
    struct windows : graph::entity {
        std::unique_ptr<microsoft::graph::windowsUpdates::updates> updates;
    };

} // namespace microsoft::graph::windowsUpdates

namespace microsoft::graph {
    struct chat : graph::entity {
        microsoft::graph::chatType chatType;
        QDateTime createdDateTime;
        QDateTime lastUpdatedDateTime;
        microsoft::graph::teamworkOnlineMeetingInfo onlineMeetingInfo;
        QString tenantId;
        QString topic;
        microsoft::graph::chatViewpoint viewpoint;
        QString webUrl;
        QList<microsoft::graph::teamsAppInstallation> installedApps;
        std::unique_ptr<microsoft::graph::chatMessageInfo> lastMessagePreview;
        QList<microsoft::graph::conversationMember> members;
        QList<microsoft::graph::chatMessage> messages;
        QList<microsoft::graph::teamsAsyncOperation> operations;
        QList<microsoft::graph::resourceSpecificPermissionGrant> permissionGrants;
        QList<microsoft::graph::teamsTab> tabs;
    };

    struct identityContainer {
        std::unique_ptr<microsoft::graph::conditionalAccessRoot> conditionalAccess;
        QList<microsoft::graph::identityApiConnector> apiConnectors;
        QList<microsoft::graph::b2cIdentityUserFlow> b2cUserFlows;
        QList<microsoft::graph::b2xIdentityUserFlow> b2xUserFlows;
        QList<microsoft::graph::identityProviderBase> identityProviders;
        QList<microsoft::graph::identityUserFlowAttribute> userFlowAttributes;
        QList<microsoft::graph::identityUserFlow> userFlows;
        std::unique_ptr<microsoft::graph::continuousAccessEvaluationPolicy> continuousAccessEvaluationPolicy;
    };

    struct unifiedRoleAssignmentScheduleRequest : graph::request {
        QString action;
        QString appScopeId;
        QString directoryScopeId;
        bool isValidationOnly;
        QString justification;
        QString principalId;
        QString roleDefinitionId;
        microsoft::graph::requestSchedule scheduleInfo;
        QString targetScheduleId;
        microsoft::graph::ticketInfo ticketInfo;
        std::unique_ptr<microsoft::graph::unifiedRoleEligibilitySchedule> activatedUsing;
        std::unique_ptr<microsoft::graph::appScope> appScope;
        std::unique_ptr<microsoft::graph::directoryObject> directoryScope;
        std::unique_ptr<microsoft::graph::directoryObject> principal;
        std::unique_ptr<microsoft::graph::unifiedRoleDefinition> roleDefinition;
        std::unique_ptr<microsoft::graph::unifiedRoleAssignmentSchedule> targetSchedule;
    };

    struct cloudCommunications : graph::entity {
        QList<microsoft::graph::call> calls;
        QList<microsoft::graph::callRecords::callRecord> callRecords;
        QList<microsoft::graph::onlineMeeting> onlineMeetings;
        QList<microsoft::graph::presence> presences;
    };

    struct termsOfUseContainer : graph::entity {
        QList<microsoft::graph::agreementAcceptance> agreementAcceptances;
        QList<microsoft::graph::agreement> agreements;
    };

    struct admin {
        std::unique_ptr<microsoft::graph::serviceAnnouncement> serviceAnnouncement;
        std::unique_ptr<microsoft::graph::windowsUpdates::windows> windows;
    };

    struct tenantRelationship {
        std::unique_ptr<microsoft::graph::managedTenants::managedTenant> managedTenants;
    };

    struct company : graph::entity {
        QString businessProfileId;
        QString displayName;
        QString name;
        QString systemVersion;
        QList<microsoft::graph::account> accounts;
        QList<microsoft::graph::agedAccountsPayable> agedAccountsPayable;
        QList<microsoft::graph::agedAccountsReceivable> agedAccountsReceivable;
        QList<microsoft::graph::companyInformation> companyInformation;
        QList<microsoft::graph::countryRegion> countriesRegions;
        QList<microsoft::graph::currency> currencies;
        QList<microsoft::graph::customerPaymentJournal> customerPaymentJournals;
        QList<microsoft::graph::customerPayment> customerPayments;
        QList<microsoft::graph::customer> customers;
        QList<microsoft::graph::dimension> dimensions;
        QList<microsoft::graph::dimensionValue> dimensionValues;
        QList<microsoft::graph::employee> employees;
        QList<microsoft::graph::generalLedgerEntry> generalLedgerEntries;
        QList<microsoft::graph::itemCategory> itemCategories;
        QList<microsoft::graph::item> items;
        QList<microsoft::graph::journalLine> journalLines;
        QList<microsoft::graph::journal> journals;
        QList<microsoft::graph::paymentMethod> paymentMethods;
        QList<microsoft::graph::paymentTerm> paymentTerms;
        QList<microsoft::graph::picture> picture;
        QList<microsoft::graph::purchaseInvoiceLine> purchaseInvoiceLines;
        QList<microsoft::graph::purchaseInvoice> purchaseInvoices;
        QList<microsoft::graph::salesCreditMemoLine> salesCreditMemoLines;
        QList<microsoft::graph::salesCreditMemo> salesCreditMemos;
        QList<microsoft::graph::salesInvoiceLine> salesInvoiceLines;
        QList<microsoft::graph::salesInvoice> salesInvoices;
        QList<microsoft::graph::salesOrderLine> salesOrderLines;
        QList<microsoft::graph::salesOrder> salesOrders;
        QList<microsoft::graph::salesQuoteLine> salesQuoteLines;
        QList<microsoft::graph::salesQuote> salesQuotes;
        QList<microsoft::graph::shipmentMethod> shipmentMethods;
        QList<microsoft::graph::taxArea> taxAreas;
        QList<microsoft::graph::taxGroup> taxGroups;
        QList<microsoft::graph::unitOfMeasure> unitsOfMeasure;
        QList<microsoft::graph::vendor> vendors;
    };

    struct financials {
        QList<microsoft::graph::company> companies;
    };

    struct attackSimulationRoot : graph::entity {
        QList<microsoft::graph::simulation> simulations;
    };

    struct security {
        QList<microsoft::graph::securityProviderStatus> providerStatus;
        std::unique_ptr<microsoft::graph::attackSimulationRoot> attackSimulation;
        QList<microsoft::graph::alert> alerts;
        QList<microsoft::graph::cloudAppSecurityProfile> cloudAppSecurityProfiles;
        QList<microsoft::graph::domainSecurityProfile> domainSecurityProfiles;
        QList<microsoft::graph::fileSecurityProfile> fileSecurityProfiles;
        QList<microsoft::graph::hostSecurityProfile> hostSecurityProfiles;
        QList<microsoft::graph::ipSecurityProfile> ipSecurityProfiles;
        QList<microsoft::graph::providerTenantSetting> providerTenantSettings;
        QList<microsoft::graph::secureScoreControlProfile> secureScoreControlProfiles;
        QList<microsoft::graph::secureScore> secureScores;
        QList<microsoft::graph::securityAction> securityActions;
        QList<microsoft::graph::tiIndicator> tiIndicators;
        QList<microsoft::graph::userSecurityProfile> userSecurityProfiles;
    };

    struct userScopeTeamsAppInstallation : graph::teamsAppInstallation {
        std::unique_ptr<microsoft::graph::chat> chat;
    };

    struct userTeamwork : graph::entity {
        QList<microsoft::graph::userScopeTeamsAppInstallation> installedApps;
    };

    struct rbacApplication : graph::entity {
        QList<microsoft::graph::unifiedRbacResourceNamespace> resourceNamespaces;
        QList<microsoft::graph::unifiedRoleAssignment> roleAssignments;
        QList<microsoft::graph::unifiedRoleDefinition> roleDefinitions;
        QList<microsoft::graph::approval> roleAssignmentApprovals;
        QList<microsoft::graph::unifiedRoleAssignmentScheduleInstance> roleAssignmentScheduleInstances;
        QList<microsoft::graph::unifiedRoleAssignmentScheduleRequest> roleAssignmentScheduleRequests;
        QList<microsoft::graph::unifiedRoleAssignmentSchedule> roleAssignmentSchedules;
        QList<microsoft::graph::unifiedRoleEligibilityScheduleInstance> roleEligibilityScheduleInstances;
        QList<microsoft::graph::unifiedRoleEligibilityScheduleRequest> roleEligibilityScheduleRequests;
        QList<microsoft::graph::unifiedRoleEligibilitySchedule> roleEligibilitySchedules;
    };

    struct roleManagement {
        std::unique_ptr<microsoft::graph::rbacApplication> directory;
        std::unique_ptr<microsoft::graph::rbacApplicationMultiple> cloudPC;
        std::unique_ptr<microsoft::graph::rbacApplication> entitlementManagement;
        std::unique_ptr<microsoft::graph::rbacApplicationMultiple> deviceManagement;
    };

} // namespace microsoft::graph

namespace microsoft::graph {
    struct user : graph::directoryObject {
        microsoft::graph::signInActivity signInActivity;
        bool accountEnabled;
        QString ageGroup;
        QList<microsoft::graph::assignedLicense> assignedLicenses;
        QList<microsoft::graph::assignedPlan> assignedPlans;
        QList<QString> businessPhones;
        QString city;
        QString companyName;
        QString consentProvidedForMinor;
        QString country;
        QDateTime createdDateTime;
        QString creationType;
        QString department;
        QList<microsoft::graph::deviceKey> deviceKeys;
        QString displayName;
        QDateTime employeeHireDate;
        QString employeeId;
        microsoft::graph::employeeOrgData employeeOrgData;
        QString employeeType;
        QString externalUserState;
        QString externalUserStateChangeDateTime;
        QString faxNumber;
        QString givenName;
        QList<microsoft::graph::objectIdentity> identities;
        QList<QString> imAddresses;
        QList<QString> infoCatalogs;
        bool isResourceAccount;
        QString jobTitle;
        QDateTime lastPasswordChangeDateTime;
        QString legalAgeGroupClassification;
        QList<microsoft::graph::licenseAssignmentState> licenseAssignmentStates;
        QString mail;
        QString mailNickname;
        QString mobilePhone;
        QString officeLocation;
        QString onPremisesDistinguishedName;
        QString onPremisesDomainName;
        microsoft::graph::onPremisesExtensionAttributes onPremisesExtensionAttributes;
        QString onPremisesImmutableId;
        QDateTime onPremisesLastSyncDateTime;
        QList<microsoft::graph::onPremisesProvisioningError> onPremisesProvisioningErrors;
        QString onPremisesSamAccountName;
        QString onPremisesSecurityIdentifier;
        bool onPremisesSyncEnabled;
        QString onPremisesUserPrincipalName;
        QList<QString> otherMails;
        QString passwordPolicies;
        microsoft::graph::passwordProfile passwordProfile;
        QString postalCode;
        QString preferredDataLocation;
        QString preferredLanguage;
        QList<microsoft::graph::provisionedPlan> provisionedPlans;
        QList<QString> proxyAddresses;
        QDateTime refreshTokensValidFromDateTime;
        bool showInAddressList;
        QDateTime signInSessionsValidFromDateTime;
        QString state;
        QString streetAddress;
        QString surname;
        QString usageLocation;
        QString userPrincipalName;
        QString userType;
        microsoft::graph::mailboxSettings mailboxSettings;
        int deviceEnrollmentLimit;
        QString aboutMe;
        QDateTime birthday;
        QDateTime hireDate;
        QList<QString> interests;
        QString mySite;
        QList<QString> pastProjects;
        QString preferredName;
        QList<QString> responsibilities;
        QList<QString> schools;
        QList<QString> skills;
        std::unique_ptr<microsoft::graph::userAnalytics> analytics;
        QList<microsoft::graph::usageRight> usageRights;
        std::unique_ptr<microsoft::graph::informationProtection> informationProtection;
        QList<microsoft::graph::appRoleAssignment> appRoleAssignments;
        QList<microsoft::graph::directoryObject> createdObjects;
        QList<microsoft::graph::directoryObject> directReports;
        QList<microsoft::graph::licenseDetails> licenseDetails;
        std::unique_ptr<microsoft::graph::directoryObject> manager;
        QList<microsoft::graph::directoryObject> memberOf;
        QList<microsoft::graph::oAuth2PermissionGrant> oauth2PermissionGrants;
        QList<microsoft::graph::directoryObject> ownedDevices;
        QList<microsoft::graph::directoryObject> ownedObjects;
        QList<microsoft::graph::directoryObject> registeredDevices;
        QList<microsoft::graph::scopedRoleMembership> scopedRoleMemberOf;
        QList<microsoft::graph::directoryObject> transitiveMemberOf;
        QList<microsoft::graph::directoryObject> transitiveReports;
        std::unique_ptr<microsoft::graph::calendar> calendar;
        QList<microsoft::graph::calendarGroup> calendarGroups;
        QList<microsoft::graph::calendar> calendars;
        QList<microsoft::graph::event> calendarView;
        QList<microsoft::graph::contactFolder> contactFolders;
        QList<microsoft::graph::contact> contacts;
        QList<microsoft::graph::event> events;
        std::unique_ptr<microsoft::graph::inferenceClassification> inferenceClassification;
        QList<microsoft::graph::group> joinedGroups;
        QList<microsoft::graph::mailFolder> mailFolders;
        QList<microsoft::graph::message> messages;
        std::unique_ptr<microsoft::graph::outlookUser> outlook;
        QList<microsoft::graph::person> people;
        std::unique_ptr<microsoft::graph::drive> drive;
        QList<microsoft::graph::drive> drives;
        QList<microsoft::graph::site> followedSites;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::appConsentRequest> appConsentRequestsForApproval;
        QList<microsoft::graph::approval> approvals;
        QList<microsoft::graph::accessReviewInstance> pendingAccessReviewInstances;
        QList<microsoft::graph::agreementAcceptance> agreementAcceptances;
        QList<microsoft::graph::deviceEnrollmentConfiguration> deviceEnrollmentConfigurations;
        QList<microsoft::graph::managedDevice> managedDevices;
        QList<microsoft::graph::managedAppRegistration> managedAppRegistrations;
        QList<microsoft::graph::windowsInformationProtectionDeviceRegistration> windowsInformationProtectionDeviceRegistrations;
        QList<microsoft::graph::deviceManagementTroubleshootingEvent> deviceManagementTroubleshootingEvents;
        QList<microsoft::graph::mobileAppIntentAndState> mobileAppIntentAndStates;
        QList<microsoft::graph::mobileAppTroubleshootingEvent> mobileAppTroubleshootingEvents;
        QList<microsoft::graph::notification> notifications;
        std::unique_ptr<microsoft::graph::plannerUser> planner;
        std::unique_ptr<microsoft::graph::itemInsights> insights;
        std::unique_ptr<microsoft::graph::userSettings> settings;
        std::unique_ptr<microsoft::graph::onenote> onenote;
        std::unique_ptr<microsoft::graph::profilePhoto> photo;
        QList<microsoft::graph::profilePhoto> photos;
        std::unique_ptr<microsoft::graph::profile> profile;
        QList<microsoft::graph::userActivity> activities;
        QList<microsoft::graph::device> devices;
        QList<microsoft::graph::onlineMeeting> onlineMeetings;
        std::unique_ptr<microsoft::graph::presence> presence;
        std::unique_ptr<microsoft::graph::authentication> authentication;
        QList<microsoft::graph::chat> chats;
        QList<microsoft::graph::team> joinedTeams;
        std::unique_ptr<microsoft::graph::userTeamwork> teamwork;
        std::unique_ptr<microsoft::graph::todo> todo;
    };

    struct calendar : graph::entity {
        QList<microsoft::graph::onlineMeetingProviderType> allowedOnlineMeetingProviders;
        QString calendarGroupId;
        bool canEdit;
        bool canShare;
        bool canViewPrivateItems;
        QString changeKey;
        microsoft::graph::calendarColor color;
        microsoft::graph::onlineMeetingProviderType defaultOnlineMeetingProvider;
        QString hexColor;
        bool isDefaultCalendar;
        bool isRemovable;
        bool isShared;
        bool isSharedWithMe;
        bool isTallyingResponses;
        QString name;
        microsoft::graph::emailAddress owner;
        QList<microsoft::graph::calendarPermission> calendarPermissions;
        QList<microsoft::graph::event> calendarView;
        QList<microsoft::graph::event> events;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct calendarGroup : graph::entity {
        QString changeKey;
        QUuid classId;
        QString name;
        QList<microsoft::graph::calendar> calendars;
    };

    struct event : graph::outlookItem {
        bool allowNewTimeProposals;
        QList<microsoft::graph::attendee> attendees;
        microsoft::graph::itemBody body;
        QString bodyPreview;
        QList<QString> cancelledOccurrences;
        microsoft::graph::dateTimeTimeZone end;
        bool hasAttachments;
        bool hideAttendees;
        microsoft::graph::importance importance;
        bool isAllDay;
        bool isCancelled;
        bool isDraft;
        bool isOnlineMeeting;
        bool isOrganizer;
        bool isReminderOn;
        microsoft::graph::location location;
        QList<microsoft::graph::location> locations;
        QString occurrenceId;
        microsoft::graph::onlineMeetingInfo onlineMeeting;
        microsoft::graph::onlineMeetingProviderType onlineMeetingProvider;
        QString onlineMeetingUrl;
        microsoft::graph::recipient organizer;
        QString originalEndTimeZone;
        QDateTime originalStart;
        QString originalStartTimeZone;
        microsoft::graph::patternedRecurrence recurrence;
        int reminderMinutesBeforeStart;
        bool responseRequested;
        microsoft::graph::responseStatus responseStatus;
        microsoft::graph::sensitivity sensitivity;
        QString seriesMasterId;
        microsoft::graph::freeBusyStatus showAs;
        microsoft::graph::dateTimeTimeZone start;
        QString subject;
        QString transactionId;
        microsoft::graph::eventType type;
        QString uid;
        QString webLink;
        QList<microsoft::graph::attachment> attachments;
        std::unique_ptr<microsoft::graph::calendar> calendar;
        QList<microsoft::graph::event> exceptionOccurrences;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::event> instances;
        QList<microsoft::graph::multiValueLegacyExtendedProperty> multiValueExtendedProperties;
        QList<microsoft::graph::singleValueLegacyExtendedProperty> singleValueExtendedProperties;
    };

    struct group : graph::directoryObject {
        QList<microsoft::graph::assignedLabel> assignedLabels;
        QList<microsoft::graph::assignedLicense> assignedLicenses;
        QString classification;
        QString createdByAppId;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime expirationDateTime;
        QList<QString> groupTypes;
        bool hasMembersWithLicenseErrors;
        QList<QString> infoCatalogs;
        bool isAssignableToRole;
        microsoft::graph::licenseProcessingState licenseProcessingState;
        QString mail;
        bool mailEnabled;
        QString mailNickname;
        QString mdmAppId;
        QString membershipRule;
        QString membershipRuleProcessingState;
        QString onPremisesDomainName;
        QDateTime onPremisesLastSyncDateTime;
        QString onPremisesNetBiosName;
        QList<microsoft::graph::onPremisesProvisioningError> onPremisesProvisioningErrors;
        QString onPremisesSamAccountName;
        QString onPremisesSecurityIdentifier;
        bool onPremisesSyncEnabled;
        QString organizationId;
        QString preferredDataLocation;
        QString preferredLanguage;
        QList<QString> proxyAddresses;
        QDateTime renewedDateTime;
        QList<QString> resourceBehaviorOptions;
        QList<QString> resourceProvisioningOptions;
        bool securityEnabled;
        QString securityIdentifier;
        QString theme;
        QString visibility;
        microsoft::graph::groupAccessType accessType;
        bool allowExternalSenders;
        bool autoSubscribeNewMembers;
        bool hideFromAddressLists;
        bool hideFromOutlookClients;
        bool isFavorite;
        bool isSubscribedByMail;
        int unseenConversationsCount;
        int unseenCount;
        int unseenMessagesCount;
        microsoft::graph::membershipRuleProcessingStatus membershipRuleProcessingStatus;
        bool isArchived;
        QList<microsoft::graph::appRoleAssignment> appRoleAssignments;
        std::unique_ptr<microsoft::graph::directoryObject> createdOnBehalfOf;
        QList<microsoft::graph::endpoint> endpoints;
        QList<microsoft::graph::directoryObject> memberOf;
        QList<microsoft::graph::directoryObject> members;
        QList<microsoft::graph::directoryObject> membersWithLicenseErrors;
        QList<microsoft::graph::directoryObject> owners;
        QList<microsoft::graph::resourceSpecificPermissionGrant> permissionGrants;
        QList<microsoft::graph::directorySetting> settings;
        QList<microsoft::graph::directoryObject> transitiveMemberOf;
        QList<microsoft::graph::directoryObject> transitiveMembers;
        QList<microsoft::graph::directoryObject> acceptedSenders;
        std::unique_ptr<microsoft::graph::calendar> calendar;
        QList<microsoft::graph::event> calendarView;
        QList<microsoft::graph::conversation> conversations;
        QList<microsoft::graph::event> events;
        QList<microsoft::graph::directoryObject> rejectedSenders;
        QList<microsoft::graph::conversationThread> threads;
        std::unique_ptr<microsoft::graph::drive> drive;
        QList<microsoft::graph::drive> drives;
        QList<microsoft::graph::site> sites;
        QList<microsoft::graph::extension> extensions;
        QList<microsoft::graph::groupLifecyclePolicy> groupLifecyclePolicies;
        std::unique_ptr<microsoft::graph::plannerGroup> planner;
        std::unique_ptr<microsoft::graph::onenote> onenote;
        std::unique_ptr<microsoft::graph::profilePhoto> photo;
        QList<microsoft::graph::profilePhoto> photos;
        std::unique_ptr<microsoft::graph::team> team;
    };

    struct baseItem : graph::entity {
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString description;
        QString eTag;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QString name;
        microsoft::graph::itemReference parentReference;
        QString webUrl;
        std::unique_ptr<microsoft::graph::user> createdByUser;
        std::unique_ptr<microsoft::graph::user> lastModifiedByUser;
    };

    struct drive : graph::baseItem {
        QString driveType;
        microsoft::graph::identitySet owner;
        microsoft::graph::quota quota;
        microsoft::graph::sharepointIds sharePointIds;
        microsoft::graph::systemFacet system;
        QList<microsoft::graph::itemActivityOLD> activities;
        QList<microsoft::graph::driveItem> bundles;
        QList<microsoft::graph::driveItem> following;
        QList<microsoft::graph::driveItem> items;
        std::unique_ptr<microsoft::graph::list> list;
        std::unique_ptr<microsoft::graph::driveItem> root;
        QList<microsoft::graph::driveItem> special;
    };

    struct site : graph::baseItem {
        microsoft::graph::deleted deleted;
        QString displayName;
        microsoft::graph::root root;
        microsoft::graph::sharepointIds sharepointIds;
        microsoft::graph::siteCollection siteCollection;
        std::unique_ptr<microsoft::graph::itemAnalytics> analytics;
        QList<microsoft::graph::columnDefinition> columns;
        QList<microsoft::graph::contentType> contentTypes;
        std::unique_ptr<microsoft::graph::drive> drive;
        QList<microsoft::graph::drive> drives;
        QList<microsoft::graph::columnDefinition> externalColumns;
        QList<microsoft::graph::baseItem> items;
        QList<microsoft::graph::list> lists;
        QList<microsoft::graph::sitePage> pages;
        QList<microsoft::graph::permission> permissions;
        QList<microsoft::graph::site> sites;
        std::unique_ptr<microsoft::graph::termStore::store> termStore;
        std::unique_ptr<microsoft::graph::onenote> onenote;
    };

    struct accessReviewInstance : graph::entity {
        QDateTime endDateTime;
        QList<microsoft::graph::accessReviewError> errors;
        QList<microsoft::graph::accessReviewReviewerScope> fallbackReviewers;
        QList<microsoft::graph::accessReviewReviewerScope> reviewers;
        microsoft::graph::accessReviewScope scope;
        QDateTime startDateTime;
        QString status;
        QList<microsoft::graph::accessReviewReviewer> contactedReviewers;
        QList<microsoft::graph::accessReviewInstanceDecisionItem> decisions;
        std::unique_ptr<microsoft::graph::accessReviewScheduleDefinition> definition;
    };

    struct managedDevice : graph::entity {
        QList<microsoft::graph::cloudPcRemoteActionResult> cloudPcRemoteActionResults;
        bool aadRegistered;
        QString activationLockBypassCode;
        QString androidSecurityPatchLevel;
        bool autopilotEnrolled;
        QString azureActiveDirectoryDeviceId;
        QString azureADDeviceId;
        bool azureADRegistered;
        microsoft::graph::chassisType chassisType;
        QList<microsoft::graph::chromeOSDeviceProperty> chromeOSDeviceInfo;
        QDateTime complianceGracePeriodExpirationDateTime;
        microsoft::graph::complianceState complianceState;
        microsoft::graph::configurationManagerClientEnabledFeatures configurationManagerClientEnabledFeatures;
        microsoft::graph::configurationManagerClientHealthState configurationManagerClientHealthState;
        microsoft::graph::configurationManagerClientInformation configurationManagerClientInformation;
        QList<microsoft::graph::deviceActionResult> deviceActionResults;
        QString deviceCategoryDisplayName;
        microsoft::graph::deviceEnrollmentType deviceEnrollmentType;
        microsoft::graph::deviceHealthAttestationState deviceHealthAttestationState;
        QString deviceName;
        microsoft::graph::deviceRegistrationState deviceRegistrationState;
        microsoft::graph::deviceType deviceType;
        bool easActivated;
        QDateTime easActivationDateTime;
        QString easDeviceId;
        QString emailAddress;
        QDateTime enrolledDateTime;
        QString enrollmentProfileName;
        QString ethernetMacAddress;
        microsoft::graph::deviceManagementExchangeAccessState exchangeAccessState;
        microsoft::graph::deviceManagementExchangeAccessStateReason exchangeAccessStateReason;
        QDateTime exchangeLastSuccessfulSyncDateTime;
        long long freeStorageSpaceInBytes;
        microsoft::graph::hardwareInformation hardwareInformation;
        QString iccid;
        QString imei;
        bool isEncrypted;
        bool isSupervised;
        QString jailBroken;
        microsoft::graph::joinType joinType;
        QDateTime lastSyncDateTime;
        microsoft::graph::lostModeState lostModeState;
        QString managedDeviceName;
        microsoft::graph::managedDeviceOwnerType managedDeviceOwnerType;
        microsoft::graph::managementAgentType managementAgent;
        QDateTime managementCertificateExpirationDate;
        microsoft::graph::managedDeviceManagementFeatures managementFeatures;
        microsoft::graph::managementState managementState;
        QString manufacturer;
        QString meid;
        QString model;
        QString notes;
        QString operatingSystem;
        QString osVersion;
        microsoft::graph::ownerType ownerType;
        microsoft::graph::managedDevicePartnerReportedHealthState partnerReportedThreatState;
        QString phoneNumber;
        long long physicalMemoryInBytes;
        QDateTime preferMdmOverGroupPolicyAppliedDateTime;
        microsoft::graph::managedDeviceArchitecture processorArchitecture;
        QString remoteAssistanceSessionErrorDetails;
        QString remoteAssistanceSessionUrl;
        bool requireUserEnrollmentApproval;
        QDateTime retireAfterDateTime;
        QList<QString> roleScopeTagIds;
        QString serialNumber;
        QString skuFamily;
        int skuNumber;
        QString specificationVersion;
        QString subscriberCarrier;
        long long totalStorageSpaceInBytes;
        QString udid;
        QString userDisplayName;
        QString userId;
        QString userPrincipalName;
        QList<microsoft::graph::loggedOnUser> usersLoggedOn;
        QString wiFiMacAddress;
        int windowsActiveMalwareCount;
        int windowsRemediatedMalwareCount;
        QList<microsoft::graph::assignmentFilterEvaluationStatusDetails> assignmentFilterEvaluationStatusDetails;
        QList<microsoft::graph::deviceCompliancePolicyState> deviceCompliancePolicyStates;
        QList<microsoft::graph::deviceConfigurationState> deviceConfigurationStates;
        QList<microsoft::graph::managedDeviceMobileAppConfigurationState> managedDeviceMobileAppConfigurationStates;
        QList<microsoft::graph::securityBaselineState> securityBaselineStates;
        QList<microsoft::graph::detectedApp> detectedApps;
        std::unique_ptr<microsoft::graph::deviceCategory> deviceCategory;
        QList<microsoft::graph::deviceLogCollectionResponse> logCollectionRequests;
        QList<microsoft::graph::user> users;
        std::unique_ptr<microsoft::graph::windowsProtectionState> windowsProtectionState;
    };

    struct onenote : graph::entity {
        QList<microsoft::graph::notebook> notebooks;
        QList<microsoft::graph::onenoteOperation> operations;
        QList<microsoft::graph::onenotePage> pages;
        QList<microsoft::graph::onenoteResource> resources;
        QList<microsoft::graph::sectionGroup> sectionGroups;
        QList<microsoft::graph::onenoteSection> sections;
    };

    struct userActivity : graph::entity {
        QString activationUrl;
        QString activitySourceHost;
        QString appActivityId;
        QString appDisplayName;
        microsoft::graph::Json contentInfo;
        QString contentUrl;
        QDateTime createdDateTime;
        QDateTime expirationDateTime;
        QString fallbackUrl;
        QDateTime lastModifiedDateTime;
        microsoft::graph::status status;
        QString userTimezone;
        microsoft::graph::visualInfo visualElements;
        QList<microsoft::graph::activityHistoryItem> historyItems;
    };

    struct team : graph::entity {
        QString classification;
        QDateTime createdDateTime;
        QString description;
        microsoft::graph::teamDiscoverySettings discoverySettings;
        QString displayName;
        microsoft::graph::teamFunSettings funSettings;
        microsoft::graph::teamGuestSettings guestSettings;
        QString internalId;
        bool isArchived;
        bool isMembershipLimitedToOwners;
        microsoft::graph::teamMemberSettings memberSettings;
        microsoft::graph::teamMessagingSettings messagingSettings;
        microsoft::graph::teamSpecialization specialization;
        microsoft::graph::teamVisibilityType visibility;
        QString webUrl;
        QList<microsoft::graph::channel> channels;
        std::unique_ptr<microsoft::graph::group> group;
        QList<microsoft::graph::teamsAppInstallation> installedApps;
        QList<microsoft::graph::conversationMember> members;
        QList<microsoft::graph::teamsAsyncOperation> operations;
        QList<microsoft::graph::user> owners;
        QList<microsoft::graph::resourceSpecificPermissionGrant> permissionGrants;
        std::unique_ptr<microsoft::graph::profilePhoto> photo;
        std::unique_ptr<microsoft::graph::channel> primaryChannel;
        QList<microsoft::graph::teamworkTag> tags;
        std::unique_ptr<microsoft::graph::teamsTemplate> _template;
        std::unique_ptr<microsoft::graph::schedule> schedule;
    };

    struct invitation : graph::entity {
        QString invitedUserDisplayName;
        QString invitedUserEmailAddress;
        microsoft::graph::invitedUserMessageInfo invitedUserMessageInfo;
        QString invitedUserType;
        QString inviteRedeemUrl;
        QString inviteRedirectUrl;
        bool resetRedemption;
        bool sendInvitationMessage;
        QString status;
        std::unique_ptr<microsoft::graph::user> invitedUser;
    };

    struct applicationServicePrincipal {
        std::unique_ptr<microsoft::graph::application> application;
        std::unique_ptr<microsoft::graph::servicePrincipal> servicePrincipal;
    };

    struct application : graph::directoryObject {
        microsoft::graph::apiApplication api;
        QString appId;
        QList<microsoft::graph::appRole> appRoles;
        QDateTime createdDateTime;
        QString defaultRedirectUri;
        QString description;
        QString disabledByMicrosoftStatus;
        QString displayName;
        QString groupMembershipClaims;
        QList<QString> identifierUris;
        microsoft::graph::informationalUrl info;
        bool isDeviceOnlyAuthSupported;
        bool isFallbackPublicClient;
        QList<microsoft::graph::keyCredential> keyCredentials;
        QByteArray logo;
        QString notes;
        microsoft::graph::optionalClaims optionalClaims;
        microsoft::graph::parentalControlSettings parentalControlSettings;
        QList<microsoft::graph::passwordCredential> passwordCredentials;
        microsoft::graph::publicClientApplication publicClient;
        QString publisherDomain;
        QList<microsoft::graph::requiredResourceAccess> requiredResourceAccess;
        QString signInAudience;
        microsoft::graph::spaApplication spa;
        QList<QString> tags;
        QUuid tokenEncryptionKeyId;
        QString uniqueName;
        microsoft::graph::verifiedPublisher verifiedPublisher;
        microsoft::graph::webApplication web;
        microsoft::graph::onPremisesPublishing onPremisesPublishing;
        QList<microsoft::graph::appManagementPolicy> appManagementPolicies;
        std::unique_ptr<microsoft::graph::directoryObject> createdOnBehalfOf;
        QList<microsoft::graph::extensionProperty> extensionProperties;
        QList<microsoft::graph::homeRealmDiscoveryPolicy> homeRealmDiscoveryPolicies;
        QList<microsoft::graph::directoryObject> owners;
        QList<microsoft::graph::tokenIssuancePolicy> tokenIssuancePolicies;
        QList<microsoft::graph::tokenLifetimePolicy> tokenLifetimePolicies;
        std::unique_ptr<microsoft::graph::connectorGroup> connectorGroup;
        std::unique_ptr<microsoft::graph::synchronization> synchronization;
    };

    struct servicePrincipal : graph::directoryObject {
        microsoft::graph::passwordSingleSignOnSettings passwordSingleSignOnSettings;
        bool accountEnabled;
        QList<microsoft::graph::addIn> addIns;
        QList<QString> alternativeNames;
        QString appDescription;
        QString appDisplayName;
        QString appId;
        QString applicationTemplateId;
        QUuid appOwnerOrganizationId;
        bool appRoleAssignmentRequired;
        QList<microsoft::graph::appRole> appRoles;
        QString description;
        QString disabledByMicrosoftStatus;
        QString displayName;
        QString errorUrl;
        QString homepage;
        microsoft::graph::informationalUrl info;
        QList<microsoft::graph::keyCredential> keyCredentials;
        QString loginUrl;
        QString logoutUrl;
        QString notes;
        QList<QString> notificationEmailAddresses;
        QList<microsoft::graph::passwordCredential> passwordCredentials;
        QString preferredSingleSignOnMode;
        QDateTime preferredTokenSigningKeyEndDateTime;
        QString preferredTokenSigningKeyThumbprint;
        QList<microsoft::graph::permissionScope> publishedPermissionScopes;
        QString publisherName;
        QList<QString> replyUrls;
        QString samlMetadataUrl;
        microsoft::graph::samlSingleSignOnSettings samlSingleSignOnSettings;
        QList<QString> servicePrincipalNames;
        QString servicePrincipalType;
        QString signInAudience;
        QList<QString> tags;
        QUuid tokenEncryptionKeyId;
        QList<microsoft::graph::appManagementPolicy> appManagementPolicies;
        QList<microsoft::graph::appRoleAssignment> appRoleAssignedTo;
        QList<microsoft::graph::appRoleAssignment> appRoleAssignments;
        QList<microsoft::graph::claimsMappingPolicy> claimsMappingPolicies;
        QList<microsoft::graph::directoryObject> createdObjects;
        QList<microsoft::graph::delegatedPermissionClassification> delegatedPermissionClassifications;
        QList<microsoft::graph::endpoint> endpoints;
        QList<microsoft::graph::homeRealmDiscoveryPolicy> homeRealmDiscoveryPolicies;
        QList<microsoft::graph::licenseDetails> licenseDetails;
        QList<microsoft::graph::directoryObject> memberOf;
        QList<microsoft::graph::oAuth2PermissionGrant> oauth2PermissionGrants;
        QList<microsoft::graph::directoryObject> ownedObjects;
        QList<microsoft::graph::directoryObject> owners;
        QList<microsoft::graph::tokenIssuancePolicy> tokenIssuancePolicies;
        QList<microsoft::graph::tokenLifetimePolicy> tokenLifetimePolicies;
        QList<microsoft::graph::directoryObject> transitiveMemberOf;
        std::unique_ptr<microsoft::graph::synchronization> synchronization;
    };

    struct connectorGroup : graph::entity {
        microsoft::graph::connectorGroupType connectorGroupType;
        bool isDefault;
        QString name;
        microsoft::graph::connectorGroupRegion region;
        QList<microsoft::graph::application> applications;
        QList<microsoft::graph::connector> members;
    };

    struct synchronization : graph::entity {
        QList<microsoft::graph::synchronizationSecretKeyStringValuePair> secrets;
        QList<microsoft::graph::synchronizationJob> jobs;
        QList<microsoft::graph::synchronizationTemplate> templates;
    };

    struct policyRoot {
        std::unique_ptr<microsoft::graph::authenticationMethodsPolicy> authenticationMethodsPolicy;
        std::unique_ptr<microsoft::graph::authenticationFlowsPolicy> authenticationFlowsPolicy;
        std::unique_ptr<microsoft::graph::b2cAuthenticationMethodsPolicy> b2cAuthenticationMethodsPolicy;
        QList<microsoft::graph::activityBasedTimeoutPolicy> activityBasedTimeoutPolicies;
        QList<microsoft::graph::appManagementPolicy> appManagementPolicies;
        QList<microsoft::graph::authorizationPolicy> authorizationPolicy;
        QList<microsoft::graph::claimsMappingPolicy> claimsMappingPolicies;
        std::unique_ptr<microsoft::graph::tenantAppManagementPolicy> defaultAppManagementPolicy;
        QList<microsoft::graph::homeRealmDiscoveryPolicy> homeRealmDiscoveryPolicies;
        QList<microsoft::graph::permissionGrantPolicy> permissionGrantPolicies;
        QList<microsoft::graph::tokenIssuancePolicy> tokenIssuancePolicies;
        QList<microsoft::graph::tokenLifetimePolicy> tokenLifetimePolicies;
        QList<microsoft::graph::featureRolloutPolicy> featureRolloutPolicies;
        std::unique_ptr<microsoft::graph::accessReviewPolicy> accessReviewPolicy;
        std::unique_ptr<microsoft::graph::adminConsentRequestPolicy> adminConsentRequestPolicy;
        std::unique_ptr<microsoft::graph::directoryRoleAccessReviewPolicy> directoryRoleAccessReviewPolicy;
        QList<microsoft::graph::conditionalAccessPolicy> conditionalAccessPolicies;
        std::unique_ptr<microsoft::graph::identitySecurityDefaultsEnforcementPolicy> identitySecurityDefaultsEnforcementPolicy;
        QList<microsoft::graph::mobilityManagementPolicy> mobileAppManagementPolicies;
        QList<microsoft::graph::mobilityManagementPolicy> mobileDeviceManagementPolicies;
        QList<microsoft::graph::unifiedRoleManagementPolicy> roleManagementPolicies;
        QList<microsoft::graph::unifiedRoleManagementPolicyAssignment> roleManagementPolicyAssignments;
    };

    struct mobilityManagementPolicy : graph::entity {
        microsoft::graph::policyScope appliesTo;
        QString complianceUrl;
        QString description;
        QString discoveryUrl;
        QString displayName;
        bool isValid;
        QString termsOfUseUrl;
        QList<microsoft::graph::group> includedGroups;
    };

    struct deviceManagement : graph::entity {
        QDateTime deviceComplianceReportSummarizationDateTime;
        QUuid intuneAccountId;
        QDateTime lastReportAggregationDateTime;
        bool legacyPcManangementEnabled;
        int maximumDepTokens;
        microsoft::graph::deviceManagementSettings settings;
        bool unlicensedAdminstratorsEnabled;
        microsoft::graph::intuneBrand intuneBrand;
        QDateTime accountMoveCompletionDateTime;
        microsoft::graph::adminConsent adminConsent;
        microsoft::graph::deviceProtectionOverview deviceProtectionOverview;
        microsoft::graph::managedDeviceCleanupSettings managedDeviceCleanupSettings;
        microsoft::graph::deviceManagementSubscriptions subscriptions;
        microsoft::graph::deviceManagementSubscriptionState subscriptionState;
        microsoft::graph::userExperienceAnalyticsSettings userExperienceAnalyticsSettings;
        microsoft::graph::windowsMalwareOverview windowsMalwareOverview;
        QList<microsoft::graph::androidDeviceOwnerEnrollmentProfile> androidDeviceOwnerEnrollmentProfiles;
        std::unique_ptr<microsoft::graph::virtualEndpoint> virtualEndpoint;
        QList<microsoft::graph::androidForWorkAppConfigurationSchema> androidForWorkAppConfigurationSchemas;
        QList<microsoft::graph::androidForWorkEnrollmentProfile> androidForWorkEnrollmentProfiles;
        std::unique_ptr<microsoft::graph::androidForWorkSettings> androidForWorkSettings;
        std::unique_ptr<microsoft::graph::androidManagedStoreAccountEnterpriseSettings> androidManagedStoreAccountEnterpriseSettings;
        QList<microsoft::graph::androidManagedStoreAppConfigurationSchema> androidManagedStoreAppConfigurationSchemas;
        QList<microsoft::graph::auditEvent> auditEvents;
        QList<microsoft::graph::deviceAndAppManagementAssignmentFilter> assignmentFilters;
        QList<microsoft::graph::chromeOSOnboardingSettings> chromeOSOnboardingSettings;
        QList<microsoft::graph::termsAndConditions> termsAndConditions;
        std::unique_ptr<microsoft::graph::advancedThreatProtectionOnboardingStateSummary> advancedThreatProtectionOnboardingStateSummary;
        QList<microsoft::graph::cartToClassAssociation> cartToClassAssociations;
        QList<microsoft::graph::deviceCompliancePolicy> deviceCompliancePolicies;
        std::unique_ptr<microsoft::graph::deviceCompliancePolicyDeviceStateSummary> deviceCompliancePolicyDeviceStateSummary;
        QList<microsoft::graph::deviceCompliancePolicySettingStateSummary> deviceCompliancePolicySettingStateSummaries;
        QList<microsoft::graph::deviceConfigurationConflictSummary> deviceConfigurationConflictSummary;
        std::unique_ptr<microsoft::graph::deviceConfigurationDeviceStateSummary> deviceConfigurationDeviceStateSummaries;
        QList<microsoft::graph::restrictedAppsViolation> deviceConfigurationRestrictedAppsViolations;
        QList<microsoft::graph::deviceConfiguration> deviceConfigurations;
        QList<microsoft::graph::managedAllDeviceCertificateState> deviceConfigurationsAllManagedDeviceCertificateStates;
        std::unique_ptr<microsoft::graph::deviceConfigurationUserStateSummary> deviceConfigurationUserStateSummaries;
        QList<microsoft::graph::iosUpdateDeviceStatus> iosUpdateStatuses;
        QList<microsoft::graph::macOSSoftwareUpdateAccountSummary> macOSSoftwareUpdateAccountSummaries;
        QList<microsoft::graph::managedDeviceEncryptionState> managedDeviceEncryptionStates;
        QList<microsoft::graph::ndesConnector> ndesConnectors;
        std::unique_ptr<microsoft::graph::softwareUpdateStatusSummary> softwareUpdateStatusSummary;
        QList<microsoft::graph::deviceManagementConfigurationCategory> configurationCategories;
        QList<microsoft::graph::deviceManagementConfigurationPolicy> configurationPolicies;
        QList<microsoft::graph::deviceManagementConfigurationPolicyTemplate> configurationPolicyTemplates;
        QList<microsoft::graph::deviceManagementConfigurationSettingDefinition> configurationSettings;
        QList<microsoft::graph::deviceManagementReusablePolicySetting> reusablePolicySettings;
        QList<microsoft::graph::deviceManagementConfigurationSettingDefinition> reusableSettings;
        QList<microsoft::graph::deviceManagementConfigurationSettingTemplate> templateSettings;
        QList<microsoft::graph::complianceManagementPartner> complianceManagementPartners;
        std::unique_ptr<microsoft::graph::onPremisesConditionalAccessSettings> conditionalAccessSettings;
        QList<microsoft::graph::deviceCategory> deviceCategories;
        QList<microsoft::graph::deviceEnrollmentConfiguration> deviceEnrollmentConfigurations;
        QList<microsoft::graph::deviceManagementPartner> deviceManagementPartners;
        QList<microsoft::graph::deviceManagementExchangeConnector> exchangeConnectors;
        QList<microsoft::graph::deviceManagementExchangeOnPremisesPolicy> exchangeOnPremisesPolicies;
        std::unique_ptr<microsoft::graph::deviceManagementExchangeOnPremisesPolicy> exchangeOnPremisesPolicy;
        QList<microsoft::graph::mobileThreatDefenseConnector> mobileThreatDefenseConnectors;
        QList<microsoft::graph::deviceManagementSettingCategory> categories;
        QList<microsoft::graph::deviceManagementIntent> intents;
        QList<microsoft::graph::deviceManagementSettingDefinition> settingDefinitions;
        QList<microsoft::graph::deviceManagementTemplate> templates;
        std::unique_ptr<microsoft::graph::applePushNotificationCertificate> applePushNotificationCertificate;
        QList<microsoft::graph::cloudPCConnectivityIssue> cloudPCConnectivityIssues;
        QList<microsoft::graph::managedDevice> comanagedDevices;
        QList<microsoft::graph::comanagementEligibleDevice> comanagementEligibleDevices;
        QList<microsoft::graph::dataSharingConsent> dataSharingConsents;
        QList<microsoft::graph::detectedApp> detectedApps;
        QList<microsoft::graph::deviceComplianceScript> deviceComplianceScripts;
        QList<microsoft::graph::deviceCustomAttributeShellScript> deviceCustomAttributeShellScripts;
        QList<microsoft::graph::deviceHealthScript> deviceHealthScripts;
        QList<microsoft::graph::deviceManagementScript> deviceManagementScripts;
        QList<microsoft::graph::deviceShellScript> deviceShellScripts;
        std::unique_ptr<microsoft::graph::managedDeviceOverview> managedDeviceOverview;
        QList<microsoft::graph::managedDevice> managedDevices;
        QList<microsoft::graph::mobileAppTroubleshootingEvent> mobileAppTroubleshootingEvents;
        QList<microsoft::graph::remoteActionAudit> remoteActionAudits;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthApplicationPerformance> userExperienceAnalyticsAppHealthApplicationPerformance;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthAppPerformanceByAppVersion> userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails> userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId> userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthAppPerformanceByOSVersion> userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthDeviceModelPerformance> userExperienceAnalyticsAppHealthDeviceModelPerformance;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthDevicePerformance> userExperienceAnalyticsAppHealthDevicePerformance;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthDevicePerformanceDetails> userExperienceAnalyticsAppHealthDevicePerformanceDetails;
        QList<microsoft::graph::userExperienceAnalyticsAppHealthOSVersionPerformance> userExperienceAnalyticsAppHealthOSVersionPerformance;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsCategory> userExperienceAnalyticsAppHealthOverview;
        QList<microsoft::graph::userExperienceAnalyticsBaseline> userExperienceAnalyticsBaselines;
        QList<microsoft::graph::userExperienceAnalyticsCategory> userExperienceAnalyticsCategories;
        QList<microsoft::graph::userExperienceAnalyticsMetricHistory> userExperienceAnalyticsDeviceMetricHistory;
        QList<microsoft::graph::userExperienceAnalyticsDevicePerformance> userExperienceAnalyticsDevicePerformance;
        QList<microsoft::graph::userExperienceAnalyticsDeviceScores> userExperienceAnalyticsDeviceScores;
        QList<microsoft::graph::userExperienceAnalyticsDeviceStartupHistory> userExperienceAnalyticsDeviceStartupHistory;
        QList<microsoft::graph::userExperienceAnalyticsDeviceStartupProcess> userExperienceAnalyticsDeviceStartupProcesses;
        QList<microsoft::graph::userExperienceAnalyticsDeviceStartupProcessPerformance> userExperienceAnalyticsDeviceStartupProcessPerformance;
        QList<microsoft::graph::userExperienceAnalyticsDeviceWithoutCloudIdentity> userExperienceAnalyticsDevicesWithoutCloudIdentity;
        QList<microsoft::graph::userExperienceAnalyticsImpactingProcess> userExperienceAnalyticsImpactingProcess;
        QList<microsoft::graph::userExperienceAnalyticsMetricHistory> userExperienceAnalyticsMetricHistory;
        QList<microsoft::graph::userExperienceAnalyticsModelScores> userExperienceAnalyticsModelScores;
        QList<microsoft::graph::userExperienceAnalyticsNotAutopilotReadyDevice> userExperienceAnalyticsNotAutopilotReadyDevice;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsOverview> userExperienceAnalyticsOverview;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsRegressionSummary> userExperienceAnalyticsRegressionSummary;
        QList<microsoft::graph::userExperienceAnalyticsRemoteConnection> userExperienceAnalyticsRemoteConnection;
        QList<microsoft::graph::userExperienceAnalyticsResourcePerformance> userExperienceAnalyticsResourcePerformance;
        QList<microsoft::graph::userExperienceAnalyticsScoreHistory> userExperienceAnalyticsScoreHistory;
        std::unique_ptr<microsoft::graph::userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric> userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric;
        QList<microsoft::graph::userExperienceAnalyticsWorkFromAnywhereMetric> userExperienceAnalyticsWorkFromAnywhereMetrics;
        QList<microsoft::graph::windowsMalwareInformation> windowsMalwareInformation;
        QList<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentials;
        QList<microsoft::graph::deviceManagementResourceAccessProfileBase> resourceAccessProfiles;
        QList<microsoft::graph::appleUserInitiatedEnrollmentProfile> appleUserInitiatedEnrollmentProfiles;
        QList<microsoft::graph::depOnboardingSetting> depOnboardingSettings;
        QList<microsoft::graph::importedDeviceIdentity> importedDeviceIdentities;
        QList<microsoft::graph::importedWindowsAutopilotDeviceIdentity> importedWindowsAutopilotDeviceIdentities;
        QList<microsoft::graph::windowsAutopilotDeploymentProfile> windowsAutopilotDeploymentProfiles;
        QList<microsoft::graph::windowsAutopilotDeviceIdentity> windowsAutopilotDeviceIdentities;
        std::unique_ptr<microsoft::graph::windowsAutopilotSettings> windowsAutopilotSettings;
        QList<microsoft::graph::managementCondition> managementConditions;
        QList<microsoft::graph::managementConditionStatement> managementConditionStatements;
        QList<microsoft::graph::groupPolicyMigrationReport> groupPolicyMigrationReports;
        QList<microsoft::graph::groupPolicyObjectFile> groupPolicyObjectFiles;
        QList<microsoft::graph::groupPolicyCategory> groupPolicyCategories;
        QList<microsoft::graph::groupPolicyConfiguration> groupPolicyConfigurations;
        QList<microsoft::graph::groupPolicyDefinitionFile> groupPolicyDefinitionFiles;
        QList<microsoft::graph::groupPolicyDefinition> groupPolicyDefinitions;
        QList<microsoft::graph::groupPolicyUploadedDefinitionFile> groupPolicyUploadedDefinitionFiles;
        std::unique_ptr<microsoft::graph::deviceManagementReports> reports;
        QList<microsoft::graph::microsoftTunnelConfiguration> microsoftTunnelConfigurations;
        QList<microsoft::graph::microsoftTunnelHealthThreshold> microsoftTunnelHealthThresholds;
        QList<microsoft::graph::microsoftTunnelServerLogCollectionResponse> microsoftTunnelServerLogCollectionResponses;
        QList<microsoft::graph::microsoftTunnelSite> microsoftTunnelSites;
        QList<microsoft::graph::notificationMessageTemplate> notificationMessageTemplates;
        QList<microsoft::graph::deviceManagementDomainJoinConnector> domainJoinConnectors;
        QList<microsoft::graph::configManagerCollection> configManagerCollections;
        QList<microsoft::graph::resourceOperation> resourceOperations;
        QList<microsoft::graph::deviceAndAppManagementRoleAssignment> roleAssignments;
        QList<microsoft::graph::roleDefinition> roleDefinitions;
        QList<microsoft::graph::roleScopeTag> roleScopeTags;
        QList<microsoft::graph::remoteAssistancePartner> remoteAssistancePartners;
        std::unique_ptr<microsoft::graph::remoteAssistanceSettings> remoteAssistanceSettings;
        QList<microsoft::graph::embeddedSIMActivationCodePool> embeddedSIMActivationCodePools;
        QList<microsoft::graph::telecomExpenseManagementPartner> telecomExpenseManagementPartners;
        QList<microsoft::graph::deviceManagementAutopilotEvent> autopilotEvents;
        QList<microsoft::graph::deviceManagementTroubleshootingEvent> troubleshootingEvents;
        QList<microsoft::graph::windowsDriverUpdateProfile> windowsDriverUpdateProfiles;
        QList<microsoft::graph::windowsFeatureUpdateProfile> windowsFeatureUpdateProfiles;
        QList<microsoft::graph::windowsQualityUpdateProfile> windowsQualityUpdateProfiles;
        QList<microsoft::graph::windowsUpdateCatalogItem> windowsUpdateCatalogItems;
        QList<microsoft::graph::intuneBrandingProfile> intuneBrandingProfiles;
        QList<microsoft::graph::windowsInformationProtectionAppLearningSummary> windowsInformationProtectionAppLearningSummaries;
        QList<microsoft::graph::windowsInformationProtectionNetworkLearningSummary> windowsInformationProtectionNetworkLearningSummaries;
        QList<microsoft::graph::userPFXCertificate> userPfxCertificates;
    };

    struct termsAndConditions : graph::entity {
        QString acceptanceStatement;
        QString bodyText;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QDateTime modifiedDateTime;
        QList<QString> roleScopeTagIds;
        QString title;
        int version;
        QList<microsoft::graph::termsAndConditionsAcceptanceStatus> acceptanceStatuses;
        QList<microsoft::graph::termsAndConditionsAssignment> assignments;
        QList<microsoft::graph::termsAndConditionsGroupAssignment> groupAssignments;
    };

    struct deviceConfiguration : graph::entity {
        QDateTime createdDateTime;
        QString description;
        microsoft::graph::deviceManagementApplicabilityRuleDeviceMode deviceManagementApplicabilityRuleDeviceMode;
        microsoft::graph::deviceManagementApplicabilityRuleOsEdition deviceManagementApplicabilityRuleOsEdition;
        microsoft::graph::deviceManagementApplicabilityRuleOsVersion deviceManagementApplicabilityRuleOsVersion;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        bool supportsScopeTags;
        int version;
        QList<microsoft::graph::deviceConfigurationAssignment> assignments;
        QList<microsoft::graph::settingStateDeviceSummary> deviceSettingStateSummaries;
        QList<microsoft::graph::deviceConfigurationDeviceStatus> deviceStatuses;
        std::unique_ptr<microsoft::graph::deviceConfigurationDeviceOverview> deviceStatusOverview;
        QList<microsoft::graph::deviceConfigurationGroupAssignment> groupAssignments;
        QList<microsoft::graph::deviceConfigurationUserStatus> userStatuses;
        std::unique_ptr<microsoft::graph::deviceConfigurationUserOverview> userStatusOverview;
    };

    struct detectedApp : graph::entity {
        int deviceCount;
        QString displayName;
        long long sizeInByte;
        QString version;
        QList<microsoft::graph::managedDevice> managedDevices;
    };

    struct deviceComplianceScript : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QByteArray detectionScriptContent;
        QString displayName;
        bool enforceSignatureCheck;
        QDateTime lastModifiedDateTime;
        QString publisher;
        QList<QString> roleScopeTagIds;
        bool runAs32Bit;
        microsoft::graph::runAsAccountType runAsAccount;
        QString version;
        QList<microsoft::graph::deviceHealthScriptAssignment> assignments;
        QList<microsoft::graph::deviceComplianceScriptDeviceState> deviceRunStates;
        std::unique_ptr<microsoft::graph::deviceComplianceScriptRunSummary> runSummary;
    };

    struct deviceCustomAttributeShellScript : graph::entity {
        QDateTime createdDateTime;
        QString customAttributeName;
        microsoft::graph::deviceCustomAttributeValueType customAttributeType;
        QString description;
        QString displayName;
        QString fileName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        microsoft::graph::runAsAccountType runAsAccount;
        QByteArray scriptContent;
        QList<microsoft::graph::deviceManagementScriptAssignment> assignments;
        QList<microsoft::graph::deviceManagementScriptDeviceState> deviceRunStates;
        QList<microsoft::graph::deviceManagementScriptGroupAssignment> groupAssignments;
        std::unique_ptr<microsoft::graph::deviceManagementScriptRunSummary> runSummary;
        QList<microsoft::graph::deviceManagementScriptUserState> userRunStates;
    };

    struct deviceHealthScript : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QByteArray detectionScriptContent;
        QList<microsoft::graph::deviceHealthScriptParameter> detectionScriptParameters;
        QString displayName;
        bool enforceSignatureCheck;
        QString highestAvailableVersion;
        bool isGlobalScript;
        QDateTime lastModifiedDateTime;
        QString publisher;
        QByteArray remediationScriptContent;
        QList<microsoft::graph::deviceHealthScriptParameter> remediationScriptParameters;
        QList<QString> roleScopeTagIds;
        bool runAs32Bit;
        microsoft::graph::runAsAccountType runAsAccount;
        QString version;
        QList<microsoft::graph::deviceHealthScriptAssignment> assignments;
        QList<microsoft::graph::deviceHealthScriptDeviceState> deviceRunStates;
        std::unique_ptr<microsoft::graph::deviceHealthScriptRunSummary> runSummary;
    };

    struct deviceManagementScript : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        bool enforceSignatureCheck;
        QString fileName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        bool runAs32Bit;
        microsoft::graph::runAsAccountType runAsAccount;
        QByteArray scriptContent;
        QList<microsoft::graph::deviceManagementScriptAssignment> assignments;
        QList<microsoft::graph::deviceManagementScriptDeviceState> deviceRunStates;
        QList<microsoft::graph::deviceManagementScriptGroupAssignment> groupAssignments;
        std::unique_ptr<microsoft::graph::deviceManagementScriptRunSummary> runSummary;
        QList<microsoft::graph::deviceManagementScriptUserState> userRunStates;
    };

    struct deviceShellScript : graph::entity {
        bool blockExecutionNotifications;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        std::chrono::system_clock::duration executionFrequency;
        QString fileName;
        QDateTime lastModifiedDateTime;
        int retryCount;
        QList<QString> roleScopeTagIds;
        microsoft::graph::runAsAccountType runAsAccount;
        QByteArray scriptContent;
        QList<microsoft::graph::deviceManagementScriptAssignment> assignments;
        QList<microsoft::graph::deviceManagementScriptDeviceState> deviceRunStates;
        QList<microsoft::graph::deviceManagementScriptGroupAssignment> groupAssignments;
        std::unique_ptr<microsoft::graph::deviceManagementScriptRunSummary> runSummary;
        QList<microsoft::graph::deviceManagementScriptUserState> userRunStates;
    };

    struct windowsAutopilotDeploymentProfile : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString deviceNameTemplate;
        microsoft::graph::windowsAutopilotDeviceType deviceType;
        QString displayName;
        bool enableWhiteGlove;
        microsoft::graph::windowsEnrollmentStatusScreenSettings enrollmentStatusScreenSettings;
        bool extractHardwareHash;
        QString language;
        QDateTime lastModifiedDateTime;
        QString managementServiceAppId;
        microsoft::graph::outOfBoxExperienceSettings outOfBoxExperienceSettings;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::windowsAutopilotDeviceIdentity> assignedDevices;
        QList<microsoft::graph::windowsAutopilotDeploymentProfileAssignment> assignments;
    };

    struct windowsAutopilotDeviceIdentity : graph::entity {
        QString addressableUserName;
        QString azureActiveDirectoryDeviceId;
        QString azureAdDeviceId;
        QDateTime deploymentProfileAssignedDateTime;
        microsoft::graph::windowsAutopilotProfileAssignmentDetailedStatus deploymentProfileAssignmentDetailedStatus;
        microsoft::graph::windowsAutopilotProfileAssignmentStatus deploymentProfileAssignmentStatus;
        QString displayName;
        microsoft::graph::enrollmentState enrollmentState;
        QString groupTag;
        QDateTime lastContactedDateTime;
        QString managedDeviceId;
        QString manufacturer;
        QString model;
        QString productKey;
        QString purchaseOrderIdentifier;
        QString resourceName;
        QString serialNumber;
        QString skuNumber;
        QString systemFamily;
        QString userPrincipalName;
        std::unique_ptr<microsoft::graph::windowsAutopilotDeploymentProfile> deploymentProfile;
        std::unique_ptr<microsoft::graph::windowsAutopilotDeploymentProfile> intendedDeploymentProfile;
    };

    struct managementCondition : graph::entity {
        QList<microsoft::graph::devicePlatformType> applicablePlatforms;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QString eTag;
        QDateTime modifiedDateTime;
        QString uniqueName;
        QList<microsoft::graph::managementConditionStatement> managementConditionStatements;
    };

    struct managementConditionStatement : graph::entity {
        QList<microsoft::graph::devicePlatformType> applicablePlatforms;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QString eTag;
        microsoft::graph::managementConditionExpression expression;
        QDateTime modifiedDateTime;
        QList<microsoft::graph::managementCondition> managementConditions;
    };

    struct groupPolicyCategory : graph::entity {
        QString displayName;
        bool isRoot;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::groupPolicyCategory> children;
        std::unique_ptr<microsoft::graph::groupPolicyDefinitionFile> definitionFile;
        QList<microsoft::graph::groupPolicyDefinition> definitions;
        std::unique_ptr<microsoft::graph::groupPolicyCategory> parent;
    };

    struct groupPolicyConfiguration : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::groupPolicyConfigurationAssignment> assignments;
        QList<microsoft::graph::groupPolicyDefinitionValue> definitionValues;
    };

    struct groupPolicyDefinitionFile : graph::entity {
        QString description;
        QString displayName;
        QList<QString> languageCodes;
        QDateTime lastModifiedDateTime;
        microsoft::graph::groupPolicyType policyType;
        QString revision;
        QString targetNamespace;
        QString targetPrefix;
        QList<microsoft::graph::groupPolicyDefinition> definitions;
    };

    struct groupPolicyDefinition : graph::entity {
        QString categoryPath;
        microsoft::graph::groupPolicyDefinitionClassType classType;
        QString displayName;
        QString explainText;
        QUuid groupPolicyCategoryId;
        bool hasRelatedDefinitions;
        QDateTime lastModifiedDateTime;
        QString minDeviceCspVersion;
        QString minUserCspVersion;
        microsoft::graph::groupPolicyType policyType;
        QString supportedOn;
        QString version;
        std::unique_ptr<microsoft::graph::groupPolicyCategory> category;
        std::unique_ptr<microsoft::graph::groupPolicyDefinitionFile> definitionFile;
        std::unique_ptr<microsoft::graph::groupPolicyDefinition> nextVersionDefinition;
        QList<microsoft::graph::groupPolicyPresentation> presentations;
        std::unique_ptr<microsoft::graph::groupPolicyDefinition> previousVersionDefinition;
    };

    struct groupPolicyUploadedDefinitionFile : graph::groupPolicyDefinitionFile {
        QByteArray content;
        QString defaultLanguageCode;
        QString fileName;
        QList<microsoft::graph::groupPolicyUploadedLanguageFile> groupPolicyUploadedLanguageFiles;
        microsoft::graph::groupPolicyUploadedDefinitionFileStatus status;
        QDateTime uploadDateTime;
        QList<microsoft::graph::groupPolicyOperation> groupPolicyOperations;
    };

    struct roleAssignment : graph::entity {
        QString description;
        QString displayName;
        QList<QString> resourceScopes;
        QList<QString> scopeMembers;
        microsoft::graph::roleAssignmentScopeType scopeType;
        std::unique_ptr<microsoft::graph::roleDefinition> roleDefinition;
    };

    struct deviceAndAppManagementRoleAssignment : graph::roleAssignment {
        QList<QString> members;
        QList<microsoft::graph::roleScopeTag> roleScopeTags;
    };

    struct roleDefinition : graph::entity {
        QString description;
        QString displayName;
        bool isBuiltIn;
        bool isBuiltInRoleDefinition;
        QList<microsoft::graph::rolePermission> permissions;
        QList<microsoft::graph::rolePermission> rolePermissions;
        QList<QString> roleScopeTagIds;
        QList<microsoft::graph::roleAssignment> roleAssignments;
    };

    struct compliance {
        std::unique_ptr<microsoft::graph::ediscovery::ediscoveryroot> ediscovery;
    };

    struct channel : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QString email;
        bool isFavoriteByDefault;
        microsoft::graph::channelMembershipType membershipType;
        microsoft::graph::channelModerationSettings moderationSettings;
        QString webUrl;
        std::unique_ptr<microsoft::graph::driveItem> filesFolder;
        QList<microsoft::graph::conversationMember> members;
        QList<microsoft::graph::chatMessage> messages;
        QList<microsoft::graph::teamsTab> tabs;
    };

    struct itemAnalytics : graph::entity {
        std::unique_ptr<microsoft::graph::itemActivityStat> allTime;
        QList<microsoft::graph::itemActivityStat> itemActivityStats;
        std::unique_ptr<microsoft::graph::itemActivityStat> lastSevenDays;
    };

    struct list : graph::baseItem {
        QString displayName;
        microsoft::graph::listInfo list;
        microsoft::graph::sharepointIds sharepointIds;
        microsoft::graph::systemFacet system;
        QList<microsoft::graph::itemActivityOLD> activities;
        QList<microsoft::graph::columnDefinition> columns;
        QList<microsoft::graph::contentType> contentTypes;
        std::unique_ptr<microsoft::graph::drive> drive;
        QList<microsoft::graph::listItem> items;
        QList<microsoft::graph::subscription> subscriptions;
    };

    struct sitePage : graph::baseItem {
        microsoft::graph::contentTypeInfo contentType;
        QString pageLayoutType;
        microsoft::graph::publicationFacet publishingState;
        QString title;
        QList<microsoft::graph::webPart> webParts;
    };

    struct educationClass : graph::entity {
        QString classCode;
        microsoft::graph::educationCourse course;
        microsoft::graph::identitySet createdBy;
        QString description;
        QString displayName;
        QString externalId;
        QString externalName;
        microsoft::graph::educationExternalSource externalSource;
        QString externalSourceDetail;
        QString grade;
        QString mailNickname;
        microsoft::graph::educationTerm term;
        QList<microsoft::graph::educationCategory> assignmentCategories;
        std::unique_ptr<microsoft::graph::educationAssignmentDefaults> assignmentDefaults;
        QList<microsoft::graph::educationAssignment> assignments;
        std::unique_ptr<microsoft::graph::educationAssignmentSettings> assignmentSettings;
        std::unique_ptr<microsoft::graph::group> group;
        QList<microsoft::graph::educationUser> members;
        QList<microsoft::graph::educationSchool> schools;
        QList<microsoft::graph::educationUser> teachers;
    };

    struct educationUser : graph::entity {
        QList<microsoft::graph::relatedContact> relatedContacts;
        bool accountEnabled;
        QList<microsoft::graph::assignedLicense> assignedLicenses;
        QList<microsoft::graph::assignedPlan> assignedPlans;
        QList<QString> businessPhones;
        microsoft::graph::identitySet createdBy;
        QString department;
        QString displayName;
        microsoft::graph::educationExternalSource externalSource;
        QString externalSourceDetail;
        QString givenName;
        QString mail;
        microsoft::graph::physicalAddress mailingAddress;
        QString mailNickname;
        QString middleName;
        QString mobilePhone;
        QString officeLocation;
        microsoft::graph::educationOnPremisesInfo onPremisesInfo;
        QString passwordPolicies;
        microsoft::graph::passwordProfile passwordProfile;
        QString preferredLanguage;
        microsoft::graph::educationUserRole primaryRole;
        QList<microsoft::graph::provisionedPlan> provisionedPlans;
        QDateTime refreshTokensValidFromDateTime;
        microsoft::graph::physicalAddress residenceAddress;
        bool showInAddressList;
        microsoft::graph::educationStudent student;
        QString surname;
        microsoft::graph::educationTeacher teacher;
        QString usageLocation;
        QString userPrincipalName;
        QString userType;
        QList<microsoft::graph::educationAssignment> assignments;
        QList<microsoft::graph::educationRubric> rubrics;
        QList<microsoft::graph::educationClass> classes;
        QList<microsoft::graph::educationSchool> schools;
        QList<microsoft::graph::educationClass> taughtClasses;
        std::unique_ptr<microsoft::graph::user> user;
    };

    struct educationSchool : graph::educationOrganization {
        microsoft::graph::physicalAddress address;
        microsoft::graph::identitySet createdBy;
        QString externalId;
        QString externalPrincipalId;
        QString fax;
        QString highestGrade;
        QString lowestGrade;
        QString phone;
        QString principalEmail;
        QString principalName;
        QString schoolNumber;
        std::unique_ptr<microsoft::graph::administrativeUnit> administrativeUnit;
        QList<microsoft::graph::educationClass> classes;
        QList<microsoft::graph::educationUser> users;
    };

    struct educationRoot {
        QList<microsoft::graph::educationSynchronizationProfile> synchronizationProfiles;
        QList<microsoft::graph::educationClass> classes;
        std::unique_ptr<microsoft::graph::educationUser> me;
        QList<microsoft::graph::educationSchool> schools;
        QList<microsoft::graph::educationUser> users;
    };

    struct itemActivityOLD : graph::entity {
        microsoft::graph::itemActionSet action;
        microsoft::graph::identitySet actor;
        microsoft::graph::itemActivityTimeSet times;
        std::unique_ptr<microsoft::graph::driveItem> driveItem;
        std::unique_ptr<microsoft::graph::listItem> listItem;
    };

    struct driveItem : graph::baseItem {
        microsoft::graph::audio audio;
        microsoft::graph::bundle bundle;
        QByteArray content;
        QString cTag;
        microsoft::graph::deleted deleted;
        microsoft::graph::file file;
        microsoft::graph::fileSystemInfo fileSystemInfo;
        microsoft::graph::folder folder;
        microsoft::graph::image image;
        microsoft::graph::geoCoordinates location;
        microsoft::graph::media media;
        microsoft::graph::package package;
        microsoft::graph::pendingOperations pendingOperations;
        microsoft::graph::photo photo;
        microsoft::graph::publicationFacet publication;
        microsoft::graph::remoteItem remoteItem;
        microsoft::graph::root root;
        microsoft::graph::searchResult searchResult;
        microsoft::graph::shared shared;
        microsoft::graph::sharepointIds sharepointIds;
        long long size;
        microsoft::graph::driveItemSource source;
        microsoft::graph::specialFolder specialFolder;
        microsoft::graph::video video;
        QString webDavUrl;
        std::unique_ptr<microsoft::graph::workbook> workbook;
        QList<microsoft::graph::itemActivityOLD> activities;
        std::unique_ptr<microsoft::graph::itemAnalytics> analytics;
        QList<microsoft::graph::driveItem> children;
        std::unique_ptr<microsoft::graph::listItem> listItem;
        QList<microsoft::graph::permission> permissions;
        QList<microsoft::graph::subscription> subscriptions;
        QList<microsoft::graph::thumbnailSet> thumbnails;
        QList<microsoft::graph::driveItemVersion> versions;
    };

    struct workbook : graph::entity {
        std::unique_ptr<microsoft::graph::workbookApplication> application;
        QList<microsoft::graph::workbookComment> comments;
        std::unique_ptr<microsoft::graph::workbookFunctions> functions;
        QList<microsoft::graph::workbookNamedItem> names;
        QList<microsoft::graph::workbookOperation> operations;
        QList<microsoft::graph::workbookTable> tables;
        QList<microsoft::graph::workbookWorksheet> worksheets;
    };

    struct listItem : graph::baseItem {
        microsoft::graph::contentTypeInfo contentType;
        microsoft::graph::sharepointIds sharepointIds;
        QList<microsoft::graph::itemActivityOLD> activities;
        std::unique_ptr<microsoft::graph::itemAnalytics> analytics;
        std::unique_ptr<microsoft::graph::driveItem> driveItem;
        std::unique_ptr<microsoft::graph::fieldValueSet> fields;
        QList<microsoft::graph::listItemVersion> versions;
    };

    struct workbookNamedItem : graph::entity {
        QString comment;
        QString name;
        QString scope;
        QString type;
        microsoft::graph::Json value;
        bool visible;
        std::unique_ptr<microsoft::graph::workbookWorksheet> worksheet;
    };

    struct workbookTable : graph::entity {
        bool highlightFirstColumn;
        bool highlightLastColumn;
        QString legacyId;
        QString name;
        bool showBandedColumns;
        bool showBandedRows;
        bool showFilterButton;
        bool showHeaders;
        bool showTotals;
        QString style;
        QList<microsoft::graph::workbookTableColumn> columns;
        QList<microsoft::graph::workbookTableRow> rows;
        std::unique_ptr<microsoft::graph::workbookTableSort> sort;
        std::unique_ptr<microsoft::graph::workbookWorksheet> worksheet;
    };

    struct workbookWorksheet : graph::entity {
        QString name;
        int position;
        QString visibility;
        QList<microsoft::graph::workbookChart> charts;
        QList<microsoft::graph::workbookNamedItem> names;
        QList<microsoft::graph::workbookPivotTable> pivotTables;
        std::unique_ptr<microsoft::graph::workbookWorksheetProtection> protection;
        QList<microsoft::graph::workbookTable> tables;
    };

    struct workbookChart : graph::entity {
        double height;
        double left;
        QString name;
        double top;
        double width;
        std::unique_ptr<microsoft::graph::workbookChartAxes> axes;
        std::unique_ptr<microsoft::graph::workbookChartDataLabels> dataLabels;
        std::unique_ptr<microsoft::graph::workbookChartAreaFormat> format;
        std::unique_ptr<microsoft::graph::workbookChartLegend> legend;
        QList<microsoft::graph::workbookChartSeries> series;
        std::unique_ptr<microsoft::graph::workbookChartTitle> title;
        std::unique_ptr<microsoft::graph::workbookWorksheet> worksheet;
    };

    struct workbookPivotTable : graph::entity {
        QString name;
        std::unique_ptr<microsoft::graph::workbookWorksheet> worksheet;
    };

    struct workbookRange : graph::entity {
        QString address;
        QString addressLocal;
        int cellCount;
        int columnCount;
        bool columnHidden;
        int columnIndex;
        microsoft::graph::Json formulas;
        microsoft::graph::Json formulasLocal;
        microsoft::graph::Json formulasR1C1;
        bool hidden;
        microsoft::graph::Json numberFormat;
        int rowCount;
        bool rowHidden;
        int rowIndex;
        microsoft::graph::Json text;
        microsoft::graph::Json values;
        microsoft::graph::Json valueTypes;
        std::unique_ptr<microsoft::graph::workbookRangeFormat> format;
        std::unique_ptr<microsoft::graph::workbookRangeSort> sort;
        std::unique_ptr<microsoft::graph::workbookWorksheet> worksheet;
    };

    struct eventMessage : graph::message {
        microsoft::graph::dateTimeTimeZone endDateTime;
        bool isAllDay;
        bool isDelegated;
        bool isOutOfDate;
        microsoft::graph::location location;
        microsoft::graph::meetingMessageType meetingMessageType;
        microsoft::graph::patternedRecurrence recurrence;
        microsoft::graph::dateTimeTimeZone startDateTime;
        microsoft::graph::eventType type;
        std::unique_ptr<microsoft::graph::event> event;
    };

    struct eventMessageRequest : graph::eventMessage {
        bool allowNewTimeProposals;
        microsoft::graph::dateTimeTimeZone previousEndDateTime;
        microsoft::graph::location previousLocation;
        microsoft::graph::dateTimeTimeZone previousStartDateTime;
        bool responseRequested;
    };

    struct eventMessageResponse : graph::eventMessage {
        microsoft::graph::timeSlot proposedNewTime;
        microsoft::graph::responseType responseType;
    };

    struct itemActivity : graph::entity {
        microsoft::graph::accessAction access;
        QDateTime activityDateTime;
        microsoft::graph::identitySet actor;
        std::unique_ptr<microsoft::graph::driveItem> driveItem;
    };

    struct itemActivityStat : graph::entity {
        microsoft::graph::itemActionStat access;
        microsoft::graph::itemActionStat create;
        microsoft::graph::itemActionStat _delete;
        microsoft::graph::itemActionStat edit;
        QDateTime endDateTime;
        microsoft::graph::incompleteData incompleteData;
        bool isTrending;
        microsoft::graph::itemActionStat move;
        QDateTime startDateTime;
        QList<microsoft::graph::itemActivity> activities;
    };

    struct sharedDriveItem : graph::baseItem {
        microsoft::graph::identitySet owner;
        std::unique_ptr<microsoft::graph::driveItem> driveItem;
        QList<microsoft::graph::driveItem> items;
        std::unique_ptr<microsoft::graph::list> list;
        std::unique_ptr<microsoft::graph::listItem> listItem;
        std::unique_ptr<microsoft::graph::permission> permission;
        std::unique_ptr<microsoft::graph::driveItem> root;
        std::unique_ptr<microsoft::graph::site> site;
    };

    struct connector : graph::entity {
        QString externalIp;
        QString machineName;
        microsoft::graph::connectorStatus status;
        QList<microsoft::graph::connectorGroup> memberOf;
    };

    struct onPremisesAgent : graph::entity {
        QString externalIp;
        QString machineName;
        microsoft::graph::agentStatus status;
        QList<microsoft::graph::onPremisesPublishingType> supportedPublishingTypes;
        QList<microsoft::graph::onPremisesAgentGroup> agentGroups;
    };

    struct onPremisesAgentGroup : graph::entity {
        QString displayName;
        bool isDefault;
        microsoft::graph::onPremisesPublishingType publishingType;
        QList<microsoft::graph::onPremisesAgent> agents;
        QList<microsoft::graph::publishedResource> publishedResources;
    };

    struct publishedResource : graph::entity {
        QString displayName;
        microsoft::graph::onPremisesPublishingType publishingType;
        QString resourceName;
        QList<microsoft::graph::onPremisesAgentGroup> agentGroups;
    };

    struct onPremisesPublishingProfile : graph::entity {
        microsoft::graph::hybridAgentUpdaterConfiguration hybridAgentUpdaterConfiguration;
        bool isEnabled;
        QList<microsoft::graph::onPremisesAgentGroup> agentGroups;
        QList<microsoft::graph::onPremisesAgent> agents;
        QList<microsoft::graph::connectorGroup> connectorGroups;
        QList<microsoft::graph::connector> connectors;
        QList<microsoft::graph::publishedResource> publishedResources;
    };

    struct attributeMapping {
        QString defaultValue;
        bool exportMissingReferences;
        microsoft::graph::attributeFlowBehavior flowBehavior;
        microsoft::graph::attributeFlowType flowType;
        int matchingPriority;
        microsoft::graph::attributeMappingSource source;
        QString targetAttributeName;
    };

    struct attributeMappingSource {
        QString expression;
        QString name;
        QList<microsoft::graph::stringKeyAttributeMappingSourceValuePair> parameters;
        microsoft::graph::attributeMappingSourceType type;
    };

    struct stringKeyAttributeMappingSourceValuePair {
        QString key;
        microsoft::graph::attributeMappingSource value;
    };

    struct objectMapping {
        QList<microsoft::graph::attributeMapping> attributeMappings;
        bool enabled;
        microsoft::graph::objectFlowTypes flowTypes;
        QList<microsoft::graph::metadataEntry> metadata;
        QString name;
        microsoft::graph::filter scope;
        QString sourceObjectName;
        QString targetObjectName;
    };

    struct parseExpressionResponse {
        microsoft::graph::publicError error;
        QList<QString> evaluationResult;
        bool evaluationSucceeded;
        microsoft::graph::attributeMappingSource parsedExpression;
        bool parsingSucceeded;
    };

    struct synchronizationRule {
        bool editable;
        QString id;
        QList<microsoft::graph::stringKeyStringValuePair> metadata;
        QString name;
        QList<microsoft::graph::objectMapping> objectMappings;
        int priority;
        QString sourceDirectoryName;
        QString targetDirectoryName;
    };

    struct synchronizationJob : graph::entity {
        microsoft::graph::synchronizationSchedule schedule;
        microsoft::graph::synchronizationStatus status;
        QList<microsoft::graph::keyValuePair> synchronizationJobSettings;
        QString templateId;
        std::unique_ptr<microsoft::graph::synchronizationSchema> schema;
    };

    struct synchronizationTemplate : graph::entity {
        QUuid applicationId;
        bool _default;
        QString description;
        bool discoverable;
        QString factoryTag;
        QList<microsoft::graph::metadataEntry> metadata;
        std::unique_ptr<microsoft::graph::synchronizationSchema> schema;
    };

    struct synchronizationSchema : graph::entity {
        QList<microsoft::graph::synchronizationRule> synchronizationRules;
        QString version;
        QList<microsoft::graph::directoryDefinition> directories;
    };

    struct accessReviewScheduleDefinition : graph::entity {
        QList<microsoft::graph::accessReviewNotificationRecipientItem> additionalNotificationRecipients;
        QList<microsoft::graph::accessReviewReviewerScope> backupReviewers;
        microsoft::graph::userIdentity createdBy;
        QDateTime createdDateTime;
        QString descriptionForAdmins;
        QString descriptionForReviewers;
        QString displayName;
        QList<microsoft::graph::accessReviewReviewerScope> fallbackReviewers;
        microsoft::graph::accessReviewScope instanceEnumerationScope;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::accessReviewReviewerScope> reviewers;
        microsoft::graph::accessReviewScope scope;
        microsoft::graph::accessReviewScheduleSettings settings;
        QString status;
        QList<microsoft::graph::accessReviewInstance> instances;
    };

    struct accessReviewSet : graph::entity {
        QList<microsoft::graph::accessReviewScheduleDefinition> definitions;
        QList<microsoft::graph::accessReviewHistoryDefinition> historyDefinitions;
        std::unique_ptr<microsoft::graph::accessReviewPolicy> policy;
    };

    struct entitlementManagement : graph::entity {
        QList<microsoft::graph::approval> accessPackageAssignmentApprovals;
        QList<microsoft::graph::accessPackageAssignmentPolicy> accessPackageAssignmentPolicies;
        QList<microsoft::graph::accessPackageAssignmentRequest> accessPackageAssignmentRequests;
        QList<microsoft::graph::accessPackageAssignmentResourceRole> accessPackageAssignmentResourceRoles;
        QList<microsoft::graph::accessPackageAssignment> accessPackageAssignments;
        QList<microsoft::graph::accessPackageCatalog> accessPackageCatalogs;
        QList<microsoft::graph::accessPackageResourceEnvironment> accessPackageResourceEnvironments;
        QList<microsoft::graph::accessPackageResourceRequest> accessPackageResourceRequests;
        QList<microsoft::graph::accessPackageResourceRoleScope> accessPackageResourceRoleScopes;
        QList<microsoft::graph::accessPackageResource> accessPackageResources;
        QList<microsoft::graph::accessPackage> accessPackages;
        QList<microsoft::graph::connectedOrganization> connectedOrganizations;
        std::unique_ptr<microsoft::graph::entitlementManagementSettings> settings;
    };

    struct accessPackageAssignmentPolicy : graph::entity {
        QString accessPackageId;
        microsoft::graph::assignmentReviewSettings accessReviewSettings;
        bool canExtend;
        QString createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        int durationInDays;
        QDateTime expirationDateTime;
        QString modifiedBy;
        QDateTime modifiedDateTime;
        QList<microsoft::graph::accessPackageQuestion> questions;
        microsoft::graph::approvalSettings requestApprovalSettings;
        microsoft::graph::requestorSettings requestorSettings;
        std::unique_ptr<microsoft::graph::accessPackage> accessPackage;
        std::unique_ptr<microsoft::graph::accessPackageCatalog> accessPackageCatalog;
    };

    struct accessPackageAssignmentRequest : graph::entity {
        QList<microsoft::graph::accessPackageAnswer> answers;
        QDateTime completedDate;
        QDateTime createdDateTime;
        QDateTime expirationDateTime;
        bool isValidationOnly;
        QString justification;
        QString requestState;
        QString requestStatus;
        QString requestType;
        microsoft::graph::requestSchedule schedule;
        std::unique_ptr<microsoft::graph::accessPackage> accessPackage;
        std::unique_ptr<microsoft::graph::accessPackageAssignment> accessPackageAssignment;
        std::unique_ptr<microsoft::graph::accessPackageSubject> requestor;
    };

    struct accessPackageAssignmentResourceRole : graph::entity {
        QString originId;
        QString originSystem;
        QString status;
        QList<microsoft::graph::accessPackageAssignment> accessPackageAssignments;
        std::unique_ptr<microsoft::graph::accessPackageResourceRole> accessPackageResourceRole;
        std::unique_ptr<microsoft::graph::accessPackageResourceScope> accessPackageResourceScope;
        std::unique_ptr<microsoft::graph::accessPackageSubject> accessPackageSubject;
    };

    struct accessPackageAssignment : graph::entity {
        QString accessPackageId;
        QString assignmentPolicyId;
        QString assignmentState;
        QString assignmentStatus;
        QString catalogId;
        QDateTime expiredDateTime;
        bool isExtended;
        microsoft::graph::requestSchedule schedule;
        QString targetId;
        std::unique_ptr<microsoft::graph::accessPackage> accessPackage;
        std::unique_ptr<microsoft::graph::accessPackageAssignmentPolicy> accessPackageAssignmentPolicy;
        QList<microsoft::graph::accessPackageAssignmentRequest> accessPackageAssignmentRequests;
        QList<microsoft::graph::accessPackageAssignmentResourceRole> accessPackageAssignmentResourceRoles;
        std::unique_ptr<microsoft::graph::accessPackageSubject> target;
    };

    struct accessPackageCatalog : graph::entity {
        QString catalogStatus;
        QString catalogType;
        QString createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        bool isExternallyVisible;
        QString modifiedBy;
        QDateTime modifiedDateTime;
        QList<microsoft::graph::accessPackageResourceRole> accessPackageResourceRoles;
        QList<microsoft::graph::accessPackageResource> accessPackageResources;
        QList<microsoft::graph::accessPackageResourceScope> accessPackageResourceScopes;
        QList<microsoft::graph::accessPackage> accessPackages;
    };

    struct accessPackageResourceEnvironment : graph::entity {
        microsoft::graph::connectionInfo connectionInfo;
        QString createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        bool isDefaultEnvironment;
        QString modifiedBy;
        QDateTime modifiedDateTime;
        QString originId;
        QString originSystem;
        QList<microsoft::graph::accessPackageResource> accessPackageResources;
    };

    struct accessPackageResourceRequest : graph::entity {
        QString catalogId;
        bool executeImmediately;
        QDateTime expirationDateTime;
        bool isValidationOnly;
        QString justification;
        QString requestState;
        QString requestStatus;
        QString requestType;
        std::unique_ptr<microsoft::graph::accessPackageResource> accessPackageResource;
        std::unique_ptr<microsoft::graph::accessPackageSubject> requestor;
    };

    struct accessPackageResourceRoleScope : graph::entity {
        QString createdBy;
        QDateTime createdDateTime;
        QString modifiedBy;
        QDateTime modifiedDateTime;
        std::unique_ptr<microsoft::graph::accessPackageResourceRole> accessPackageResourceRole;
        std::unique_ptr<microsoft::graph::accessPackageResourceScope> accessPackageResourceScope;
    };

    struct accessPackageResource : graph::entity {
        QString addedBy;
        QDateTime addedOn;
        QList<microsoft::graph::accessPackageResourceAttribute> attributes;
        QString description;
        QString displayName;
        bool isPendingOnboarding;
        QString originId;
        QString originSystem;
        QString resourceType;
        QString url;
        std::unique_ptr<microsoft::graph::accessPackageResourceEnvironment> accessPackageResourceEnvironment;
        QList<microsoft::graph::accessPackageResourceRole> accessPackageResourceRoles;
        QList<microsoft::graph::accessPackageResourceScope> accessPackageResourceScopes;
    };

    struct accessPackage : graph::entity {
        QString catalogId;
        QString createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        bool isHidden;
        bool isRoleScopesVisible;
        QString modifiedBy;
        QDateTime modifiedDateTime;
        QList<microsoft::graph::accessPackageAssignmentPolicy> accessPackageAssignmentPolicies;
        std::unique_ptr<microsoft::graph::accessPackageCatalog> accessPackageCatalog;
        QList<microsoft::graph::accessPackageResourceRoleScope> accessPackageResourceRoleScopes;
        QList<microsoft::graph::accessPackage> accessPackagesIncompatibleWith;
        QList<microsoft::graph::accessPackage> incompatibleAccessPackages;
        QList<microsoft::graph::group> incompatibleGroups;
    };

    struct identityGovernance {
        std::unique_ptr<microsoft::graph::accessReviewSet> accessReviews;
        std::unique_ptr<microsoft::graph::appConsentApprovalRoute> appConsent;
        std::unique_ptr<microsoft::graph::termsOfUseContainer> termsOfUse;
        std::unique_ptr<microsoft::graph::entitlementManagement> entitlementManagement;
    };

    struct program : graph::entity {
        QString description;
        QString displayName;
        QList<microsoft::graph::programControl> controls;
    };

    struct programControl : graph::entity {
        QString controlId;
        QString controlTypeId;
        QDateTime createdDateTime;
        QString displayName;
        microsoft::graph::userIdentity owner;
        QString programId;
        microsoft::graph::programResource resource;
        QString status;
        std::unique_ptr<microsoft::graph::program> program;
    };

    struct identityProtectionRoot {
        QList<microsoft::graph::riskDetection> riskDetections;
        QList<microsoft::graph::riskyUser> riskyUsers;
    };

    struct riskyUser : graph::entity {
        bool isDeleted;
        bool isProcessing;
        microsoft::graph::riskDetail riskDetail;
        QDateTime riskLastUpdatedDateTime;
        microsoft::graph::riskLevel riskLevel;
        microsoft::graph::riskState riskState;
        QString userDisplayName;
        QString userPrincipalName;
        QList<microsoft::graph::riskyUserHistoryItem> history;
    };

    struct riskyUserHistoryItem : graph::riskyUser {
        microsoft::graph::riskUserActivity activity;
        QString initiatedBy;
        QString userId;
    };

    struct accessPackageResourceRole : graph::entity {
        QString description;
        QString displayName;
        QString originId;
        QString originSystem;
        std::unique_ptr<microsoft::graph::accessPackageResource> accessPackageResource;
    };

    struct accessPackageResourceScope : graph::entity {
        QString description;
        QString displayName;
        bool isRootScope;
        QString originId;
        QString originSystem;
        QString roleOriginId;
        QString url;
        std::unique_ptr<microsoft::graph::accessPackageResource> accessPackageResource;
    };

    struct mobileApp : graph::entity {
        QDateTime createdDateTime;
        int dependentAppCount;
        QString description;
        QString developer;
        QString displayName;
        QString informationUrl;
        bool isAssigned;
        bool isFeatured;
        microsoft::graph::mimeContent largeIcon;
        QDateTime lastModifiedDateTime;
        QString notes;
        QString owner;
        QString privacyInformationUrl;
        QString publisher;
        microsoft::graph::mobileAppPublishingState publishingState;
        QList<QString> roleScopeTagIds;
        int supersededAppCount;
        int supersedingAppCount;
        int uploadState;
        QList<microsoft::graph::mobileAppAssignment> assignments;
        QList<microsoft::graph::mobileAppCategory> categories;
        QList<microsoft::graph::mobileAppInstallStatus> deviceStatuses;
        std::unique_ptr<microsoft::graph::mobileAppInstallSummary> installSummary;
        QList<microsoft::graph::mobileAppRelationship> relationships;
        QList<microsoft::graph::userAppInstallStatus> userStatuses;
    };

    struct androidForWorkApp : graph::mobileApp {
        QString appIdentifier;
        QString appStoreUrl;
        QString packageId;
        int totalLicenseCount;
        int usedLicenseCount;
    };

    struct mobileLobApp : graph::mobileApp {
        QString committedContentVersion;
        QString fileName;
        long long size;
        QList<microsoft::graph::mobileAppContent> contentVersions;
    };

    struct androidLobApp : graph::mobileLobApp {
        QString identityName;
        QString identityVersion;
        microsoft::graph::androidMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString packageId;
        QString versionCode;
        QString versionName;
    };

    struct androidManagedStoreApp : graph::mobileApp {
        QString appIdentifier;
        QString appStoreUrl;
        QList<microsoft::graph::androidManagedStoreAppTrack> appTracks;
        bool isPrivate;
        bool isSystemApp;
        QString packageId;
        bool supportsOemConfig;
        int totalLicenseCount;
        int usedLicenseCount;
    };

    struct androidManagedStoreWebApp : graph::androidManagedStoreApp {
    };

    struct androidStoreApp : graph::mobileApp {
        QString appIdentifier;
        QString appStoreUrl;
        microsoft::graph::androidMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString packageId;
    };

    struct deviceAppManagement : graph::entity {
        bool isEnabledForMicrosoftStoreForBusiness;
        QString microsoftStoreForBusinessLanguage;
        QDateTime microsoftStoreForBusinessLastCompletedApplicationSyncTime;
        QDateTime microsoftStoreForBusinessLastSuccessfulSyncDateTime;
        microsoft::graph::microsoftStoreForBusinessPortalSelectionOptions microsoftStoreForBusinessPortalSelection;
        QList<microsoft::graph::managedEBookCategory> managedEBookCategories;
        QList<microsoft::graph::enterpriseCodeSigningCertificate> enterpriseCodeSigningCertificates;
        QList<microsoft::graph::iosLobAppProvisioningConfiguration> iosLobAppProvisioningConfigurations;
        QList<microsoft::graph::mobileAppCategory> mobileAppCategories;
        QList<microsoft::graph::managedDeviceMobileAppConfiguration> mobileAppConfigurations;
        QList<microsoft::graph::mobileApp> mobileApps;
        std::unique_ptr<microsoft::graph::symantecCodeSigningCertificate> symantecCodeSigningCertificate;
        QList<microsoft::graph::managedEBook> managedEBooks;
        QList<microsoft::graph::policySet> policySets;
        QList<microsoft::graph::sideLoadingKey> sideLoadingKeys;
        QList<microsoft::graph::vppToken> vppTokens;
        std::unique_ptr<microsoft::graph::windowsManagementApp> windowsManagementApp;
        QList<microsoft::graph::androidManagedAppProtection> androidManagedAppProtections;
        QList<microsoft::graph::defaultManagedAppProtection> defaultManagedAppProtections;
        QList<microsoft::graph::iosManagedAppProtection> iosManagedAppProtections;
        QList<microsoft::graph::managedAppPolicy> managedAppPolicies;
        QList<microsoft::graph::managedAppRegistration> managedAppRegistrations;
        QList<microsoft::graph::managedAppStatus> managedAppStatuses;
        QList<microsoft::graph::mdmWindowsInformationProtectionPolicy> mdmWindowsInformationProtectionPolicies;
        QList<microsoft::graph::targetedManagedAppConfiguration> targetedManagedAppConfigurations;
        QList<microsoft::graph::windowsInformationProtectionDeviceRegistration> windowsInformationProtectionDeviceRegistrations;
        QList<microsoft::graph::windowsInformationProtectionPolicy> windowsInformationProtectionPolicies;
        QList<microsoft::graph::windowsInformationProtectionWipeAction> windowsInformationProtectionWipeActions;
        QList<microsoft::graph::deviceAppManagementTask> deviceAppManagementTasks;
        QList<microsoft::graph::windowsDefenderApplicationControlSupplementalPolicy> wdacSupplementalPolicies;
    };

    struct windowsDefenderApplicationControlSupplementalPolicy : graph::entity {
        QByteArray content;
        QString contentFileName;
        QDateTime creationDateTime;
        QString description;
        QString displayName;
        QDateTime lastModifiedDateTime;
        QList<QString> roleScopeTagIds;
        QString version;
        QList<microsoft::graph::windowsDefenderApplicationControlSupplementalPolicyAssignment> assignments;
        std::unique_ptr<microsoft::graph::windowsDefenderApplicationControlSupplementalPolicyDeploymentSummary> deploySummary;
        QList<microsoft::graph::windowsDefenderApplicationControlSupplementalPolicyDeploymentStatus> deviceStatuses;
    };

    struct iosLobApp : graph::mobileLobApp {
        microsoft::graph::iosDeviceType applicableDeviceType;
        QString buildNumber;
        QString bundleId;
        QDateTime expirationDateTime;
        QString identityVersion;
        microsoft::graph::iosMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString versionNumber;
    };

    struct iosStoreApp : graph::mobileApp {
        microsoft::graph::iosDeviceType applicableDeviceType;
        QString appStoreUrl;
        QString bundleId;
        microsoft::graph::iosMinimumOperatingSystem minimumSupportedOperatingSystem;
    };

    struct iosVppApp : graph::mobileApp {
        microsoft::graph::iosDeviceType applicableDeviceType;
        QString appStoreUrl;
        QString bundleId;
        microsoft::graph::vppLicensingType licensingType;
        QDateTime releaseDateTime;
        QList<microsoft::graph::iosVppAppRevokeLicensesActionResult> revokeLicenseActionResults;
        int totalLicenseCount;
        int usedLicenseCount;
        microsoft::graph::vppTokenAccountType vppTokenAccountType;
        QString vppTokenAppleId;
        QString vppTokenId;
        QString vppTokenOrganizationName;
        QList<microsoft::graph::iosVppAppAssignedLicense> assignedLicenses;
    };

    struct macOSLobApp : graph::mobileLobApp {
        QString buildNumber;
        QString bundleId;
        QList<microsoft::graph::macOSLobChildApp> childApps;
        QString identityVersion;
        bool ignoreVersionDetection;
        bool installAsManaged;
        QList<QString> md5Hash;
        int md5HashChunkSize;
        microsoft::graph::macOSMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString versionNumber;
    };

    struct macOSMdatpApp : graph::mobileApp {
    };

    struct macOSMicrosoftEdgeApp : graph::mobileApp {
        microsoft::graph::microsoftEdgeChannel channel;
    };

    struct macOSOfficeSuiteApp : graph::mobileApp {
    };

    struct macOsVppApp : graph::mobileApp {
        QString appStoreUrl;
        QString bundleId;
        microsoft::graph::vppLicensingType licensingType;
        QDateTime releaseDateTime;
        QList<microsoft::graph::macOsVppAppRevokeLicensesActionResult> revokeLicenseActionResults;
        int totalLicenseCount;
        int usedLicenseCount;
        microsoft::graph::vppTokenAccountType vppTokenAccountType;
        QString vppTokenAppleId;
        QString vppTokenId;
        QString vppTokenOrganizationName;
        QList<microsoft::graph::macOsVppAppAssignedLicense> assignedLicenses;
    };

    struct managedApp : graph::mobileApp {
        microsoft::graph::managedAppAvailability appAvailability;
        QString version;
    };

    struct managedMobileLobApp : graph::managedApp {
        QString committedContentVersion;
        QString fileName;
        long long size;
        QList<microsoft::graph::mobileAppContent> contentVersions;
    };

    struct managedAndroidLobApp : graph::managedMobileLobApp {
        QString identityName;
        QString identityVersion;
        microsoft::graph::androidMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString packageId;
        QString versionCode;
        QString versionName;
    };

    struct managedAndroidStoreApp : graph::managedApp {
        QString appStoreUrl;
        microsoft::graph::androidMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString packageId;
    };

    struct managedIOSLobApp : graph::managedMobileLobApp {
        microsoft::graph::iosDeviceType applicableDeviceType;
        QString buildNumber;
        QString bundleId;
        QDateTime expirationDateTime;
        QString identityVersion;
        microsoft::graph::iosMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString versionNumber;
    };

    struct managedIOSStoreApp : graph::managedApp {
        microsoft::graph::iosDeviceType applicableDeviceType;
        QString appStoreUrl;
        QString bundleId;
        microsoft::graph::iosMinimumOperatingSystem minimumSupportedOperatingSystem;
    };

    struct microsoftStoreForBusinessApp : graph::mobileApp {
        microsoft::graph::microsoftStoreForBusinessLicenseType licenseType;
        microsoft::graph::vppLicensingType licensingType;
        QString packageIdentityName;
        QString productKey;
        int totalLicenseCount;
        int usedLicenseCount;
        QList<microsoft::graph::mobileContainedApp> containedApps;
    };

    struct mobileAppInstallStatus : graph::entity {
        QString deviceId;
        QString deviceName;
        QString displayVersion;
        int errorCode;
        microsoft::graph::resultantAppState installState;
        microsoft::graph::resultantAppStateDetail installStateDetail;
        QDateTime lastSyncDateTime;
        microsoft::graph::resultantAppState mobileAppInstallStatusValue;
        QString osDescription;
        QString osVersion;
        QString userName;
        QString userPrincipalName;
        std::unique_ptr<microsoft::graph::mobileApp> app;
    };

    struct userAppInstallStatus : graph::entity {
        int failedDeviceCount;
        int installedDeviceCount;
        int notInstalledDeviceCount;
        QString userName;
        QString userPrincipalName;
        std::unique_ptr<microsoft::graph::mobileApp> app;
        QList<microsoft::graph::mobileAppInstallStatus> deviceStatuses;
    };

    struct officeSuiteApp : graph::mobileApp {
        bool autoAcceptEula;
        microsoft::graph::excludedApps excludedApps;
        microsoft::graph::officeSuiteInstallProgressDisplayLevel installProgressDisplayLevel;
        QList<QString> localesToInstall;
        QByteArray officeConfigurationXml;
        microsoft::graph::windowsArchitecture officePlatformArchitecture;
        QList<microsoft::graph::officeProductId> productIds;
        bool shouldUninstallOlderVersionsOfOffice;
        QString targetVersion;
        microsoft::graph::officeUpdateChannel updateChannel;
        QString updateVersion;
        bool useSharedComputerActivation;
    };

    struct webApp : graph::mobileApp {
        QString appUrl;
        bool useManagedBrowser;
    };

    struct win32LobApp : graph::mobileLobApp {
        microsoft::graph::windowsArchitecture applicableArchitectures;
        QList<microsoft::graph::win32LobAppDetection> detectionRules;
        QString displayVersion;
        QString installCommandLine;
        microsoft::graph::win32LobAppInstallExperience installExperience;
        int minimumCpuSpeedInMHz;
        int minimumFreeDiskSpaceInMB;
        int minimumMemoryInMB;
        int minimumNumberOfProcessors;
        microsoft::graph::windowsMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString minimumSupportedWindowsRelease;
        microsoft::graph::win32LobAppMsiInformation msiInformation;
        QList<microsoft::graph::win32LobAppRequirement> requirementRules;
        QList<microsoft::graph::win32LobAppReturnCode> returnCodes;
        QList<microsoft::graph::win32LobAppRule> rules;
        QString setupFilePath;
        QString uninstallCommandLine;
    };

    struct windowsAppX : graph::mobileLobApp {
        microsoft::graph::windowsArchitecture applicableArchitectures;
        QString identityName;
        QString identityPublisherHash;
        QString identityResourceIdentifier;
        QString identityVersion;
        bool isBundle;
        microsoft::graph::windowsMinimumOperatingSystem minimumSupportedOperatingSystem;
    };

    struct windowsMicrosoftEdgeApp : graph::mobileApp {
        microsoft::graph::microsoftEdgeChannel channel;
        QString displayLanguageLocale;
    };

    struct windowsMobileMSI : graph::mobileLobApp {
        QString commandLine;
        QString identityVersion;
        bool ignoreVersionDetection;
        QString productCode;
        QString productVersion;
        bool useDeviceContext;
    };

    struct windowsPhone81AppX : graph::mobileLobApp {
        microsoft::graph::windowsArchitecture applicableArchitectures;
        QString identityName;
        QString identityPublisherHash;
        QString identityResourceIdentifier;
        QString identityVersion;
        microsoft::graph::windowsMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString phoneProductIdentifier;
        QString phonePublisherId;
    };

    struct windowsPhone81AppXBundle : graph::windowsPhone81AppX {
        QList<microsoft::graph::windowsPackageInformation> appXPackageInformationList;
    };

    struct windowsPhone81StoreApp : graph::mobileApp {
        QString appStoreUrl;
    };

    struct windowsPhoneXAP : graph::mobileLobApp {
        QString identityVersion;
        microsoft::graph::windowsMinimumOperatingSystem minimumSupportedOperatingSystem;
        QString productIdentifier;
    };

    struct windowsStoreApp : graph::mobileApp {
        QString appStoreUrl;
    };

    struct windowsUniversalAppX : graph::mobileLobApp {
        microsoft::graph::windowsArchitecture applicableArchitectures;
        microsoft::graph::windowsDeviceType applicableDeviceTypes;
        QString identityName;
        QString identityPublisherHash;
        QString identityResourceIdentifier;
        QString identityVersion;
        bool isBundle;
        microsoft::graph::windowsMinimumOperatingSystem minimumSupportedOperatingSystem;
        QList<microsoft::graph::mobileContainedApp> committedContainedApps;
    };

    struct deviceConfigurationGroupAssignment : graph::entity {
        bool excludeGroup;
        QString targetGroupId;
        std::unique_ptr<microsoft::graph::deviceConfiguration> deviceConfiguration;
    };

    struct deviceManagementScriptDeviceState : graph::entity {
        int errorCode;
        QString errorDescription;
        QDateTime lastStateUpdateDateTime;
        QString resultMessage;
        microsoft::graph::runState runState;
        std::unique_ptr<microsoft::graph::managedDevice> managedDevice;
    };

    struct deviceManagementScriptUserState : graph::entity {
        int errorDeviceCount;
        int successDeviceCount;
        QString userPrincipalName;
        QList<microsoft::graph::deviceManagementScriptDeviceState> deviceRunStates;
    };

    struct termsAndConditionsAcceptanceStatus : graph::entity {
        QDateTime acceptedDateTime;
        int acceptedVersion;
        QString userDisplayName;
        QString userPrincipalName;
        std::unique_ptr<microsoft::graph::termsAndConditions> termsAndConditions;
    };

    struct termsAndConditionsGroupAssignment : graph::entity {
        QString targetGroupId;
        std::unique_ptr<microsoft::graph::termsAndConditions> termsAndConditions;
    };

    struct androidCertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::subjectNameFormat subjectNameFormat;
        std::unique_ptr<microsoft::graph::androidTrustedRootCertificate> rootCertificate;
    };

    struct androidTrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct androidCustomConfiguration : graph::deviceConfiguration {
        QList<microsoft::graph::omaSetting> omaSettings;
    };

    struct androidDeviceOwnerCertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::subjectNameFormat subjectNameFormat;
        std::unique_ptr<microsoft::graph::androidDeviceOwnerTrustedRootCertificate> rootCertificate;
    };

    struct androidDeviceOwnerTrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct androidDeviceOwnerDerivedCredentialAuthenticationConfiguration : graph::deviceConfiguration {
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
    };

    struct androidDeviceOwnerWiFiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectWhenNetworkNameIsHidden;
        QString networkName;
        QString preSharedKey;
        bool preSharedKeyIsSet;
        QString ssid;
        microsoft::graph::androidDeviceOwnerWiFiSecurityType wiFiSecurityType;
    };

    struct androidDeviceOwnerEnterpriseWiFiConfiguration : graph::androidDeviceOwnerWiFiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::androidEapType eapType;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;
        microsoft::graph::nonEapAuthenticationMethodForPeap innerAuthenticationProtocolForPeap;
        QString outerIdentityPrivacyTemporaryValue;
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
        std::unique_ptr<microsoft::graph::androidDeviceOwnerCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::androidDeviceOwnerTrustedRootCertificate> rootCertificateForServerValidation;
    };

    struct androidDeviceOwnerGeneralDeviceConfiguration : graph::deviceConfiguration {
        bool accountsBlockModification;
        bool appsAllowInstallFromUnknownSources;
        microsoft::graph::androidDeviceOwnerAppAutoUpdatePolicyType appsAutoUpdatePolicy;
        microsoft::graph::androidDeviceOwnerDefaultAppPermissionPolicyType appsDefaultPermissionPolicy;
        bool appsRecommendSkippingFirstUseHints;
        bool bluetoothBlockConfiguration;
        bool bluetoothBlockContactSharing;
        bool cameraBlocked;
        bool cellularBlockWiFiTethering;
        bool certificateCredentialConfigurationDisabled;
        bool dataRoamingBlocked;
        bool dateTimeConfigurationBlocked;
        microsoft::graph::androidDeviceOwnerEnrollmentProfileType enrollmentProfile;
        bool factoryResetBlocked;
        QList<QString> factoryResetDeviceAdministratorEmails;
        microsoft::graph::androidDeviceOwnerGlobalProxy globalProxy;
        bool googleAccountsBlocked;
        bool kioskCustomizationDeviceSettingsBlocked;
        bool kioskCustomizationPowerButtonActionsBlocked;
        microsoft::graph::androidDeviceOwnerKioskCustomizationStatusBar kioskCustomizationStatusBar;
        bool kioskCustomizationSystemErrorWarnings;
        microsoft::graph::androidDeviceOwnerKioskCustomizationSystemNavigation kioskCustomizationSystemNavigation;
        bool kioskModeAppOrderEnabled;
        QList<microsoft::graph::androidDeviceOwnerKioskModeAppPositionItem> kioskModeAppPositions;
        QList<microsoft::graph::appListItem> kioskModeApps;
        bool kioskModeAppsInFolderOrderedByName;
        bool kioskModeBluetoothConfigurationEnabled;
        bool kioskModeDebugMenuEasyAccessEnabled;
        QString kioskModeExitCode;
        bool kioskModeFlashlightConfigurationEnabled;
        microsoft::graph::androidDeviceOwnerKioskModeFolderIcon kioskModeFolderIcon;
        int kioskModeGridHeight;
        int kioskModeGridWidth;
        microsoft::graph::androidDeviceOwnerKioskModeIconSize kioskModeIconSize;
        bool kioskModeLockHomeScreen;
        QList<microsoft::graph::androidDeviceOwnerKioskModeManagedFolder> kioskModeManagedFolders;
        bool kioskModeManagedHomeScreenAutoSignout;
        int kioskModeManagedHomeScreenInactiveSignOutDelayInSeconds;
        int kioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds;
        microsoft::graph::kioskModeManagedHomeScreenPinComplexity kioskModeManagedHomeScreenPinComplexity;
        bool kioskModeManagedHomeScreenPinRequired;
        bool kioskModeManagedHomeScreenPinRequiredToResume;
        QString kioskModeManagedHomeScreenSignInBackground;
        QString kioskModeManagedHomeScreenSignInBrandingLogo;
        bool kioskModeManagedHomeScreenSignInEnabled;
        bool kioskModeManagedSettingsEntryDisabled;
        bool kioskModeMediaVolumeConfigurationEnabled;
        microsoft::graph::androidDeviceOwnerKioskModeScreenOrientation kioskModeScreenOrientation;
        bool kioskModeScreenSaverConfigurationEnabled;
        bool kioskModeScreenSaverDetectMediaDisabled;
        int kioskModeScreenSaverDisplayTimeInSeconds;
        QString kioskModeScreenSaverImageUrl;
        int kioskModeScreenSaverStartDelayInSeconds;
        bool kioskModeShowAppNotificationBadge;
        bool kioskModeShowDeviceInfo;
        bool kioskModeVirtualHomeButtonEnabled;
        microsoft::graph::androidDeviceOwnerVirtualHomeButtonType kioskModeVirtualHomeButtonType;
        QString kioskModeWallpaperUrl;
        QList<QString> kioskModeWifiAllowedSsids;
        bool kioskModeWiFiConfigurationEnabled;
        bool microphoneForceMute;
        bool microsoftLauncherConfigurationEnabled;
        bool microsoftLauncherCustomWallpaperAllowUserModification;
        bool microsoftLauncherCustomWallpaperEnabled;
        QString microsoftLauncherCustomWallpaperImageUrl;
        bool microsoftLauncherDockPresenceAllowUserModification;
        microsoft::graph::microsoftLauncherDockPresence microsoftLauncherDockPresenceConfiguration;
        bool microsoftLauncherFeedAllowUserModification;
        bool microsoftLauncherFeedEnabled;
        microsoft::graph::microsoftLauncherSearchBarPlacement microsoftLauncherSearchBarPlacementConfiguration;
        bool networkEscapeHatchAllowed;
        bool nfcBlockOutgoingBeam;
        bool passwordBlockKeyguard;
        QList<microsoft::graph::androidKeyguardFeature> passwordBlockKeyguardFeatures;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinimumLetterCharacters;
        int passwordMinimumLowerCaseCharacters;
        int passwordMinimumNonLetterCharacters;
        int passwordMinimumNumericCharacters;
        int passwordMinimumSymbolCharacters;
        int passwordMinimumUpperCaseCharacters;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordCountToBlock;
        microsoft::graph::androidDeviceOwnerRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool personalProfileAppsAllowInstallFromUnknownSources;
        bool personalProfileCameraBlocked;
        bool personalProfileScreenCaptureBlocked;
        microsoft::graph::androidDeviceOwnerPlayStoreMode playStoreMode;
        bool safeBootBlocked;
        bool screenCaptureBlocked;
        bool securityAllowDebuggingFeatures;
        bool securityRequireVerifyApps;
        bool statusBarBlocked;
        QList<microsoft::graph::androidDeviceOwnerBatteryPluggedMode> stayOnModes;
        bool storageAllowUsb;
        bool storageBlockExternalMedia;
        bool storageBlockUsbFileTransfer;
        microsoft::graph::androidDeviceOwnerSystemUpdateInstallType systemUpdateInstallType;
        int systemUpdateWindowEndMinutesAfterMidnight;
        int systemUpdateWindowStartMinutesAfterMidnight;
        bool systemWindowsBlocked;
        bool usersBlockAdd;
        bool usersBlockRemove;
        bool volumeBlockAdjustment;
        bool vpnAlwaysOnLockdownMode;
        QString vpnAlwaysOnPackageIdentifier;
        bool wifiBlockEditConfigurations;
        bool wifiBlockEditPolicyDefinedConfigurations;
        int workProfilePasswordExpirationDays;
        int workProfilePasswordMinimumLength;
        int workProfilePasswordMinimumLetterCharacters;
        int workProfilePasswordMinimumLowerCaseCharacters;
        int workProfilePasswordMinimumNonLetterCharacters;
        int workProfilePasswordMinimumNumericCharacters;
        int workProfilePasswordMinimumSymbolCharacters;
        int workProfilePasswordMinimumUpperCaseCharacters;
        int workProfilePasswordPreviousPasswordCountToBlock;
        microsoft::graph::androidDeviceOwnerRequiredPasswordType workProfilePasswordRequiredType;
        int workProfilePasswordSignInFailureCountBeforeFactoryReset;
    };

    struct androidDeviceOwnerImportedPFXCertificateProfile : graph::androidDeviceOwnerCertificateProfileBase {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidDeviceOwnerPkcsCertificateProfile : graph::androidDeviceOwnerCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        microsoft::graph::deviceManagementCertificationAuthority certificationAuthorityType;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidDeviceOwnerScepCertificateProfile : graph::androidDeviceOwnerCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct vpnConfiguration : graph::deviceConfiguration {
        microsoft::graph::vpnAuthenticationMethod authenticationMethod;
        QString connectionName;
        QString realm;
        QString role;
        QList<microsoft::graph::vpnServer> servers;
    };

    struct androidDeviceOwnerVpnConfiguration : graph::vpnConfiguration {
        bool alwaysOn;
        bool alwaysOnLockdown;
        microsoft::graph::androidVpnConnectionType connectionType;
        QList<microsoft::graph::keyValue> customData;
        QList<microsoft::graph::keyValuePair> customKeyValueData;
        QString microsoftTunnelSiteId;
        microsoft::graph::vpnProxyServer proxyServer;
        QList<microsoft::graph::appListItem> targetedMobileApps;
        QList<QString> targetedPackageIds;
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
        std::unique_ptr<microsoft::graph::androidDeviceOwnerCertificateProfileBase> identityCertificate;
    };

    struct androidEasEmailProfileConfiguration : graph::deviceConfiguration {
        QString accountName;
        microsoft::graph::easAuthenticationMethod authenticationMethod;
        QString customDomainName;
        microsoft::graph::emailSyncDuration durationOfEmailToSync;
        microsoft::graph::userEmailSource emailAddressSource;
        microsoft::graph::emailSyncSchedule emailSyncSchedule;
        QString hostName;
        bool requireSmime;
        bool requireSsl;
        bool syncCalendar;
        bool syncContacts;
        bool syncNotes;
        bool syncTasks;
        microsoft::graph::domainNameSource userDomainNameSource;
        microsoft::graph::androidUsernameSource usernameSource;
        std::unique_ptr<microsoft::graph::androidCertificateProfileBase> identityCertificate;
        std::unique_ptr<microsoft::graph::androidCertificateProfileBase> smimeSigningCertificate;
    };

    struct androidWiFiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectWhenNetworkNameIsHidden;
        QString networkName;
        QString ssid;
        microsoft::graph::androidWiFiSecurityType wiFiSecurityType;
    };

    struct androidEnterpriseWiFiConfiguration : graph::androidWiFiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::androidEapType eapType;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;
        microsoft::graph::nonEapAuthenticationMethodForPeap innerAuthenticationProtocolForPeap;
        QString outerIdentityPrivacyTemporaryValue;
        QString passwordFormatString;
        QString preSharedKey;
        QList<QString> trustedServerCertificateNames;
        QString usernameFormatString;
        std::unique_ptr<microsoft::graph::androidCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::androidTrustedRootCertificate> rootCertificateForServerValidation;
    };

    struct androidForWorkCertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::subjectNameFormat subjectNameFormat;
        std::unique_ptr<microsoft::graph::androidForWorkTrustedRootCertificate> rootCertificate;
    };

    struct androidForWorkTrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct androidForWorkCustomConfiguration : graph::deviceConfiguration {
        QList<microsoft::graph::omaSetting> omaSettings;
    };

    struct androidForWorkEasEmailProfileBase : graph::deviceConfiguration {
        microsoft::graph::easAuthenticationMethod authenticationMethod;
        microsoft::graph::emailSyncDuration durationOfEmailToSync;
        microsoft::graph::userEmailSource emailAddressSource;
        QString hostName;
        bool requireSsl;
        microsoft::graph::androidUsernameSource usernameSource;
        std::unique_ptr<microsoft::graph::androidForWorkCertificateProfileBase> identityCertificate;
    };

    struct androidForWorkWiFiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectWhenNetworkNameIsHidden;
        QString networkName;
        QString ssid;
        microsoft::graph::androidWiFiSecurityType wiFiSecurityType;
    };

    struct androidForWorkEnterpriseWiFiConfiguration : graph::androidForWorkWiFiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::androidEapType eapType;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;
        microsoft::graph::nonEapAuthenticationMethodForPeap innerAuthenticationProtocolForPeap;
        QString outerIdentityPrivacyTemporaryValue;
        QList<QString> trustedServerCertificateNames;
        std::unique_ptr<microsoft::graph::androidForWorkCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::androidForWorkTrustedRootCertificate> rootCertificateForServerValidation;
    };

    struct androidForWorkGeneralDeviceConfiguration : graph::deviceConfiguration {
        bool passwordBlockFaceUnlock;
        bool passwordBlockFingerprintUnlock;
        bool passwordBlockIrisUnlock;
        bool passwordBlockTrustAgents;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordBlockCount;
        microsoft::graph::androidForWorkRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool securityRequireVerifyApps;
        QString vpnAlwaysOnPackageIdentifier;
        bool vpnEnableAlwaysOnLockdownMode;
        bool workProfileAllowWidgets;
        bool workProfileBlockAddingAccounts;
        bool workProfileBlockCamera;
        bool workProfileBlockCrossProfileCallerId;
        bool workProfileBlockCrossProfileContactsSearch;
        bool workProfileBlockCrossProfileCopyPaste;
        bool workProfileBlockNotificationsWhileDeviceLocked;
        bool workProfileBlockPersonalAppInstallsFromUnknownSources;
        bool workProfileBlockScreenCapture;
        bool workProfileBluetoothEnableContactSharing;
        microsoft::graph::androidForWorkCrossProfileDataSharingType workProfileDataSharingType;
        microsoft::graph::androidForWorkDefaultAppPermissionPolicyType workProfileDefaultAppPermissionPolicy;
        bool workProfilePasswordBlockFaceUnlock;
        bool workProfilePasswordBlockFingerprintUnlock;
        bool workProfilePasswordBlockIrisUnlock;
        bool workProfilePasswordBlockTrustAgents;
        int workProfilePasswordExpirationDays;
        int workProfilePasswordMinimumLength;
        int workProfilePasswordMinLetterCharacters;
        int workProfilePasswordMinLowerCaseCharacters;
        int workProfilePasswordMinNonLetterCharacters;
        int workProfilePasswordMinNumericCharacters;
        int workProfilePasswordMinSymbolCharacters;
        int workProfilePasswordMinUpperCaseCharacters;
        int workProfilePasswordMinutesOfInactivityBeforeScreenTimeout;
        int workProfilePasswordPreviousPasswordBlockCount;
        microsoft::graph::androidForWorkRequiredPasswordType workProfilePasswordRequiredType;
        int workProfilePasswordSignInFailureCountBeforeFactoryReset;
        bool workProfileRequirePassword;
    };

    struct androidForWorkGmailEasConfiguration : graph::androidForWorkEasEmailProfileBase {
    };

    struct androidForWorkImportedPFXCertificateProfile : graph::androidCertificateProfileBase {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidForWorkNineWorkEasConfiguration : graph::androidForWorkEasEmailProfileBase {
        bool syncCalendar;
        bool syncContacts;
        bool syncTasks;
    };

    struct androidForWorkPkcsCertificateProfile : graph::androidForWorkCertificateProfileBase {
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        QString subjectAlternativeNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidForWorkScepCertificateProfile : graph::androidForWorkCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidForWorkVpnConfiguration : graph::deviceConfiguration {
        microsoft::graph::vpnAuthenticationMethod authenticationMethod;
        QString connectionName;
        microsoft::graph::androidForWorkVpnConnectionType connectionType;
        QList<microsoft::graph::keyValue> customData;
        QList<microsoft::graph::keyValuePair> customKeyValueData;
        QString fingerprint;
        QString realm;
        QString role;
        QList<microsoft::graph::vpnServer> servers;
        std::unique_ptr<microsoft::graph::androidForWorkCertificateProfileBase> identityCertificate;
    };

    struct androidGeneralDeviceConfiguration : graph::deviceConfiguration {
        bool appsBlockClipboardSharing;
        bool appsBlockCopyPaste;
        bool appsBlockYouTube;
        QList<microsoft::graph::appListItem> appsHideList;
        QList<microsoft::graph::appListItem> appsInstallAllowList;
        QList<microsoft::graph::appListItem> appsLaunchBlockList;
        bool bluetoothBlocked;
        bool cameraBlocked;
        bool cellularBlockDataRoaming;
        bool cellularBlockMessaging;
        bool cellularBlockVoiceRoaming;
        bool cellularBlockWiFiTethering;
        microsoft::graph::appListType compliantAppListType;
        QList<microsoft::graph::appListItem> compliantAppsList;
        bool dateAndTimeBlockChanges;
        bool deviceSharingAllowed;
        bool diagnosticDataBlockSubmission;
        bool factoryResetBlocked;
        bool googleAccountBlockAutoSync;
        bool googlePlayStoreBlocked;
        QList<microsoft::graph::appListItem> kioskModeApps;
        bool kioskModeBlockSleepButton;
        bool kioskModeBlockVolumeButtons;
        bool locationServicesBlocked;
        bool nfcBlocked;
        bool passwordBlockFingerprintUnlock;
        bool passwordBlockTrustAgents;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::androidRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool powerOffBlocked;
        microsoft::graph::androidRequiredPasswordComplexity requiredPasswordComplexity;
        bool screenCaptureBlocked;
        bool securityRequireVerifyApps;
        bool storageBlockGoogleBackup;
        bool storageBlockRemovableStorage;
        bool storageRequireDeviceEncryption;
        bool storageRequireRemovableStorageEncryption;
        bool voiceAssistantBlocked;
        bool voiceDialingBlocked;
        bool webBrowserBlockAutofill;
        bool webBrowserBlocked;
        bool webBrowserBlockJavaScript;
        bool webBrowserBlockPopups;
        microsoft::graph::webBrowserCookieSettings webBrowserCookieSettings;
        bool wiFiBlocked;
    };

    struct androidImportedPFXCertificateProfile : graph::androidCertificateProfileBase {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidOmaCpConfiguration : graph::deviceConfiguration {
        QByteArray configurationXml;
    };

    struct androidPkcsCertificateProfile : graph::androidCertificateProfileBase {
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        QString subjectAlternativeNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidScepCertificateProfile : graph::androidCertificateProfileBase {
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidVpnConfiguration : graph::deviceConfiguration {
        microsoft::graph::vpnAuthenticationMethod authenticationMethod;
        QString connectionName;
        microsoft::graph::androidVpnConnectionType connectionType;
        QList<microsoft::graph::keyValue> customData;
        QList<microsoft::graph::keyValuePair> customKeyValueData;
        QString fingerprint;
        QString realm;
        QString role;
        QList<microsoft::graph::vpnServer> servers;
        std::unique_ptr<microsoft::graph::androidCertificateProfileBase> identityCertificate;
    };

    struct androidWorkProfileCertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::subjectNameFormat subjectNameFormat;
        std::unique_ptr<microsoft::graph::androidWorkProfileTrustedRootCertificate> rootCertificate;
    };

    struct androidWorkProfileTrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct androidWorkProfileCustomConfiguration : graph::deviceConfiguration {
        QList<microsoft::graph::omaSetting> omaSettings;
    };

    struct androidWorkProfileEasEmailProfileBase : graph::deviceConfiguration {
        microsoft::graph::easAuthenticationMethod authenticationMethod;
        microsoft::graph::emailSyncDuration durationOfEmailToSync;
        microsoft::graph::userEmailSource emailAddressSource;
        QString hostName;
        bool requireSsl;
        microsoft::graph::androidUsernameSource usernameSource;
        std::unique_ptr<microsoft::graph::androidWorkProfileCertificateProfileBase> identityCertificate;
    };

    struct androidWorkProfileWiFiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectWhenNetworkNameIsHidden;
        QString networkName;
        QString ssid;
        microsoft::graph::androidWiFiSecurityType wiFiSecurityType;
    };

    struct androidWorkProfileEnterpriseWiFiConfiguration : graph::androidWorkProfileWiFiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::androidEapType eapType;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;
        microsoft::graph::nonEapAuthenticationMethodForPeap innerAuthenticationProtocolForPeap;
        QString outerIdentityPrivacyTemporaryValue;
        QString proxyAutomaticConfigurationUrl;
        microsoft::graph::wiFiProxySetting proxySettings;
        QList<QString> trustedServerCertificateNames;
        std::unique_ptr<microsoft::graph::androidWorkProfileCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::androidWorkProfileTrustedRootCertificate> rootCertificateForServerValidation;
    };

    struct androidWorkProfileGeneralDeviceConfiguration : graph::deviceConfiguration {
        bool passwordBlockFaceUnlock;
        bool passwordBlockFingerprintUnlock;
        bool passwordBlockIrisUnlock;
        bool passwordBlockTrustAgents;
        int passwordExpirationDays;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordBlockCount;
        microsoft::graph::androidWorkProfileRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool securityRequireVerifyApps;
        QString vpnAlwaysOnPackageIdentifier;
        bool vpnEnableAlwaysOnLockdownMode;
        bool workProfileAllowAppInstallsFromUnknownSources;
        bool workProfileAllowWidgets;
        bool workProfileBlockAddingAccounts;
        bool workProfileBlockCamera;
        bool workProfileBlockCrossProfileCallerId;
        bool workProfileBlockCrossProfileContactsSearch;
        bool workProfileBlockCrossProfileCopyPaste;
        bool workProfileBlockNotificationsWhileDeviceLocked;
        bool workProfileBlockPersonalAppInstallsFromUnknownSources;
        bool workProfileBlockScreenCapture;
        bool workProfileBluetoothEnableContactSharing;
        microsoft::graph::androidWorkProfileCrossProfileDataSharingType workProfileDataSharingType;
        microsoft::graph::androidWorkProfileDefaultAppPermissionPolicyType workProfileDefaultAppPermissionPolicy;
        bool workProfilePasswordBlockFaceUnlock;
        bool workProfilePasswordBlockFingerprintUnlock;
        bool workProfilePasswordBlockIrisUnlock;
        bool workProfilePasswordBlockTrustAgents;
        int workProfilePasswordExpirationDays;
        int workProfilePasswordMinimumLength;
        int workProfilePasswordMinLetterCharacters;
        int workProfilePasswordMinLowerCaseCharacters;
        int workProfilePasswordMinNonLetterCharacters;
        int workProfilePasswordMinNumericCharacters;
        int workProfilePasswordMinSymbolCharacters;
        int workProfilePasswordMinUpperCaseCharacters;
        int workProfilePasswordMinutesOfInactivityBeforeScreenTimeout;
        int workProfilePasswordPreviousPasswordBlockCount;
        microsoft::graph::androidWorkProfileRequiredPasswordType workProfilePasswordRequiredType;
        int workProfilePasswordSignInFailureCountBeforeFactoryReset;
        bool workProfileRequirePassword;
    };

    struct androidWorkProfileGmailEasConfiguration : graph::androidWorkProfileEasEmailProfileBase {
    };

    struct androidWorkProfileNineWorkEasConfiguration : graph::androidWorkProfileEasEmailProfileBase {
        bool syncCalendar;
        bool syncContacts;
        bool syncTasks;
    };

    struct androidWorkProfilePkcsCertificateProfile : graph::androidWorkProfileCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidWorkProfileScepCertificateProfile : graph::androidWorkProfileCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct androidWorkProfileVpnConfiguration : graph::deviceConfiguration {
        bool alwaysOn;
        bool alwaysOnLockdown;
        microsoft::graph::vpnAuthenticationMethod authenticationMethod;
        QString connectionName;
        microsoft::graph::androidWorkProfileVpnConnectionType connectionType;
        QList<microsoft::graph::keyValue> customData;
        QList<microsoft::graph::keyValuePair> customKeyValueData;
        QString fingerprint;
        QString microsoftTunnelSiteId;
        microsoft::graph::vpnProxyServer proxyServer;
        QString realm;
        QString role;
        QList<microsoft::graph::vpnServer> servers;
        QList<microsoft::graph::appListItem> targetedMobileApps;
        QList<QString> targetedPackageIds;
        std::unique_ptr<microsoft::graph::androidWorkProfileCertificateProfileBase> identityCertificate;
    };

    struct aospDeviceOwnerDeviceConfiguration : graph::deviceConfiguration {
        bool appsAllowInstallFromUnknownSources;
        bool backupBlocked;
        bool bluetoothBlockConfiguration;
        bool bluetoothBlockContactSharing;
        bool bluetoothBlocked;
        bool cameraBlocked;
        bool cellularBlockWiFiTethering;
        bool factoryResetBlocked;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        microsoft::graph::androidDeviceOwnerRequiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool screenCaptureBlocked;
        bool securityAllowDebuggingFeatures;
        bool storageAllowUsb;
        bool storageBlockExternalMedia;
        bool storageBlockUsbFileTransfer;
        bool wifiBlockEditConfigurations;
    };

    struct appleDeviceFeaturesConfigurationBase : graph::deviceConfiguration {
        QList<microsoft::graph::airPrintDestination> airPrintDestinations;
    };

    struct appleExpeditedCheckinConfigurationBase : graph::deviceConfiguration {
        bool enableExpeditedCheckin;
    };

    struct appleVpnConfiguration : graph::deviceConfiguration {
        QList<QString> associatedDomains;
        microsoft::graph::vpnAuthenticationMethod authenticationMethod;
        QString connectionName;
        microsoft::graph::appleVpnConnectionType connectionType;
        QList<microsoft::graph::keyValue> customData;
        QList<microsoft::graph::keyValuePair> customKeyValueData;
        bool disableOnDemandUserOverride;
        bool disconnectOnIdle;
        int disconnectOnIdleTimerInSeconds;
        bool enablePerApp;
        bool enableSplitTunneling;
        QList<QString> excludedDomains;
        QString identifier;
        QString loginGroupOrDomain;
        QList<microsoft::graph::vpnOnDemandRule> onDemandRules;
        bool optInToDeviceIdSharing;
        microsoft::graph::vpnProviderType providerType;
        microsoft::graph::vpnProxyServer proxyServer;
        QString realm;
        QString role;
        QList<QString> safariDomains;
        microsoft::graph::vpnServer server;
    };

    struct easEmailProfileConfigurationBase : graph::deviceConfiguration {
        QString customDomainName;
        microsoft::graph::domainNameSource userDomainNameSource;
        microsoft::graph::usernameSource usernameAADSource;
        microsoft::graph::userEmailSource usernameSource;
    };

    struct editionUpgradeConfiguration : graph::deviceConfiguration {
        QString license;
        microsoft::graph::editionUpgradeLicenseType licenseType;
        QString productKey;
        microsoft::graph::windows10EditionType targetEdition;
        microsoft::graph::windowsSModeConfiguration windowsSMode;
    };

    struct iosCertificateProfile : graph::deviceConfiguration {
    };

    struct iosCertificateProfileBase : graph::iosCertificateProfile {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::appleSubjectNameFormat subjectNameFormat;
    };

    struct iosCustomConfiguration : graph::deviceConfiguration {
        QByteArray payload;
        QString payloadFileName;
        QString payloadName;
    };

    struct iosDerivedCredentialAuthenticationConfiguration : graph::deviceConfiguration {
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
    };

    struct iosDeviceFeaturesConfiguration : graph::appleDeviceFeaturesConfigurationBase {
        QString assetTagTemplate;
        microsoft::graph::iosWebContentFilterBase contentFilterSettings;
        QList<microsoft::graph::iosHomeScreenItem> homeScreenDockIcons;
        int homeScreenGridHeight;
        int homeScreenGridWidth;
        QList<microsoft::graph::iosHomeScreenPage> homeScreenPages;
        microsoft::graph::iosSingleSignOnExtension iosSingleSignOnExtension;
        QString lockScreenFootnote;
        QList<microsoft::graph::iosNotificationSettings> notificationSettings;
        microsoft::graph::singleSignOnExtension singleSignOnExtension;
        microsoft::graph::iosSingleSignOnSettings singleSignOnSettings;
        microsoft::graph::iosWallpaperDisplayLocation wallpaperDisplayLocation;
        microsoft::graph::mimeContent wallpaperImage;
        std::unique_ptr<microsoft::graph::iosCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::iosCertificateProfileBase> singleSignOnExtensionPkinitCertificate;
    };

    struct iosEasEmailProfileConfiguration : graph::easEmailProfileConfigurationBase {
        QString accountName;
        microsoft::graph::easAuthenticationMethod authenticationMethod;
        bool blockMovingMessagesToOtherEmailAccounts;
        bool blockSendingEmailFromThirdPartyApps;
        bool blockSyncingRecentlyUsedEmailAddresses;
        microsoft::graph::emailSyncDuration durationOfEmailToSync;
        microsoft::graph::easServices easServices;
        bool easServicesUserOverrideEnabled;
        microsoft::graph::userEmailSource emailAddressSource;
        microsoft::graph::emailCertificateType encryptionCertificateType;
        QString hostName;
        QString perAppVPNProfileId;
        bool requireSmime;
        bool requireSsl;
        microsoft::graph::emailCertificateType signingCertificateType;
        bool smimeEnablePerMessageSwitch;
        bool smimeEncryptByDefaultEnabled;
        bool smimeEncryptByDefaultUserOverrideEnabled;
        bool smimeEncryptionCertificateUserOverrideEnabled;
        bool smimeSigningCertificateUserOverrideEnabled;
        bool smimeSigningEnabled;
        bool smimeSigningUserOverrideEnabled;
        bool useOAuth;
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
        std::unique_ptr<microsoft::graph::iosCertificateProfileBase> identityCertificate;
        std::unique_ptr<microsoft::graph::iosCertificateProfile> smimeEncryptionCertificate;
        std::unique_ptr<microsoft::graph::iosCertificateProfile> smimeSigningCertificate;
    };

    struct iosEducationDeviceConfiguration : graph::deviceConfiguration {
    };

    struct iosEduDeviceConfiguration : graph::deviceConfiguration {
        microsoft::graph::iosEduCertificateSettings deviceCertificateSettings;
        microsoft::graph::iosEduCertificateSettings studentCertificateSettings;
        microsoft::graph::iosEduCertificateSettings teacherCertificateSettings;
    };

    struct iosWiFiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectWhenNetworkNameIsHidden;
        bool disableMacAddressRandomization;
        QString networkName;
        QString preSharedKey;
        QString proxyAutomaticConfigurationUrl;
        QString proxyManualAddress;
        int proxyManualPort;
        microsoft::graph::wiFiProxySetting proxySettings;
        QString ssid;
        microsoft::graph::wiFiSecurityType wiFiSecurityType;
    };

    struct iosEnterpriseWiFiConfiguration : graph::iosWiFiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::eapFastConfiguration eapFastConfiguration;
        microsoft::graph::eapType eapType;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;
        QString outerIdentityPrivacyTemporaryValue;
        QString passwordFormatString;
        QList<QString> trustedServerCertificateNames;
        QString usernameFormatString;
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
        std::unique_ptr<microsoft::graph::iosCertificateProfileBase> identityCertificateForClientAuthentication;
        QList<microsoft::graph::iosTrustedRootCertificate> rootCertificatesForServerValidation;
    };

    struct iosTrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct iosExpeditedCheckinConfiguration : graph::appleExpeditedCheckinConfigurationBase {
    };

    struct iosGeneralDeviceConfiguration : graph::deviceConfiguration {
        bool accountBlockModification;
        bool activationLockAllowWhenSupervised;
        bool airDropBlocked;
        bool airDropForceUnmanagedDropTarget;
        bool airPlayForcePairingPasswordForOutgoingRequests;
        bool airPrintBlockCredentialsStorage;
        bool airPrintBlocked;
        bool airPrintBlockiBeaconDiscovery;
        bool airPrintForceTrustedTLS;
        bool appClipsBlocked;
        bool appleNewsBlocked;
        bool applePersonalizedAdsBlocked;
        bool appleWatchBlockPairing;
        bool appleWatchForceWristDetection;
        bool appRemovalBlocked;
        QList<microsoft::graph::appListItem> appsSingleAppModeList;
        bool appStoreBlockAutomaticDownloads;
        bool appStoreBlocked;
        bool appStoreBlockInAppPurchases;
        bool appStoreBlockUIAppInstallation;
        bool appStoreRequirePassword;
        QList<microsoft::graph::appListItem> appsVisibilityList;
        microsoft::graph::appListType appsVisibilityListType;
        bool autoFillForceAuthentication;
        bool autoUnlockBlocked;
        bool blockSystemAppRemoval;
        bool bluetoothBlockModification;
        bool cameraBlocked;
        bool cellularBlockDataRoaming;
        bool cellularBlockGlobalBackgroundFetchWhileRoaming;
        bool cellularBlockPerAppDataModification;
        bool cellularBlockPersonalHotspot;
        bool cellularBlockPersonalHotspotModification;
        bool cellularBlockPlanModification;
        bool cellularBlockVoiceRoaming;
        bool certificatesBlockUntrustedTlsCertificates;
        bool classroomAppBlockRemoteScreenObservation;
        bool classroomAppForceUnpromptedScreenObservation;
        bool classroomForceAutomaticallyJoinClasses;
        bool classroomForceRequestPermissionToLeaveClasses;
        bool classroomForceUnpromptedAppAndDeviceLock;
        microsoft::graph::appListType compliantAppListType;
        QList<microsoft::graph::appListItem> compliantAppsList;
        bool configurationProfileBlockChanges;
        bool contactsAllowManagedToUnmanagedWrite;
        bool contactsAllowUnmanagedToManagedRead;
        bool continuousPathKeyboardBlocked;
        bool dateAndTimeForceSetAutomatically;
        bool definitionLookupBlocked;
        bool deviceBlockEnableRestrictions;
        bool deviceBlockEraseContentAndSettings;
        bool deviceBlockNameModification;
        bool diagnosticDataBlockSubmission;
        bool diagnosticDataBlockSubmissionModification;
        bool documentsBlockManagedDocumentsInUnmanagedApps;
        bool documentsBlockUnmanagedDocumentsInManagedApps;
        QList<QString> emailInDomainSuffixes;
        bool enterpriseAppBlockTrust;
        bool enterpriseAppBlockTrustModification;
        bool enterpriseBookBlockBackup;
        bool enterpriseBookBlockMetadataSync;
        bool esimBlockModification;
        bool faceTimeBlocked;
        bool filesNetworkDriveAccessBlocked;
        bool filesUsbDriveAccessBlocked;
        bool findMyDeviceInFindMyAppBlocked;
        bool findMyFriendsBlocked;
        bool findMyFriendsInFindMyAppBlocked;
        bool gameCenterBlocked;
        bool gamingBlockGameCenterFriends;
        bool gamingBlockMultiplayer;
        bool hostPairingBlocked;
        bool iBooksStoreBlocked;
        bool iBooksStoreBlockErotica;
        bool iCloudBlockActivityContinuation;
        bool iCloudBlockBackup;
        bool iCloudBlockDocumentSync;
        bool iCloudBlockManagedAppsSync;
        bool iCloudBlockPhotoLibrary;
        bool iCloudBlockPhotoStreamSync;
        bool iCloudBlockSharedPhotoStream;
        bool iCloudRequireEncryptedBackup;
        bool iTunesBlocked;
        bool iTunesBlockExplicitContent;
        bool iTunesBlockMusicService;
        bool iTunesBlockRadio;
        bool keyboardBlockAutoCorrect;
        bool keyboardBlockDictation;
        bool keyboardBlockPredictive;
        bool keyboardBlockShortcuts;
        bool keyboardBlockSpellCheck;
        bool keychainBlockCloudSync;
        bool kioskModeAllowAssistiveSpeak;
        bool kioskModeAllowAssistiveTouchSettings;
        bool kioskModeAllowAutoLock;
        bool kioskModeAllowColorInversionSettings;
        bool kioskModeAllowRingerSwitch;
        bool kioskModeAllowScreenRotation;
        bool kioskModeAllowSleepButton;
        bool kioskModeAllowTouchscreen;
        bool kioskModeAllowVoiceControlModification;
        bool kioskModeAllowVoiceOverSettings;
        bool kioskModeAllowVolumeButtons;
        bool kioskModeAllowZoomSettings;
        QString kioskModeAppStoreUrl;
        microsoft::graph::iosKioskModeAppType kioskModeAppType;
        bool kioskModeBlockAutoLock;
        bool kioskModeBlockRingerSwitch;
        bool kioskModeBlockScreenRotation;
        bool kioskModeBlockSleepButton;
        bool kioskModeBlockTouchscreen;
        bool kioskModeBlockVolumeButtons;
        QString kioskModeBuiltInAppId;
        bool kioskModeEnableVoiceControl;
        QString kioskModeManagedAppId;
        bool kioskModeRequireAssistiveTouch;
        bool kioskModeRequireColorInversion;
        bool kioskModeRequireMonoAudio;
        bool kioskModeRequireVoiceOver;
        bool kioskModeRequireZoom;
        bool lockScreenBlockControlCenter;
        bool lockScreenBlockNotificationView;
        bool lockScreenBlockPassbook;
        bool lockScreenBlockTodayView;
        bool managedPasteboardRequired;
        microsoft::graph::ratingAppsType mediaContentRatingApps;
        microsoft::graph::mediaContentRatingAustralia mediaContentRatingAustralia;
        microsoft::graph::mediaContentRatingCanada mediaContentRatingCanada;
        microsoft::graph::mediaContentRatingFrance mediaContentRatingFrance;
        microsoft::graph::mediaContentRatingGermany mediaContentRatingGermany;
        microsoft::graph::mediaContentRatingIreland mediaContentRatingIreland;
        microsoft::graph::mediaContentRatingJapan mediaContentRatingJapan;
        microsoft::graph::mediaContentRatingNewZealand mediaContentRatingNewZealand;
        microsoft::graph::mediaContentRatingUnitedKingdom mediaContentRatingUnitedKingdom;
        microsoft::graph::mediaContentRatingUnitedStates mediaContentRatingUnitedStates;
        bool messagesBlocked;
        QList<microsoft::graph::iosNetworkUsageRule> networkUsageRules;
        bool nfcBlocked;
        bool notificationsBlockSettingsModification;
        bool onDeviceOnlyDictationForced;
        bool onDeviceOnlyTranslationForced;
        bool passcodeBlockFingerprintModification;
        bool passcodeBlockFingerprintUnlock;
        bool passcodeBlockModification;
        bool passcodeBlockSimple;
        int passcodeExpirationDays;
        int passcodeMinimumCharacterSetCount;
        int passcodeMinimumLength;
        int passcodeMinutesOfInactivityBeforeLock;
        int passcodeMinutesOfInactivityBeforeScreenTimeout;
        int passcodePreviousPasscodeBlockCount;
        bool passcodeRequired;
        microsoft::graph::requiredPasswordType passcodeRequiredType;
        int passcodeSignInFailureCountBeforeWipe;
        bool passwordBlockAirDropSharing;
        bool passwordBlockAutoFill;
        bool passwordBlockProximityRequests;
        bool pkiBlockOTAUpdates;
        bool podcastsBlocked;
        bool privacyForceLimitAdTracking;
        bool proximityBlockSetupToNewDevice;
        bool safariBlockAutofill;
        bool safariBlocked;
        bool safariBlockJavaScript;
        bool safariBlockPopups;
        microsoft::graph::webBrowserCookieSettings safariCookieSettings;
        QList<QString> safariManagedDomains;
        QList<QString> safariPasswordAutoFillDomains;
        bool safariRequireFraudWarning;
        bool screenCaptureBlocked;
        bool sharedDeviceBlockTemporarySessions;
        bool siriBlocked;
        bool siriBlockedWhenLocked;
        bool siriBlockUserGeneratedContent;
        bool siriRequireProfanityFilter;
        int softwareUpdatesEnforcedDelayInDays;
        bool softwareUpdatesForceDelayed;
        bool spotlightBlockInternetResults;
        bool unpairedExternalBootToRecoveryAllowed;
        bool usbRestrictedModeBlocked;
        bool voiceDialingBlocked;
        bool vpnBlockCreation;
        bool wallpaperBlockModification;
        bool wiFiConnectOnlyToConfiguredNetworks;
        bool wiFiConnectToAllowedNetworksOnlyForced;
        bool wifiPowerOnForced;
    };

    struct iosVpnConfiguration : graph::appleVpnConfiguration {
        QString cloudName;
        QList<QString> excludeList;
        QString microsoftTunnelSiteId;
        bool strictEnforcement;
        QList<microsoft::graph::appListItem> targetedMobileApps;
        QString userDomain;
        std::unique_ptr<microsoft::graph::deviceManagementDerivedCredentialSettings> derivedCredentialSettings;
        std::unique_ptr<microsoft::graph::iosCertificateProfileBase> identityCertificate;
    };

    struct iosikEv2VpnConfiguration : graph::iosVpnConfiguration {
        bool allowDefaultChildSecurityAssociationParameters;
        bool allowDefaultSecurityAssociationParameters;
        microsoft::graph::appleVpnAlwaysOnConfiguration alwaysOnConfiguration;
        microsoft::graph::iosVpnSecurityAssociationParameters childSecurityAssociationParameters;
        microsoft::graph::vpnClientAuthenticationType clientAuthenticationType;
        microsoft::graph::vpnDeadPeerDetectionRate deadPeerDetectionRate;
        bool disableMobilityAndMultihoming;
        bool disableRedirect;
        bool enableAlwaysOnConfiguration;
        bool enableCertificateRevocationCheck;
        bool enableEAP;
        bool enablePerfectForwardSecrecy;
        bool enableUseInternalSubnetAttributes;
        microsoft::graph::vpnLocalIdentifier localIdentifier;
        int mtuSizeInBytes;
        QString remoteIdentifier;
        microsoft::graph::iosVpnSecurityAssociationParameters securityAssociationParameters;
        QString serverCertificateCommonName;
        QString serverCertificateIssuerCommonName;
        microsoft::graph::vpnServerCertificateType serverCertificateType;
        QString sharedSecret;
        QString tlsMaximumVersion;
        QString tlsMinimumVersion;
    };

    struct iosImportedPFXCertificateProfile : graph::iosCertificateProfile {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct iosPkcsCertificateProfile : graph::iosCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct iosScepCertificateProfile : graph::iosCertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
        std::unique_ptr<microsoft::graph::iosTrustedRootCertificate> rootCertificate;
    };

    struct iosUpdateConfiguration : graph::deviceConfiguration {
        QTime activeHoursEnd;
        QTime activeHoursStart;
        QList<microsoft::graph::customUpdateTimeWindow> customUpdateTimeWindows;
        QString desiredOsVersion;
        int enforcedSoftwareUpdateDelayInDays;
        bool isEnabled;
        QList<microsoft::graph::dayOfWeek> scheduledInstallDays;
        microsoft::graph::iosSoftwareUpdateScheduleType updateScheduleType;
        int utcTimeOffsetInMinutes;
    };

    struct macOSCertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::appleSubjectNameFormat subjectNameFormat;
    };

    struct macOSCustomAppConfiguration : graph::deviceConfiguration {
        QString bundleId;
        QByteArray configurationXml;
        QString fileName;
    };

    struct macOSCustomConfiguration : graph::deviceConfiguration {
        microsoft::graph::appleDeploymentChannel deploymentChannel;
        QByteArray payload;
        QString payloadFileName;
        QString payloadName;
    };

    struct macOSDeviceFeaturesConfiguration : graph::appleDeviceFeaturesConfigurationBase {
        bool adminShowHostInfo;
        QList<microsoft::graph::macOSAssociatedDomainsItem> appAssociatedDomains;
        QList<microsoft::graph::keyValuePair> associatedDomains;
        bool authorizedUsersListHidden;
        bool authorizedUsersListHideAdminUsers;
        bool authorizedUsersListHideLocalUsers;
        bool authorizedUsersListHideMobileAccounts;
        bool authorizedUsersListIncludeNetworkUsers;
        bool authorizedUsersListShowOtherManagedUsers;
        QList<microsoft::graph::macOSLaunchItem> autoLaunchItems;
        bool consoleAccessDisabled;
        bool contentCachingBlockDeletion;
        QList<microsoft::graph::ipRange> contentCachingClientListenRanges;
        microsoft::graph::macOSContentCachingClientPolicy contentCachingClientPolicy;
        QString contentCachingDataPath;
        bool contentCachingDisableConnectionSharing;
        bool contentCachingEnabled;
        bool contentCachingForceConnectionSharing;
        bool contentCachingKeepAwake;
        bool contentCachingLogClientIdentities;
        int contentCachingMaxSizeBytes;
        QList<QString> contentCachingParents;
        microsoft::graph::macOSContentCachingParentSelectionPolicy contentCachingParentSelectionPolicy;
        QList<microsoft::graph::ipRange> contentCachingPeerFilterRanges;
        QList<microsoft::graph::ipRange> contentCachingPeerListenRanges;
        microsoft::graph::macOSContentCachingPeerPolicy contentCachingPeerPolicy;
        int contentCachingPort;
        QList<microsoft::graph::ipRange> contentCachingPublicRanges;
        bool contentCachingShowAlerts;
        microsoft::graph::macOSContentCachingType contentCachingType;
        QString loginWindowText;
        bool logOutDisabledWhileLoggedIn;
        microsoft::graph::macOSSingleSignOnExtension macOSSingleSignOnExtension;
        bool powerOffDisabledWhileLoggedIn;
        bool restartDisabled;
        bool restartDisabledWhileLoggedIn;
        bool screenLockDisableImmediate;
        bool shutDownDisabled;
        bool shutDownDisabledWhileLoggedIn;
        microsoft::graph::singleSignOnExtension singleSignOnExtension;
        bool sleepDisabled;
        std::unique_ptr<microsoft::graph::macOSCertificateProfileBase> singleSignOnExtensionPkinitCertificate;
    };

    struct macOSEndpointProtectionConfiguration : graph::deviceConfiguration {
        microsoft::graph::enablement advancedThreatProtectionAutomaticSampleSubmission;
        microsoft::graph::enablement advancedThreatProtectionCloudDelivered;
        microsoft::graph::enablement advancedThreatProtectionDiagnosticDataCollection;
        QList<QString> advancedThreatProtectionExcludedExtensions;
        QList<QString> advancedThreatProtectionExcludedFiles;
        QList<QString> advancedThreatProtectionExcludedFolders;
        QList<QString> advancedThreatProtectionExcludedProcesses;
        microsoft::graph::enablement advancedThreatProtectionRealTime;
        bool fileVaultAllowDeferralUntilSignOut;
        bool fileVaultDisablePromptAtSignOut;
        bool fileVaultEnabled;
        bool fileVaultHidePersonalRecoveryKey;
        QByteArray fileVaultInstitutionalRecoveryKeyCertificate;
        QString fileVaultInstitutionalRecoveryKeyCertificateFileName;
        int fileVaultNumberOfTimesUserCanIgnore;
        QString fileVaultPersonalRecoveryKeyHelpMessage;
        int fileVaultPersonalRecoveryKeyRotationInMonths;
        microsoft::graph::macOSFileVaultRecoveryKeyTypes fileVaultSelectedRecoveryKeyTypes;
        QList<microsoft::graph::macOSFirewallApplication> firewallApplications;
        bool firewallBlockAllIncoming;
        bool firewallEnabled;
        bool firewallEnableStealthMode;
        microsoft::graph::macOSGatekeeperAppSources gatekeeperAllowedAppSource;
        bool gatekeeperBlockOverride;
    };

    struct macOSWiFiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectWhenNetworkNameIsHidden;
        QString networkName;
        QString preSharedKey;
        QString proxyAutomaticConfigurationUrl;
        QString proxyManualAddress;
        int proxyManualPort;
        microsoft::graph::wiFiProxySetting proxySettings;
        QString ssid;
        microsoft::graph::wiFiSecurityType wiFiSecurityType;
    };

    struct macOSEnterpriseWiFiConfiguration : graph::macOSWiFiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::eapFastConfiguration eapFastConfiguration;
        microsoft::graph::eapType eapType;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEapTtls;
        QString outerIdentityPrivacyTemporaryValue;
        QList<QString> trustedServerCertificateNames;
        std::unique_ptr<microsoft::graph::macOSCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::macOSTrustedRootCertificate> rootCertificateForServerValidation;
        QList<microsoft::graph::macOSTrustedRootCertificate> rootCertificatesForServerValidation;
    };

    struct macOSTrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct macOSExtensionsConfiguration : graph::deviceConfiguration {
        QList<QString> kernelExtensionAllowedTeamIdentifiers;
        bool kernelExtensionOverridesAllowed;
        QList<microsoft::graph::macOSKernelExtension> kernelExtensionsAllowed;
        QList<microsoft::graph::macOSSystemExtension> systemExtensionsAllowed;
        QList<QString> systemExtensionsAllowedTeamIdentifiers;
        QList<microsoft::graph::macOSSystemExtensionTypeMapping> systemExtensionsAllowedTypes;
        bool systemExtensionsBlockOverride;
    };

    struct macOSGeneralDeviceConfiguration : graph::deviceConfiguration {
        bool addingGameCenterFriendsBlocked;
        bool airDropBlocked;
        bool appleWatchBlockAutoUnlock;
        bool cameraBlocked;
        bool classroomAppBlockRemoteScreenObservation;
        bool classroomAppForceUnpromptedScreenObservation;
        bool classroomForceAutomaticallyJoinClasses;
        bool classroomForceRequestPermissionToLeaveClasses;
        bool classroomForceUnpromptedAppAndDeviceLock;
        microsoft::graph::appListType compliantAppListType;
        QList<microsoft::graph::appListItem> compliantAppsList;
        bool contentCachingBlocked;
        bool definitionLookupBlocked;
        QList<QString> emailInDomainSuffixes;
        bool eraseContentAndSettingsBlocked;
        bool gameCenterBlocked;
        bool iCloudBlockActivityContinuation;
        bool iCloudBlockAddressBook;
        bool iCloudBlockBookmarks;
        bool iCloudBlockCalendar;
        bool iCloudBlockDocumentSync;
        bool iCloudBlockMail;
        bool iCloudBlockNotes;
        bool iCloudBlockPhotoLibrary;
        bool iCloudBlockReminders;
        bool iTunesBlockFileSharing;
        bool iTunesBlockMusicService;
        bool keyboardBlockDictation;
        bool keychainBlockCloudSync;
        bool multiplayerGamingBlocked;
        bool passwordBlockAirDropSharing;
        bool passwordBlockAutoFill;
        bool passwordBlockFingerprintUnlock;
        bool passwordBlockModification;
        bool passwordBlockProximityRequests;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMaximumAttemptCount;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeLock;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordMinutesUntilFailedLoginReset;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        QList<microsoft::graph::macOSPrivacyAccessControlItem> privacyAccessControls;
        bool safariBlockAutofill;
        bool screenCaptureBlocked;
        int softwareUpdateMajorOSDeferredInstallDelayInDays;
        int softwareUpdateMinorOSDeferredInstallDelayInDays;
        int softwareUpdateNonOSDeferredInstallDelayInDays;
        int softwareUpdatesEnforcedDelayInDays;
        bool spotlightBlockInternetResults;
        microsoft::graph::macOSSoftwareUpdateDelayPolicy updateDelayPolicy;
        bool wallpaperModificationBlocked;
    };

    struct macOSImportedPFXCertificateProfile : graph::macOSCertificateProfileBase {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct macOSPkcsCertificateProfile : graph::macOSCertificateProfileBase {
        bool allowAllAppsAccess;
        microsoft::graph::certificateStore certificateStore;
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct macOSScepCertificateProfile : graph::macOSCertificateProfileBase {
        bool allowAllAppsAccess;
        microsoft::graph::certificateStore certificateStore;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
        std::unique_ptr<microsoft::graph::macOSTrustedRootCertificate> rootCertificate;
    };

    struct macOSSoftwareUpdateConfiguration : graph::deviceConfiguration {
        microsoft::graph::macOSSoftwareUpdateBehavior allOtherUpdateBehavior;
        microsoft::graph::macOSSoftwareUpdateBehavior configDataUpdateBehavior;
        microsoft::graph::macOSSoftwareUpdateBehavior criticalUpdateBehavior;
        QList<microsoft::graph::customUpdateTimeWindow> customUpdateTimeWindows;
        microsoft::graph::macOSSoftwareUpdateBehavior firmwareUpdateBehavior;
        microsoft::graph::macOSSoftwareUpdateScheduleType updateScheduleType;
        int updateTimeWindowUtcOffsetInMinutes;
    };

    struct macOSVpnConfiguration : graph::appleVpnConfiguration {
        std::unique_ptr<microsoft::graph::macOSCertificateProfileBase> identityCertificate;
    };

    struct macOSWiredNetworkConfiguration : graph::deviceConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        microsoft::graph::eapFastConfiguration eapFastConfiguration;
        microsoft::graph::eapType eapType;
        QString enableOuterIdentityPrivacy;
        microsoft::graph::wiredNetworkInterface networkInterface;
        QString networkName;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType nonEapAuthenticationMethodForEapTtls;
        QList<QString> trustedServerCertificateNames;
        std::unique_ptr<microsoft::graph::macOSCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::macOSTrustedRootCertificate> rootCertificateForServerValidation;
    };

    struct sharedPCConfiguration : graph::deviceConfiguration {
        microsoft::graph::sharedPCAccountManagerPolicy accountManagerPolicy;
        microsoft::graph::sharedPCAllowedAccountType allowedAccounts;
        bool allowLocalStorage;
        bool disableAccountManager;
        bool disableEduPolicies;
        bool disablePowerPolicies;
        bool disableSignInOnResume;
        bool enabled;
        microsoft::graph::enablement fastFirstSignIn;
        int idleTimeBeforeSleepInSeconds;
        QString kioskAppDisplayName;
        QString kioskAppUserModelId;
        microsoft::graph::enablement localStorage;
        QTime maintenanceStartTime;
        microsoft::graph::enablement setAccountManager;
        microsoft::graph::enablement setEduPolicies;
        microsoft::graph::enablement setPowerPolicies;
        microsoft::graph::enablement signInOnResume;
    };

    struct unsupportedDeviceConfiguration : graph::deviceConfiguration {
        QList<microsoft::graph::unsupportedDeviceConfigurationDetail> details;
        QString originalEntityTypeName;
    };

    struct windowsCertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        microsoft::graph::keyStorageProviderOption keyStorageProvider;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::subjectNameFormat subjectNameFormat;
    };

    struct windows10CertificateProfileBase : graph::windowsCertificateProfileBase {
    };

    struct windows10CustomConfiguration : graph::deviceConfiguration {
        QList<microsoft::graph::omaSetting> omaSettings;
    };

    struct windows10DeviceFirmwareConfigurationInterface : graph::deviceConfiguration {
        microsoft::graph::enablement bootFromBuiltInNetworkAdapters;
        microsoft::graph::enablement bootFromExternalMedia;
        microsoft::graph::enablement cameras;
        microsoft::graph::changeUefiSettingsPermission changeUefiSettingsPermission;
        microsoft::graph::enablement microphonesAndSpeakers;
        microsoft::graph::enablement radios;
        microsoft::graph::enablement simultaneousMultiThreading;
        microsoft::graph::enablement virtualizationOfCpuAndIO;
        microsoft::graph::enablement windowsPlatformBinaryTable;
    };

    struct windows10EasEmailProfileConfiguration : graph::easEmailProfileConfigurationBase {
        QString accountName;
        microsoft::graph::emailSyncDuration durationOfEmailToSync;
        microsoft::graph::userEmailSource emailAddressSource;
        microsoft::graph::emailSyncSchedule emailSyncSchedule;
        QString hostName;
        bool requireSsl;
        bool syncCalendar;
        bool syncContacts;
        bool syncTasks;
    };

    struct windows10EndpointProtectionConfiguration : graph::deviceConfiguration {
        bool applicationGuardAllowCameraMicrophoneRedirection;
        bool applicationGuardAllowFileSaveOnHost;
        bool applicationGuardAllowPersistence;
        bool applicationGuardAllowPrintToLocalPrinters;
        bool applicationGuardAllowPrintToNetworkPrinters;
        bool applicationGuardAllowPrintToPDF;
        bool applicationGuardAllowPrintToXPS;
        bool applicationGuardAllowVirtualGPU;
        microsoft::graph::applicationGuardBlockClipboardSharingType applicationGuardBlockClipboardSharing;
        microsoft::graph::applicationGuardBlockFileTransferType applicationGuardBlockFileTransfer;
        bool applicationGuardBlockNonEnterpriseContent;
        QList<QString> applicationGuardCertificateThumbprints;
        bool applicationGuardEnabled;
        microsoft::graph::applicationGuardEnabledOptions applicationGuardEnabledOptions;
        bool applicationGuardForceAuditing;
        microsoft::graph::appLockerApplicationControlType appLockerApplicationControl;
        bool bitLockerAllowStandardUserEncryption;
        bool bitLockerDisableWarningForOtherDiskEncryption;
        bool bitLockerEnableStorageCardEncryptionOnMobile;
        bool bitLockerEncryptDevice;
        microsoft::graph::bitLockerFixedDrivePolicy bitLockerFixedDrivePolicy;
        microsoft::graph::bitLockerRecoveryPasswordRotationType bitLockerRecoveryPasswordRotation;
        microsoft::graph::bitLockerRemovableDrivePolicy bitLockerRemovableDrivePolicy;
        microsoft::graph::bitLockerSystemDrivePolicy bitLockerSystemDrivePolicy;
        QList<QString> defenderAdditionalGuardedFolders;
        microsoft::graph::defenderProtectionType defenderAdobeReaderLaunchChildProcess;
        microsoft::graph::defenderProtectionType defenderAdvancedRansomewareProtectionType;
        bool defenderAllowBehaviorMonitoring;
        bool defenderAllowCloudProtection;
        bool defenderAllowEndUserAccess;
        bool defenderAllowIntrusionPreventionSystem;
        bool defenderAllowOnAccessProtection;
        bool defenderAllowRealTimeMonitoring;
        bool defenderAllowScanArchiveFiles;
        bool defenderAllowScanDownloads;
        bool defenderAllowScanNetworkFiles;
        bool defenderAllowScanRemovableDrivesDuringFullScan;
        bool defenderAllowScanScriptsLoadedInInternetExplorer;
        QList<QString> defenderAttackSurfaceReductionExcludedPaths;
        bool defenderBlockEndUserAccess;
        microsoft::graph::defenderAttackSurfaceType defenderBlockPersistenceThroughWmiType;
        bool defenderCheckForSignaturesBeforeRunningScan;
        microsoft::graph::defenderCloudBlockLevelType defenderCloudBlockLevel;
        int defenderCloudExtendedTimeoutInSeconds;
        int defenderDaysBeforeDeletingQuarantinedMalware;
        microsoft::graph::defenderDetectedMalwareActions defenderDetectedMalwareActions;
        bool defenderDisableBehaviorMonitoring;
        bool defenderDisableCatchupFullScan;
        bool defenderDisableCatchupQuickScan;
        bool defenderDisableCloudProtection;
        bool defenderDisableIntrusionPreventionSystem;
        bool defenderDisableOnAccessProtection;
        bool defenderDisableRealTimeMonitoring;
        bool defenderDisableScanArchiveFiles;
        bool defenderDisableScanDownloads;
        bool defenderDisableScanNetworkFiles;
        bool defenderDisableScanRemovableDrivesDuringFullScan;
        bool defenderDisableScanScriptsLoadedInInternetExplorer;
        microsoft::graph::defenderProtectionType defenderEmailContentExecution;
        microsoft::graph::defenderAttackSurfaceType defenderEmailContentExecutionType;
        bool defenderEnableLowCpuPriority;
        bool defenderEnableScanIncomingMail;
        bool defenderEnableScanMappedNetworkDrivesDuringFullScan;
        QByteArray defenderExploitProtectionXml;
        QString defenderExploitProtectionXmlFileName;
        QList<QString> defenderFileExtensionsToExclude;
        QList<QString> defenderFilesAndFoldersToExclude;
        QList<QString> defenderGuardedFoldersAllowedAppPaths;
        microsoft::graph::folderProtectionType defenderGuardMyFoldersType;
        microsoft::graph::defenderProtectionType defenderNetworkProtectionType;
        microsoft::graph::defenderProtectionType defenderOfficeAppsExecutableContentCreationOrLaunch;
        microsoft::graph::defenderAttackSurfaceType defenderOfficeAppsExecutableContentCreationOrLaunchType;
        microsoft::graph::defenderProtectionType defenderOfficeAppsLaunchChildProcess;
        microsoft::graph::defenderAttackSurfaceType defenderOfficeAppsLaunchChildProcessType;
        microsoft::graph::defenderProtectionType defenderOfficeAppsOtherProcessInjection;
        microsoft::graph::defenderAttackSurfaceType defenderOfficeAppsOtherProcessInjectionType;
        microsoft::graph::defenderProtectionType defenderOfficeCommunicationAppsLaunchChildProcess;
        microsoft::graph::defenderProtectionType defenderOfficeMacroCodeAllowWin32Imports;
        microsoft::graph::defenderAttackSurfaceType defenderOfficeMacroCodeAllowWin32ImportsType;
        microsoft::graph::defenderProtectionType defenderPotentiallyUnwantedAppAction;
        microsoft::graph::defenderProtectionType defenderPreventCredentialStealingType;
        microsoft::graph::defenderProtectionType defenderProcessCreation;
        microsoft::graph::defenderAttackSurfaceType defenderProcessCreationType;
        QList<QString> defenderProcessesToExclude;
        microsoft::graph::defenderRealtimeScanDirection defenderScanDirection;
        int defenderScanMaxCpuPercentage;
        microsoft::graph::defenderScanType defenderScanType;
        QTime defenderScheduledQuickScanTime;
        microsoft::graph::weeklySchedule defenderScheduledScanDay;
        QTime defenderScheduledScanTime;
        microsoft::graph::defenderProtectionType defenderScriptDownloadedPayloadExecution;
        microsoft::graph::defenderAttackSurfaceType defenderScriptDownloadedPayloadExecutionType;
        microsoft::graph::defenderProtectionType defenderScriptObfuscatedMacroCode;
        microsoft::graph::defenderAttackSurfaceType defenderScriptObfuscatedMacroCodeType;
        bool defenderSecurityCenterBlockExploitProtectionOverride;
        bool defenderSecurityCenterDisableAccountUI;
        bool defenderSecurityCenterDisableAppBrowserUI;
        bool defenderSecurityCenterDisableClearTpmUI;
        bool defenderSecurityCenterDisableFamilyUI;
        bool defenderSecurityCenterDisableHardwareUI;
        bool defenderSecurityCenterDisableHealthUI;
        bool defenderSecurityCenterDisableNetworkUI;
        bool defenderSecurityCenterDisableNotificationAreaUI;
        bool defenderSecurityCenterDisableRansomwareUI;
        bool defenderSecurityCenterDisableSecureBootUI;
        bool defenderSecurityCenterDisableTroubleshootingUI;
        bool defenderSecurityCenterDisableVirusUI;
        bool defenderSecurityCenterDisableVulnerableTpmFirmwareUpdateUI;
        QString defenderSecurityCenterHelpEmail;
        QString defenderSecurityCenterHelpPhone;
        QString defenderSecurityCenterHelpURL;
        microsoft::graph::defenderSecurityCenterITContactDisplayType defenderSecurityCenterITContactDisplay;
        microsoft::graph::defenderSecurityCenterNotificationsFromAppType defenderSecurityCenterNotificationsFromApp;
        QString defenderSecurityCenterOrganizationDisplayName;
        int defenderSignatureUpdateIntervalInHours;
        microsoft::graph::defenderSubmitSamplesConsentType defenderSubmitSamplesConsentType;
        microsoft::graph::defenderProtectionType defenderUntrustedExecutable;
        microsoft::graph::defenderAttackSurfaceType defenderUntrustedExecutableType;
        microsoft::graph::defenderProtectionType defenderUntrustedUSBProcess;
        microsoft::graph::defenderAttackSurfaceType defenderUntrustedUSBProcessType;
        bool deviceGuardEnableSecureBootWithDMA;
        bool deviceGuardEnableVirtualizationBasedSecurity;
        microsoft::graph::enablement deviceGuardLaunchSystemGuard;
        microsoft::graph::deviceGuardLocalSystemAuthorityCredentialGuardType deviceGuardLocalSystemAuthorityCredentialGuardSettings;
        microsoft::graph::secureBootWithDMAType deviceGuardSecureBootWithDMA;
        microsoft::graph::dmaGuardDeviceEnumerationPolicyType dmaGuardDeviceEnumerationPolicy;
        bool firewallBlockStatefulFTP;
        microsoft::graph::firewallCertificateRevocationListCheckMethodType firewallCertificateRevocationListCheckMethod;
        int firewallIdleTimeoutForSecurityAssociationInSeconds;
        bool firewallIPSecExemptionsAllowDHCP;
        bool firewallIPSecExemptionsAllowICMP;
        bool firewallIPSecExemptionsAllowNeighborDiscovery;
        bool firewallIPSecExemptionsAllowRouterDiscovery;
        bool firewallIPSecExemptionsNone;
        bool firewallMergeKeyingModuleSettings;
        microsoft::graph::firewallPacketQueueingMethodType firewallPacketQueueingMethod;
        microsoft::graph::firewallPreSharedKeyEncodingMethodType firewallPreSharedKeyEncodingMethod;
        microsoft::graph::windowsFirewallNetworkProfile firewallProfileDomain;
        microsoft::graph::windowsFirewallNetworkProfile firewallProfilePrivate;
        microsoft::graph::windowsFirewallNetworkProfile firewallProfilePublic;
        QList<microsoft::graph::windowsFirewallRule> firewallRules;
        microsoft::graph::lanManagerAuthenticationLevel lanManagerAuthenticationLevel;
        bool lanManagerWorkstationDisableInsecureGuestLogons;
        QString localSecurityOptionsAdministratorAccountName;
        microsoft::graph::localSecurityOptionsAdministratorElevationPromptBehaviorType localSecurityOptionsAdministratorElevationPromptBehavior;
        bool localSecurityOptionsAllowAnonymousEnumerationOfSAMAccountsAndShares;
        bool localSecurityOptionsAllowPKU2UAuthenticationRequests;
        QString localSecurityOptionsAllowRemoteCallsToSecurityAccountsManager;
        bool localSecurityOptionsAllowRemoteCallsToSecurityAccountsManagerHelperBool;
        bool localSecurityOptionsAllowSystemToBeShutDownWithoutHavingToLogOn;
        bool localSecurityOptionsAllowUIAccessApplicationElevation;
        bool localSecurityOptionsAllowUIAccessApplicationsForSecureLocations;
        bool localSecurityOptionsAllowUndockWithoutHavingToLogon;
        bool localSecurityOptionsBlockMicrosoftAccounts;
        bool localSecurityOptionsBlockRemoteLogonWithBlankPassword;
        bool localSecurityOptionsBlockRemoteOpticalDriveAccess;
        bool localSecurityOptionsBlockUsersInstallingPrinterDrivers;
        bool localSecurityOptionsClearVirtualMemoryPageFile;
        bool localSecurityOptionsClientDigitallySignCommunicationsAlways;
        bool localSecurityOptionsClientSendUnencryptedPasswordToThirdPartySMBServers;
        bool localSecurityOptionsDetectApplicationInstallationsAndPromptForElevation;
        bool localSecurityOptionsDisableAdministratorAccount;
        bool localSecurityOptionsDisableClientDigitallySignCommunicationsIfServerAgrees;
        bool localSecurityOptionsDisableGuestAccount;
        bool localSecurityOptionsDisableServerDigitallySignCommunicationsAlways;
        bool localSecurityOptionsDisableServerDigitallySignCommunicationsIfClientAgrees;
        bool localSecurityOptionsDoNotAllowAnonymousEnumerationOfSAMAccounts;
        bool localSecurityOptionsDoNotRequireCtrlAltDel;
        bool localSecurityOptionsDoNotStoreLANManagerHashValueOnNextPasswordChange;
        microsoft::graph::localSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUserType localSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUser;
        QString localSecurityOptionsGuestAccountName;
        bool localSecurityOptionsHideLastSignedInUser;
        bool localSecurityOptionsHideUsernameAtSignIn;
        microsoft::graph::localSecurityOptionsInformationDisplayedOnLockScreenType localSecurityOptionsInformationDisplayedOnLockScreen;
        microsoft::graph::localSecurityOptionsInformationShownOnLockScreenType localSecurityOptionsInformationShownOnLockScreen;
        QString localSecurityOptionsLogOnMessageText;
        QString localSecurityOptionsLogOnMessageTitle;
        int localSecurityOptionsMachineInactivityLimit;
        int localSecurityOptionsMachineInactivityLimitInMinutes;
        microsoft::graph::localSecurityOptionsMinimumSessionSecurity localSecurityOptionsMinimumSessionSecurityForNtlmSspBasedClients;
        microsoft::graph::localSecurityOptionsMinimumSessionSecurity localSecurityOptionsMinimumSessionSecurityForNtlmSspBasedServers;
        bool localSecurityOptionsOnlyElevateSignedExecutables;
        bool localSecurityOptionsRestrictAnonymousAccessToNamedPipesAndShares;
        microsoft::graph::localSecurityOptionsSmartCardRemovalBehaviorType localSecurityOptionsSmartCardRemovalBehavior;
        microsoft::graph::localSecurityOptionsStandardUserElevationPromptBehaviorType localSecurityOptionsStandardUserElevationPromptBehavior;
        bool localSecurityOptionsSwitchToSecureDesktopWhenPromptingForElevation;
        bool localSecurityOptionsUseAdminApprovalMode;
        bool localSecurityOptionsUseAdminApprovalModeForAdministrators;
        bool localSecurityOptionsVirtualizeFileAndRegistryWriteFailuresToPerUserLocations;
        bool smartScreenBlockOverrideForFiles;
        bool smartScreenEnableInShell;
        microsoft::graph::deviceManagementUserRightsSetting userRightsAccessCredentialManagerAsTrustedCaller;
        microsoft::graph::deviceManagementUserRightsSetting userRightsActAsPartOfTheOperatingSystem;
        microsoft::graph::deviceManagementUserRightsSetting userRightsAllowAccessFromNetwork;
        microsoft::graph::deviceManagementUserRightsSetting userRightsBackupData;
        microsoft::graph::deviceManagementUserRightsSetting userRightsBlockAccessFromNetwork;
        microsoft::graph::deviceManagementUserRightsSetting userRightsChangeSystemTime;
        microsoft::graph::deviceManagementUserRightsSetting userRightsCreateGlobalObjects;
        microsoft::graph::deviceManagementUserRightsSetting userRightsCreatePageFile;
        microsoft::graph::deviceManagementUserRightsSetting userRightsCreatePermanentSharedObjects;
        microsoft::graph::deviceManagementUserRightsSetting userRightsCreateSymbolicLinks;
        microsoft::graph::deviceManagementUserRightsSetting userRightsCreateToken;
        microsoft::graph::deviceManagementUserRightsSetting userRightsDebugPrograms;
        microsoft::graph::deviceManagementUserRightsSetting userRightsDelegation;
        microsoft::graph::deviceManagementUserRightsSetting userRightsDenyLocalLogOn;
        microsoft::graph::deviceManagementUserRightsSetting userRightsGenerateSecurityAudits;
        microsoft::graph::deviceManagementUserRightsSetting userRightsImpersonateClient;
        microsoft::graph::deviceManagementUserRightsSetting userRightsIncreaseSchedulingPriority;
        microsoft::graph::deviceManagementUserRightsSetting userRightsLoadUnloadDrivers;
        microsoft::graph::deviceManagementUserRightsSetting userRightsLocalLogOn;
        microsoft::graph::deviceManagementUserRightsSetting userRightsLockMemory;
        microsoft::graph::deviceManagementUserRightsSetting userRightsManageAuditingAndSecurityLogs;
        microsoft::graph::deviceManagementUserRightsSetting userRightsManageVolumes;
        microsoft::graph::deviceManagementUserRightsSetting userRightsModifyFirmwareEnvironment;
        microsoft::graph::deviceManagementUserRightsSetting userRightsModifyObjectLabels;
        microsoft::graph::deviceManagementUserRightsSetting userRightsProfileSingleProcess;
        microsoft::graph::deviceManagementUserRightsSetting userRightsRemoteDesktopServicesLogOn;
        microsoft::graph::deviceManagementUserRightsSetting userRightsRemoteShutdown;
        microsoft::graph::deviceManagementUserRightsSetting userRightsRestoreData;
        microsoft::graph::deviceManagementUserRightsSetting userRightsTakeOwnership;
        microsoft::graph::windowsDefenderTamperProtectionOptions windowsDefenderTamperProtection;
        microsoft::graph::serviceStartType xboxServicesAccessoryManagementServiceStartupMode;
        bool xboxServicesEnableXboxGameSaveTask;
        microsoft::graph::serviceStartType xboxServicesLiveAuthManagerServiceStartupMode;
        microsoft::graph::serviceStartType xboxServicesLiveGameSaveServiceStartupMode;
        microsoft::graph::serviceStartType xboxServicesLiveNetworkingServiceStartupMode;
    };

    struct windows10EnterpriseModernAppManagementConfiguration : graph::deviceConfiguration {
        bool uninstallBuiltInApps;
    };

    struct windows10GeneralConfiguration : graph::deviceConfiguration {
        bool accountsBlockAddingNonMicrosoftAccountEmail;
        microsoft::graph::enablement activateAppsWithVoice;
        bool antiTheftModeBlocked;
        bool appManagementMSIAllowUserControlOverInstall;
        bool appManagementMSIAlwaysInstallWithElevatedPrivileges;
        QList<QString> appManagementPackageFamilyNamesToLaunchAfterLogOn;
        microsoft::graph::stateManagementSetting appsAllowTrustedAppsSideloading;
        bool appsBlockWindowsStoreOriginatedApps;
        bool authenticationAllowSecondaryDevice;
        QString authenticationPreferredAzureADTenantDomainName;
        microsoft::graph::enablement authenticationWebSignIn;
        QList<QString> bluetoothAllowedServices;
        bool bluetoothBlockAdvertising;
        bool bluetoothBlockDiscoverableMode;
        bool bluetoothBlocked;
        bool bluetoothBlockPrePairing;
        bool bluetoothBlockPromptedProximalConnections;
        bool cameraBlocked;
        bool cellularBlockDataWhenRoaming;
        bool cellularBlockVpn;
        bool cellularBlockVpnWhenRoaming;
        microsoft::graph::configurationUsage cellularData;
        bool certificatesBlockManualRootCertificateInstallation;
        QString configureTimeZone;
        bool connectedDevicesServiceBlocked;
        bool copyPasteBlocked;
        bool cortanaBlocked;
        bool cryptographyAllowFipsAlgorithmPolicy;
        bool dataProtectionBlockDirectMemoryAccess;
        bool defenderBlockEndUserAccess;
        bool defenderBlockOnAccessProtection;
        microsoft::graph::defenderCloudBlockLevelType defenderCloudBlockLevel;
        int defenderCloudExtendedTimeout;
        int defenderCloudExtendedTimeoutInSeconds;
        int defenderDaysBeforeDeletingQuarantinedMalware;
        microsoft::graph::defenderDetectedMalwareActions defenderDetectedMalwareActions;
        bool defenderDisableCatchupFullScan;
        bool defenderDisableCatchupQuickScan;
        QList<QString> defenderFileExtensionsToExclude;
        QList<QString> defenderFilesAndFoldersToExclude;
        microsoft::graph::defenderMonitorFileActivity defenderMonitorFileActivity;
        microsoft::graph::defenderPotentiallyUnwantedAppAction defenderPotentiallyUnwantedAppAction;
        microsoft::graph::defenderProtectionType defenderPotentiallyUnwantedAppActionSetting;
        QList<QString> defenderProcessesToExclude;
        microsoft::graph::defenderPromptForSampleSubmission defenderPromptForSampleSubmission;
        bool defenderRequireBehaviorMonitoring;
        bool defenderRequireCloudProtection;
        bool defenderRequireNetworkInspectionSystem;
        bool defenderRequireRealTimeMonitoring;
        bool defenderScanArchiveFiles;
        bool defenderScanDownloads;
        bool defenderScanIncomingMail;
        bool defenderScanMappedNetworkDrivesDuringFullScan;
        int defenderScanMaxCpu;
        bool defenderScanNetworkFiles;
        bool defenderScanRemovableDrivesDuringFullScan;
        bool defenderScanScriptsLoadedInInternetExplorer;
        microsoft::graph::defenderScanType defenderScanType;
        QTime defenderScheduledQuickScanTime;
        QTime defenderScheduledScanTime;
        bool defenderScheduleScanEnableLowCpuPriority;
        int defenderSignatureUpdateIntervalInHours;
        microsoft::graph::defenderSubmitSamplesConsentType defenderSubmitSamplesConsentType;
        microsoft::graph::weeklySchedule defenderSystemScanSchedule;
        microsoft::graph::stateManagementSetting developerUnlockSetting;
        bool deviceManagementBlockFactoryResetOnMobile;
        bool deviceManagementBlockManualUnenroll;
        microsoft::graph::diagnosticDataSubmissionMode diagnosticsDataSubmissionMode;
        QList<QString> displayAppListWithGdiDPIScalingTurnedOff;
        QList<QString> displayAppListWithGdiDPIScalingTurnedOn;
        bool edgeAllowStartPagesModification;
        bool edgeBlockAccessToAboutFlags;
        bool edgeBlockAddressBarDropdown;
        bool edgeBlockAutofill;
        bool edgeBlockCompatibilityList;
        bool edgeBlockDeveloperTools;
        bool edgeBlocked;
        bool edgeBlockEditFavorites;
        bool edgeBlockExtensions;
        bool edgeBlockFullScreenMode;
        bool edgeBlockInPrivateBrowsing;
        bool edgeBlockJavaScript;
        bool edgeBlockLiveTileDataCollection;
        bool edgeBlockPasswordManager;
        bool edgeBlockPopups;
        bool edgeBlockPrelaunch;
        bool edgeBlockPrinting;
        bool edgeBlockSavingHistory;
        bool edgeBlockSearchEngineCustomization;
        bool edgeBlockSearchSuggestions;
        bool edgeBlockSendingDoNotTrackHeader;
        bool edgeBlockSendingIntranetTrafficToInternetExplorer;
        bool edgeBlockSideloadingExtensions;
        bool edgeBlockTabPreloading;
        bool edgeBlockWebContentOnNewTabPage;
        bool edgeClearBrowsingDataOnExit;
        microsoft::graph::edgeCookiePolicy edgeCookiePolicy;
        bool edgeDisableFirstRunPage;
        QString edgeEnterpriseModeSiteListLocation;
        microsoft::graph::visibilitySetting edgeFavoritesBarVisibility;
        QString edgeFavoritesListLocation;
        QString edgeFirstRunUrl;
        microsoft::graph::edgeHomeButtonConfiguration edgeHomeButtonConfiguration;
        bool edgeHomeButtonConfigurationEnabled;
        QList<QString> edgeHomepageUrls;
        microsoft::graph::edgeKioskModeRestrictionType edgeKioskModeRestriction;
        int edgeKioskResetAfterIdleTimeInMinutes;
        QString edgeNewTabPageURL;
        microsoft::graph::edgeOpenOptions edgeOpensWith;
        bool edgePreventCertificateErrorOverride;
        QList<QString> edgeRequiredExtensionPackageFamilyNames;
        bool edgeRequireSmartScreen;
        microsoft::graph::edgeSearchEngineBase edgeSearchEngine;
        bool edgeSendIntranetTrafficToInternetExplorer;
        microsoft::graph::internetExplorerMessageSetting edgeShowMessageWhenOpeningInternetExplorerSites;
        bool edgeSyncFavoritesWithInternetExplorer;
        microsoft::graph::edgeTelemetryMode edgeTelemetryForMicrosoft365Analytics;
        bool enableAutomaticRedeployment;
        int energySaverOnBatteryThresholdPercentage;
        int energySaverPluggedInThresholdPercentage;
        QString enterpriseCloudPrintDiscoveryEndPoint;
        int enterpriseCloudPrintDiscoveryMaxLimit;
        QString enterpriseCloudPrintMopriaDiscoveryResourceIdentifier;
        QString enterpriseCloudPrintOAuthAuthority;
        QString enterpriseCloudPrintOAuthClientIdentifier;
        QString enterpriseCloudPrintResourceIdentifier;
        bool experienceBlockDeviceDiscovery;
        bool experienceBlockErrorDialogWhenNoSIM;
        bool experienceBlockTaskSwitcher;
        microsoft::graph::browserSyncSetting experienceDoNotSyncBrowserSettings;
        microsoft::graph::enablement findMyFiles;
        bool gameDvrBlocked;
        microsoft::graph::inkAccessSetting inkWorkspaceAccess;
        microsoft::graph::stateManagementSetting inkWorkspaceAccessState;
        bool inkWorkspaceBlockSuggestedApps;
        bool internetSharingBlocked;
        bool locationServicesBlocked;
        microsoft::graph::enablement lockScreenActivateAppsWithVoice;
        bool lockScreenAllowTimeoutConfiguration;
        bool lockScreenBlockActionCenterNotifications;
        bool lockScreenBlockCortana;
        bool lockScreenBlockToastNotifications;
        int lockScreenTimeoutInSeconds;
        bool logonBlockFastUserSwitching;
        bool messagingBlockMMS;
        bool messagingBlockRichCommunicationServices;
        bool messagingBlockSync;
        bool microsoftAccountBlocked;
        bool microsoftAccountBlockSettingsSync;
        microsoft::graph::signInAssistantOptions microsoftAccountSignInAssistantSettings;
        bool networkProxyApplySettingsDeviceWide;
        QString networkProxyAutomaticConfigurationUrl;
        bool networkProxyDisableAutoDetect;
        microsoft::graph::windows10NetworkProxyServer networkProxyServer;
        bool nfcBlocked;
        bool oneDriveDisableFileSync;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumAgeInDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        bool passwordRequireWhenResumeFromIdleState;
        int passwordSignInFailureCountBeforeFactoryReset;
        QString personalizationDesktopImageUrl;
        QString personalizationLockScreenImageUrl;
        microsoft::graph::powerActionType powerButtonActionOnBattery;
        microsoft::graph::powerActionType powerButtonActionPluggedIn;
        microsoft::graph::enablement powerHybridSleepOnBattery;
        microsoft::graph::enablement powerHybridSleepPluggedIn;
        microsoft::graph::powerActionType powerLidCloseActionOnBattery;
        microsoft::graph::powerActionType powerLidCloseActionPluggedIn;
        microsoft::graph::powerActionType powerSleepButtonActionOnBattery;
        microsoft::graph::powerActionType powerSleepButtonActionPluggedIn;
        bool printerBlockAddition;
        QString printerDefaultName;
        QList<QString> printerNames;
        microsoft::graph::stateManagementSetting privacyAdvertisingId;
        bool privacyAutoAcceptPairingAndConsentPrompts;
        bool privacyBlockActivityFeed;
        bool privacyBlockInputPersonalization;
        bool privacyBlockPublishUserActivities;
        bool privacyDisableLaunchExperience;
        bool resetProtectionModeBlocked;
        microsoft::graph::safeSearchFilterType safeSearchFilter;
        bool screenCaptureBlocked;
        bool searchBlockDiacritics;
        bool searchBlockWebResults;
        bool searchDisableAutoLanguageDetection;
        bool searchDisableIndexerBackoff;
        bool searchDisableIndexingEncryptedItems;
        bool searchDisableIndexingRemovableDrive;
        bool searchDisableLocation;
        bool searchDisableUseLocation;
        bool searchEnableAutomaticIndexSizeManangement;
        bool searchEnableRemoteQueries;
        bool securityBlockAzureADJoinedDevicesAutoEncryption;
        bool settingsBlockAccountsPage;
        bool settingsBlockAddProvisioningPackage;
        bool settingsBlockAppsPage;
        bool settingsBlockChangeLanguage;
        bool settingsBlockChangePowerSleep;
        bool settingsBlockChangeRegion;
        bool settingsBlockChangeSystemTime;
        bool settingsBlockDevicesPage;
        bool settingsBlockEaseOfAccessPage;
        bool settingsBlockEditDeviceName;
        bool settingsBlockGamingPage;
        bool settingsBlockNetworkInternetPage;
        bool settingsBlockPersonalizationPage;
        bool settingsBlockPrivacyPage;
        bool settingsBlockRemoveProvisioningPackage;
        bool settingsBlockSettingsApp;
        bool settingsBlockSystemPage;
        bool settingsBlockTimeLanguagePage;
        bool settingsBlockUpdateSecurityPage;
        bool sharedUserAppDataAllowed;
        microsoft::graph::appInstallControlType smartScreenAppInstallControl;
        bool smartScreenBlockPromptOverride;
        bool smartScreenBlockPromptOverrideForFiles;
        bool smartScreenEnableAppInstallControl;
        bool startBlockUnpinningAppsFromTaskbar;
        microsoft::graph::windowsStartMenuAppListVisibilityType startMenuAppListVisibility;
        bool startMenuHideChangeAccountSettings;
        bool startMenuHideFrequentlyUsedApps;
        bool startMenuHideHibernate;
        bool startMenuHideLock;
        bool startMenuHidePowerButton;
        bool startMenuHideRecentJumpLists;
        bool startMenuHideRecentlyAddedApps;
        bool startMenuHideRestartOptions;
        bool startMenuHideShutDown;
        bool startMenuHideSignOut;
        bool startMenuHideSleep;
        bool startMenuHideSwitchAccount;
        bool startMenuHideUserTile;
        QByteArray startMenuLayoutEdgeAssetsXml;
        QByteArray startMenuLayoutXml;
        microsoft::graph::windowsStartMenuModeType startMenuMode;
        microsoft::graph::visibilitySetting startMenuPinnedFolderDocuments;
        microsoft::graph::visibilitySetting startMenuPinnedFolderDownloads;
        microsoft::graph::visibilitySetting startMenuPinnedFolderFileExplorer;
        microsoft::graph::visibilitySetting startMenuPinnedFolderHomeGroup;
        microsoft::graph::visibilitySetting startMenuPinnedFolderMusic;
        microsoft::graph::visibilitySetting startMenuPinnedFolderNetwork;
        microsoft::graph::visibilitySetting startMenuPinnedFolderPersonalFolder;
        microsoft::graph::visibilitySetting startMenuPinnedFolderPictures;
        microsoft::graph::visibilitySetting startMenuPinnedFolderSettings;
        microsoft::graph::visibilitySetting startMenuPinnedFolderVideos;
        bool storageBlockRemovableStorage;
        bool storageRequireMobileDeviceEncryption;
        bool storageRestrictAppDataToSystemVolume;
        bool storageRestrictAppInstallToSystemVolume;
        QString systemTelemetryProxyServer;
        bool taskManagerBlockEndTask;
        bool tenantLockdownRequireNetworkDuringOutOfBoxExperience;
        bool uninstallBuiltInApps;
        bool usbBlocked;
        bool voiceRecordingBlocked;
        bool webRtcBlockLocalhostIpAddress;
        bool wiFiBlockAutomaticConnectHotspots;
        bool wiFiBlocked;
        bool wiFiBlockManualConfiguration;
        int wiFiScanInterval;
        microsoft::graph::windows10AppsForceUpdateSchedule windows10AppsForceUpdateSchedule;
        bool windowsSpotlightBlockConsumerSpecificFeatures;
        bool windowsSpotlightBlocked;
        bool windowsSpotlightBlockOnActionCenter;
        bool windowsSpotlightBlockTailoredExperiences;
        bool windowsSpotlightBlockThirdPartyNotifications;
        bool windowsSpotlightBlockWelcomeExperience;
        bool windowsSpotlightBlockWindowsTips;
        microsoft::graph::windowsSpotlightEnablementSettings windowsSpotlightConfigureOnLockScreen;
        bool windowsStoreBlockAutoUpdate;
        bool windowsStoreBlocked;
        bool windowsStoreEnablePrivateStoreOnly;
        bool wirelessDisplayBlockProjectionToThisDevice;
        bool wirelessDisplayBlockUserInputFromReceiver;
        bool wirelessDisplayRequirePinForPairing;
        QList<microsoft::graph::windowsPrivacyDataAccessControlItem> privacyAccessControls;
    };

    struct windows10ImportedPFXCertificateProfile : graph::windowsCertificateProfileBase {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct windows10NetworkBoundaryConfiguration : graph::deviceConfiguration {
        microsoft::graph::windowsNetworkIsolationPolicy windowsNetworkIsolationPolicy;
    };

    struct windows10PFXImportCertificateProfile : graph::deviceConfiguration {
        microsoft::graph::keyStorageProviderOption keyStorageProvider;
    };

    struct windows10PkcsCertificateProfile : graph::windows10CertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        QString certificateTemplateName;
        QString certificationAuthority;
        QString certificationAuthorityName;
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct windows10SecureAssessmentConfiguration : graph::deviceConfiguration {
        bool allowPrinting;
        bool allowScreenCapture;
        bool allowTextSuggestion;
        QString assessmentAppUserModelId;
        QString configurationAccount;
        microsoft::graph::secureAssessmentAccountType configurationAccountType;
        QString launchUri;
        QString localGuestAccountName;
    };

    struct windows10TeamGeneralConfiguration : graph::deviceConfiguration {
        bool azureOperationalInsightsBlockTelemetry;
        QString azureOperationalInsightsWorkspaceId;
        QString azureOperationalInsightsWorkspaceKey;
        bool connectAppBlockAutoLaunch;
        bool maintenanceWindowBlocked;
        int maintenanceWindowDurationInHours;
        QTime maintenanceWindowStartTime;
        bool miracastBlocked;
        microsoft::graph::miracastChannel miracastChannel;
        bool miracastRequirePin;
        bool settingsBlockMyMeetingsAndFiles;
        bool settingsBlockSessionResume;
        bool settingsBlockSigninSuggestions;
        int settingsDefaultVolume;
        int settingsScreenTimeoutInMinutes;
        int settingsSessionTimeoutInMinutes;
        int settingsSleepTimeoutInMinutes;
        QString welcomeScreenBackgroundImageUrl;
        bool welcomeScreenBlockAutomaticWakeUp;
        microsoft::graph::welcomeScreenMeetingInformation welcomeScreenMeetingInformation;
    };

    struct windowsVpnConfiguration : graph::deviceConfiguration {
        QString connectionName;
        QByteArray customXml;
        QList<microsoft::graph::vpnServer> servers;
    };

    struct windows10VpnConfiguration : graph::windowsVpnConfiguration {
        QList<microsoft::graph::windows10AssociatedApps> associatedApps;
        microsoft::graph::windows10VpnAuthenticationMethod authenticationMethod;
        microsoft::graph::windows10VpnConnectionType connectionType;
        microsoft::graph::cryptographySuite cryptographySuite;
        QList<microsoft::graph::vpnDnsRule> dnsRules;
        QList<QString> dnsSuffixes;
        QByteArray eapXml;
        bool enableAlwaysOn;
        bool enableConditionalAccess;
        bool enableDeviceTunnel;
        bool enableDnsRegistration;
        bool enableSingleSignOnWithAlternateCertificate;
        bool enableSplitTunneling;
        bool onlyAssociatedAppsCanUseConnection;
        microsoft::graph::windows10VpnProfileTarget profileTarget;
        microsoft::graph::windows10VpnProxyServer proxyServer;
        bool rememberUserCredentials;
        QList<microsoft::graph::vpnRoute> routes;
        microsoft::graph::extendedKeyUsage singleSignOnEku;
        QString singleSignOnIssuerHash;
        QList<microsoft::graph::vpnTrafficRule> trafficRules;
        QList<QString> trustedNetworkDomains;
        QString windowsInformationProtectionDomain;
        std::unique_ptr<microsoft::graph::windowsCertificateProfileBase> identityCertificate;
    };

    struct windows81CertificateProfileBase : graph::windowsCertificateProfileBase {
        QList<microsoft::graph::customSubjectAlternativeName> customSubjectAlternativeNames;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
    };

    struct windows81GeneralConfiguration : graph::deviceConfiguration {
        bool accountsBlockAddingNonMicrosoftAccountEmail;
        bool applyOnlyToWindows81;
        bool browserBlockAutofill;
        bool browserBlockAutomaticDetectionOfIntranetSites;
        bool browserBlockEnterpriseModeAccess;
        bool browserBlockJavaScript;
        bool browserBlockPlugins;
        bool browserBlockPopups;
        bool browserBlockSendingDoNotTrackHeader;
        bool browserBlockSingleWordEntryOnIntranetSites;
        QString browserEnterpriseModeSiteListLocation;
        microsoft::graph::internetSiteSecurityLevel browserInternetSecurityLevel;
        microsoft::graph::siteSecurityLevel browserIntranetSecurityLevel;
        QString browserLoggingReportLocation;
        bool browserRequireFirewall;
        bool browserRequireFraudWarning;
        bool browserRequireHighSecurityForRestrictedSites;
        bool browserRequireSmartScreen;
        microsoft::graph::siteSecurityLevel browserTrustedSitesSecurityLevel;
        bool cellularBlockDataRoaming;
        bool diagnosticsBlockDataSubmission;
        microsoft::graph::updateClassification minimumAutoInstallClassification;
        bool passwordBlockPicturePasswordAndPin;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordBlockCount;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool storageRequireDeviceEncryption;
        microsoft::graph::updateClassification updatesMinimumAutoInstallClassification;
        bool updatesRequireAutomaticUpdates;
        microsoft::graph::windowsUserAccountControlSettings userAccountControlSettings;
        QString workFoldersUrl;
    };

    struct windows81SCEPCertificateProfile : graph::windows81CertificateProfileBase {
        microsoft::graph::certificateStore certificateStore;
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
        std::unique_ptr<microsoft::graph::windows81TrustedRootCertificate> rootCertificate;
    };

    struct windows81TrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        microsoft::graph::certificateDestinationStore destinationStore;
        QByteArray trustedRootCertificate;
    };

    struct windows81VpnConfiguration : graph::windowsVpnConfiguration {
        bool applyOnlyToWindows81;
        microsoft::graph::windowsVpnConnectionType connectionType;
        bool enableSplitTunneling;
        QString loginGroupOrDomain;
        microsoft::graph::windows81VpnProxyServer proxyServer;
    };

    struct windows81WifiImportConfiguration : graph::deviceConfiguration {
        QByteArray payload;
        QString payloadFileName;
        QString profileName;
    };

    struct windowsDefenderAdvancedThreatProtectionConfiguration : graph::deviceConfiguration {
        bool advancedThreatProtectionAutoPopulateOnboardingBlob;
        QString advancedThreatProtectionOffboardingBlob;
        QString advancedThreatProtectionOffboardingFilename;
        QString advancedThreatProtectionOnboardingBlob;
        QString advancedThreatProtectionOnboardingFilename;
        bool allowSampleSharing;
        bool enableExpeditedTelemetryReporting;
    };

    struct windowsDeliveryOptimizationConfiguration : graph::deviceConfiguration {
        long long backgroundDownloadFromHttpDelayInSeconds;
        microsoft::graph::deliveryOptimizationBandwidth bandwidthMode;
        int cacheServerBackgroundDownloadFallbackToHttpDelayInSeconds;
        int cacheServerForegroundDownloadFallbackToHttpDelayInSeconds;
        QList<QString> cacheServerHostNames;
        microsoft::graph::windowsDeliveryOptimizationMode deliveryOptimizationMode;
        long long foregroundDownloadFromHttpDelayInSeconds;
        microsoft::graph::deliveryOptimizationGroupIdSource groupIdSource;
        int maximumCacheAgeInDays;
        microsoft::graph::deliveryOptimizationMaxCacheSize maximumCacheSize;
        int minimumBatteryPercentageAllowedToUpload;
        int minimumDiskSizeAllowedToPeerInGigabytes;
        int minimumFileSizeToCacheInMegabytes;
        int minimumRamAllowedToPeerInGigabytes;
        QString modifyCacheLocation;
        microsoft::graph::deliveryOptimizationRestrictPeerSelectionByOptions restrictPeerSelectionBy;
        microsoft::graph::enablement vpnPeerCaching;
    };

    struct windowsDomainJoinConfiguration : graph::deviceConfiguration {
        QString activeDirectoryDomainName;
        QString computerNameStaticPrefix;
        int computerNameSuffixRandomCharCount;
        QString organizationalUnit;
        QList<microsoft::graph::deviceConfiguration> networkAccessConfigurations;
    };

    struct windowsHealthMonitoringConfiguration : graph::deviceConfiguration {
        microsoft::graph::enablement allowDeviceHealthMonitoring;
        QString configDeviceHealthMonitoringCustomScope;
        microsoft::graph::windowsHealthMonitoringScope configDeviceHealthMonitoringScope;
    };

    struct windowsIdentityProtectionConfiguration : graph::deviceConfiguration {
        bool enhancedAntiSpoofingForFacialFeaturesEnabled;
        int pinExpirationInDays;
        microsoft::graph::configurationUsage pinLowercaseCharactersUsage;
        int pinMaximumLength;
        int pinMinimumLength;
        int pinPreviousBlockCount;
        bool pinRecoveryEnabled;
        microsoft::graph::configurationUsage pinSpecialCharactersUsage;
        microsoft::graph::configurationUsage pinUppercaseCharactersUsage;
        bool securityDeviceRequired;
        bool unlockWithBiometricsEnabled;
        bool useCertificatesForOnPremisesAuthEnabled;
        bool useSecurityKeyForSignin;
        bool windowsHelloForBusinessBlocked;
    };

    struct windowsKioskConfiguration : graph::deviceConfiguration {
        bool edgeKioskEnablePublicBrowsing;
        QList<QString> kioskBrowserBlockedUrlExceptions;
        QList<QString> kioskBrowserBlockedURLs;
        QString kioskBrowserDefaultUrl;
        bool kioskBrowserEnableEndSessionButton;
        bool kioskBrowserEnableHomeButton;
        bool kioskBrowserEnableNavigationButtons;
        int kioskBrowserRestartOnIdleTimeInMinutes;
        QList<microsoft::graph::windowsKioskProfile> kioskProfiles;
        microsoft::graph::windowsKioskForceUpdateSchedule windowsKioskForceUpdateSchedule;
    };

    struct windowsPhone81CertificateProfileBase : graph::deviceConfiguration {
        microsoft::graph::certificateValidityPeriodScale certificateValidityPeriodScale;
        int certificateValidityPeriodValue;
        QList<microsoft::graph::extendedKeyUsage> extendedKeyUsages;
        microsoft::graph::keyStorageProviderOption keyStorageProvider;
        int renewalThresholdPercentage;
        microsoft::graph::subjectAlternativeNameType subjectAlternativeNameType;
        microsoft::graph::subjectNameFormat subjectNameFormat;
    };

    struct windowsPhone81CustomConfiguration : graph::deviceConfiguration {
        QList<microsoft::graph::omaSetting> omaSettings;
    };

    struct windowsPhone81GeneralConfiguration : graph::deviceConfiguration {
        bool applyOnlyToWindowsPhone81;
        bool appsBlockCopyPaste;
        bool bluetoothBlocked;
        bool cameraBlocked;
        bool cellularBlockWifiTethering;
        microsoft::graph::appListType compliantAppListType;
        QList<microsoft::graph::appListItem> compliantAppsList;
        bool diagnosticDataBlockSubmission;
        bool emailBlockAddingAccounts;
        bool locationServicesBlocked;
        bool microsoftAccountBlocked;
        bool nfcBlocked;
        bool passwordBlockSimple;
        int passwordExpirationDays;
        int passwordMinimumCharacterSetCount;
        int passwordMinimumLength;
        int passwordMinutesOfInactivityBeforeScreenTimeout;
        int passwordPreviousPasswordBlockCount;
        bool passwordRequired;
        microsoft::graph::requiredPasswordType passwordRequiredType;
        int passwordSignInFailureCountBeforeFactoryReset;
        bool screenCaptureBlocked;
        bool storageBlockRemovableStorage;
        bool storageRequireEncryption;
        bool webBrowserBlocked;
        bool wifiBlockAutomaticConnectHotspots;
        bool wifiBlocked;
        bool wifiBlockHotspotReporting;
        bool windowsStoreBlocked;
    };

    struct windowsPhone81ImportedPFXCertificateProfile : graph::windowsCertificateProfileBase {
        microsoft::graph::intendedPurpose intendedPurpose;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
    };

    struct windowsPhone81SCEPCertificateProfile : graph::windowsPhone81CertificateProfileBase {
        microsoft::graph::hashAlgorithms hashAlgorithm;
        microsoft::graph::keySize keySize;
        microsoft::graph::keyUsages keyUsage;
        QList<QString> scepServerUrls;
        QString subjectAlternativeNameFormatString;
        QString subjectNameFormatString;
        QList<microsoft::graph::managedDeviceCertificateState> managedDeviceCertificateStates;
        std::unique_ptr<microsoft::graph::windowsPhone81TrustedRootCertificate> rootCertificate;
    };

    struct windowsPhone81TrustedRootCertificate : graph::deviceConfiguration {
        QString certFileName;
        QByteArray trustedRootCertificate;
    };

    struct windowsPhone81VpnConfiguration : graph::windows81VpnConfiguration {
        microsoft::graph::vpnAuthenticationMethod authenticationMethod;
        bool bypassVpnOnCompanyWifi;
        bool bypassVpnOnHomeWifi;
        QList<QString> dnsSuffixSearchList;
        bool rememberUserCredentials;
        std::unique_ptr<microsoft::graph::windowsPhone81CertificateProfileBase> identityCertificate;
    };

    struct windowsPhoneEASEmailProfileConfiguration : graph::easEmailProfileConfigurationBase {
        QString accountName;
        bool applyOnlyToWindowsPhone81;
        microsoft::graph::emailSyncDuration durationOfEmailToSync;
        microsoft::graph::userEmailSource emailAddressSource;
        microsoft::graph::emailSyncSchedule emailSyncSchedule;
        QString hostName;
        bool requireSsl;
        bool syncCalendar;
        bool syncContacts;
        bool syncTasks;
    };

    struct windowsUpdateForBusinessConfiguration : graph::deviceConfiguration {
        microsoft::graph::automaticUpdateMode automaticUpdateMode;
        microsoft::graph::autoRestartNotificationDismissalMethod autoRestartNotificationDismissal;
        microsoft::graph::windowsUpdateType businessReadyUpdatesOnly;
        int deadlineForFeatureUpdatesInDays;
        int deadlineForQualityUpdatesInDays;
        int deadlineGracePeriodInDays;
        microsoft::graph::windowsDeliveryOptimizationMode deliveryOptimizationMode;
        bool driversExcluded;
        int engagedRestartDeadlineInDays;
        int engagedRestartSnoozeScheduleInDays;
        int engagedRestartTransitionScheduleInDays;
        int featureUpdatesDeferralPeriodInDays;
        bool featureUpdatesPaused;
        QDateTime featureUpdatesPauseExpiryDateTime;
        QDate featureUpdatesPauseStartDate;
        QDateTime featureUpdatesRollbackStartDateTime;
        int featureUpdatesRollbackWindowInDays;
        bool featureUpdatesWillBeRolledBack;
        microsoft::graph::windowsUpdateInstallScheduleType installationSchedule;
        bool microsoftUpdateServiceAllowed;
        bool postponeRebootUntilAfterDeadline;
        microsoft::graph::prereleaseFeatures prereleaseFeatures;
        int qualityUpdatesDeferralPeriodInDays;
        bool qualityUpdatesPaused;
        QDateTime qualityUpdatesPauseExpiryDateTime;
        QDate qualityUpdatesPauseStartDate;
        QDateTime qualityUpdatesRollbackStartDateTime;
        bool qualityUpdatesWillBeRolledBack;
        int scheduleImminentRestartWarningInMinutes;
        int scheduleRestartWarningInHours;
        bool skipChecksBeforeRestart;
        microsoft::graph::windowsUpdateNotificationDisplayOption updateNotificationLevel;
        microsoft::graph::windowsUpdateForBusinessUpdateWeeks updateWeeks;
        microsoft::graph::enablement userPauseAccess;
        microsoft::graph::enablement userWindowsUpdateScanAccess;
        QList<microsoft::graph::windowsUpdateState> deviceUpdateStates;
    };

    struct windowsWifiConfiguration : graph::deviceConfiguration {
        bool connectAutomatically;
        bool connectToPreferredNetwork;
        bool connectWhenNetworkNameIsHidden;
        bool forceFIPSCompliance;
        microsoft::graph::meteredConnectionLimitType meteredConnectionLimit;
        QString networkName;
        QString preSharedKey;
        QString proxyAutomaticConfigurationUrl;
        QString proxyManualAddress;
        int proxyManualPort;
        microsoft::graph::wiFiProxySetting proxySetting;
        QString ssid;
        microsoft::graph::wiFiSecurityType wifiSecurityType;
    };

    struct windowsWifiEnterpriseEAPConfiguration : graph::windowsWifiConfiguration {
        microsoft::graph::wiFiAuthenticationMethod authenticationMethod;
        int authenticationPeriodInSeconds;
        int authenticationRetryDelayPeriodInSeconds;
        microsoft::graph::wifiAuthenticationType authenticationType;
        bool cacheCredentials;
        bool disableUserPromptForServerValidation;
        int eapolStartPeriodInSeconds;
        microsoft::graph::eapType eapType;
        bool enablePairwiseMasterKeyCaching;
        bool enablePreAuthentication;
        microsoft::graph::nonEapAuthenticationMethodForEapTtlsType innerAuthenticationProtocolForEAPTTLS;
        int maximumAuthenticationFailures;
        int maximumAuthenticationTimeoutInSeconds;
        int maximumEAPOLStartMessages;
        int maximumNumberOfPairwiseMasterKeysInCache;
        int maximumPairwiseMasterKeyCacheTimeInMinutes;
        int maximumPreAuthenticationAttempts;
        microsoft::graph::networkSingleSignOnType networkSingleSignOn;
        QString outerIdentityPrivacyTemporaryValue;
        bool performServerValidation;
        bool promptForAdditionalAuthenticationCredentials;
        bool requireCryptographicBinding;
        QList<QString> trustedServerCertificateNames;
        bool userBasedVirtualLan;
        std::unique_ptr<microsoft::graph::windowsCertificateProfileBase> identityCertificateForClientAuthentication;
        std::unique_ptr<microsoft::graph::windows81TrustedRootCertificate> rootCertificateForClientValidation;
        QList<microsoft::graph::windows81TrustedRootCertificate> rootCertificatesForServerValidation;
    };

    struct deviceComplianceScriptDeviceState : graph::entity {
        microsoft::graph::runState detectionState;
        QDateTime expectedStateUpdateDateTime;
        QDateTime lastStateUpdateDateTime;
        QDateTime lastSyncDateTime;
        QString scriptError;
        QString scriptOutput;
        std::unique_ptr<microsoft::graph::managedDevice> managedDevice;
    };

    struct deviceHealthScriptDeviceState : graph::entity {
        QList<QString> assignmentFilterIds;
        microsoft::graph::runState detectionState;
        QDateTime expectedStateUpdateDateTime;
        QDateTime lastStateUpdateDateTime;
        QDateTime lastSyncDateTime;
        QString postRemediationDetectionScriptError;
        QString postRemediationDetectionScriptOutput;
        QString preRemediationDetectionScriptError;
        QString preRemediationDetectionScriptOutput;
        QString remediationScriptError;
        microsoft::graph::remediationState remediationState;
        std::unique_ptr<microsoft::graph::managedDevice> managedDevice;
    };

    struct windowsManagedDevice : graph::managedDevice {
    };

    struct activeDirectoryWindowsAutopilotDeploymentProfile : graph::windowsAutopilotDeploymentProfile {
        bool hybridAzureADJoinSkipConnectivityCheck;
        std::unique_ptr<microsoft::graph::windowsDomainJoinConfiguration> domainJoinConfiguration;
    };

    struct azureADWindowsAutopilotDeploymentProfile : graph::windowsAutopilotDeploymentProfile {
    };

    struct locationManagementCondition : graph::managementCondition {
    };

    struct circularGeofenceManagementCondition : graph::locationManagementCondition {
        double latitude;
        double longitude;
        float radiusInMeters;
    };

    struct networkManagementCondition : graph::managementCondition {
    };

    struct networkIPv4ConfigurationManagementCondition : graph::networkManagementCondition {
        QList<QString> dnsSuffixList;
        QString ipV4DHCPServer;
        QList<QString> ipV4DNSServerList;
        QString ipV4Gateway;
        QString ipV4Prefix;
    };

    struct networkIPv6ConfigurationManagementCondition : graph::networkManagementCondition {
        QList<QString> dnsSuffixList;
        QList<QString> ipV6DNSServerList;
        QString ipV6Gateway;
        QString ipV6Prefix;
    };

    struct groupPolicyDefinitionValue : graph::entity {
        microsoft::graph::groupPolicyConfigurationType configurationType;
        QDateTime createdDateTime;
        bool enabled;
        QDateTime lastModifiedDateTime;
        std::unique_ptr<microsoft::graph::groupPolicyDefinition> definition;
        QList<microsoft::graph::groupPolicyPresentationValue> presentationValues;
    };

    struct groupPolicyPresentation : graph::entity {
        QString label;
        QDateTime lastModifiedDateTime;
        std::unique_ptr<microsoft::graph::groupPolicyDefinition> definition;
    };

    struct groupPolicyPresentationValue : graph::entity {
        QDateTime createdDateTime;
        QDateTime lastModifiedDateTime;
        std::unique_ptr<microsoft::graph::groupPolicyDefinitionValue> definitionValue;
        std::unique_ptr<microsoft::graph::groupPolicyPresentation> presentation;
    };

    struct groupPolicyPresentationCheckBox : graph::groupPolicyPresentation {
        bool defaultChecked;
    };

    struct groupPolicyPresentationComboBox : graph::groupPolicyPresentation {
        QString defaultValue;
        long long maxLength;
        bool required;
        QList<QString> suggestions;
    };

    struct groupPolicyPresentationDecimalTextBox : graph::groupPolicyPresentation {
        long long defaultValue;
        long long maxValue;
        long long minValue;
        bool required;
        bool spin;
        long long spinStep;
    };

    struct groupPolicyPresentationDropdownList : graph::groupPolicyPresentation {
        microsoft::graph::groupPolicyPresentationDropdownListItem defaultItem;
        QList<microsoft::graph::groupPolicyPresentationDropdownListItem> items;
        bool required;
    };

    struct groupPolicyPresentationListBox : graph::groupPolicyPresentation {
        bool explicitValue;
        QString valuePrefix;
    };

    struct groupPolicyPresentationLongDecimalTextBox : graph::groupPolicyPresentation {
        long long defaultValue;
        long long maxValue;
        long long minValue;
        bool required;
        bool spin;
        long long spinStep;
    };

    struct groupPolicyPresentationMultiTextBox : graph::groupPolicyPresentation {
        long long maxLength;
        long long maxStrings;
        bool required;
    };

    struct groupPolicyPresentationText : graph::groupPolicyPresentation {
    };

    struct groupPolicyPresentationTextBox : graph::groupPolicyPresentation {
        QString defaultValue;
        long long maxLength;
        bool required;
    };

    struct groupPolicyPresentationValueBoolean : graph::groupPolicyPresentationValue {
        bool value;
    };

    struct groupPolicyPresentationValueDecimal : graph::groupPolicyPresentationValue {
        long long value;
    };

    struct groupPolicyPresentationValueList : graph::groupPolicyPresentationValue {
        QList<microsoft::graph::keyValuePair> values;
    };

    struct groupPolicyPresentationValueLongDecimal : graph::groupPolicyPresentationValue {
        long long value;
    };

    struct groupPolicyPresentationValueMultiText : graph::groupPolicyPresentationValue {
        QList<QString> values;
    };

    struct groupPolicyPresentationValueText : graph::groupPolicyPresentationValue {
        QString value;
    };

    struct deviceAndAppManagementRoleDefinition : graph::roleDefinition {
    };

    struct windowsDefenderApplicationControlSupplementalPolicyDeploymentStatus : graph::entity {
        microsoft::graph::windowsDefenderApplicationControlSupplementalPolicyStatuses deploymentStatus;
        QString deviceId;
        QString deviceName;
        QDateTime lastSyncDateTime;
        QString osDescription;
        QString osVersion;
        QString policyVersion;
        QString userName;
        QString userPrincipalName;
        std::unique_ptr<microsoft::graph::windowsDefenderApplicationControlSupplementalPolicy> policy;
    };

    struct notebook : graph::onenoteEntityHierarchyModel {
        bool isDefault;
        bool isShared;
        microsoft::graph::notebookLinks links;
        QString sectionGroupsUrl;
        QString sectionsUrl;
        microsoft::graph::onenoteUserRole userRole;
        QList<microsoft::graph::sectionGroup> sectionGroups;
        QList<microsoft::graph::onenoteSection> sections;
    };

    struct sectionGroup : graph::onenoteEntityHierarchyModel {
        QString sectionGroupsUrl;
        QString sectionsUrl;
        std::unique_ptr<microsoft::graph::notebook> parentNotebook;
        std::unique_ptr<microsoft::graph::sectionGroup> parentSectionGroup;
        QList<microsoft::graph::sectionGroup> sectionGroups;
        QList<microsoft::graph::onenoteSection> sections;
    };

    struct onenoteSection : graph::onenoteEntityHierarchyModel {
        bool isDefault;
        microsoft::graph::sectionLinks links;
        QString pagesUrl;
        QList<microsoft::graph::onenotePage> pages;
        std::unique_ptr<microsoft::graph::notebook> parentNotebook;
        std::unique_ptr<microsoft::graph::sectionGroup> parentSectionGroup;
    };

    struct onenotePage : graph::onenoteEntitySchemaObjectModel {
        QByteArray content;
        QString contentUrl;
        QString createdByAppId;
        QDateTime lastModifiedDateTime;
        int level;
        microsoft::graph::pageLinks links;
        int order;
        QString title;
        QList<QString> userTags;
        std::unique_ptr<microsoft::graph::notebook> parentNotebook;
        std::unique_ptr<microsoft::graph::onenoteSection> parentSection;
    };

    struct governanceResource : graph::entity {
        QString displayName;
        QString externalId;
        QDateTime registeredDateTime;
        QString registeredRoot;
        QString status;
        QString type;
        std::unique_ptr<microsoft::graph::governanceResource> parent;
        QList<microsoft::graph::governanceRoleAssignmentRequest> roleAssignmentRequests;
        QList<microsoft::graph::governanceRoleAssignment> roleAssignments;
        QList<microsoft::graph::governanceRoleDefinition> roleDefinitions;
        QList<microsoft::graph::governanceRoleSetting> roleSettings;
    };

    struct governanceRoleAssignmentRequest : graph::entity {
        QString assignmentState;
        QString linkedEligibleRoleAssignmentId;
        QString reason;
        QDateTime requestedDateTime;
        QString resourceId;
        QString roleDefinitionId;
        microsoft::graph::governanceSchedule schedule;
        microsoft::graph::governanceRoleAssignmentRequestStatus status;
        QString subjectId;
        QString type;
        std::unique_ptr<microsoft::graph::governanceResource> resource;
        std::unique_ptr<microsoft::graph::governanceRoleDefinition> roleDefinition;
        std::unique_ptr<microsoft::graph::governanceSubject> subject;
    };

    struct governanceRoleAssignment : graph::entity {
        QString assignmentState;
        QDateTime endDateTime;
        QString externalId;
        QString linkedEligibleRoleAssignmentId;
        QString memberType;
        QString resourceId;
        QString roleDefinitionId;
        QDateTime startDateTime;
        QString status;
        QString subjectId;
        std::unique_ptr<microsoft::graph::governanceRoleAssignment> linkedEligibleRoleAssignment;
        std::unique_ptr<microsoft::graph::governanceResource> resource;
        std::unique_ptr<microsoft::graph::governanceRoleDefinition> roleDefinition;
        std::unique_ptr<microsoft::graph::governanceSubject> subject;
    };

    struct governanceRoleDefinition : graph::entity {
        QString displayName;
        QString externalId;
        QString resourceId;
        QString templateId;
        std::unique_ptr<microsoft::graph::governanceResource> resource;
        std::unique_ptr<microsoft::graph::governanceRoleSetting> roleSetting;
    };

    struct governanceRoleSetting : graph::entity {
        QList<microsoft::graph::governanceRuleSetting> adminEligibleSettings;
        QList<microsoft::graph::governanceRuleSetting> adminMemberSettings;
        bool isDefault;
        QString lastUpdatedBy;
        QDateTime lastUpdatedDateTime;
        QString resourceId;
        QString roleDefinitionId;
        QList<microsoft::graph::governanceRuleSetting> userEligibleSettings;
        QList<microsoft::graph::governanceRuleSetting> userMemberSettings;
        std::unique_ptr<microsoft::graph::governanceResource> resource;
        std::unique_ptr<microsoft::graph::governanceRoleDefinition> roleDefinition;
    };

    struct privilegedAccess : graph::entity {
        QString displayName;
        QList<microsoft::graph::governanceResource> resources;
        QList<microsoft::graph::governanceRoleAssignmentRequest> roleAssignmentRequests;
        QList<microsoft::graph::governanceRoleAssignment> roleAssignments;
        QList<microsoft::graph::governanceRoleDefinition> roleDefinitions;
        QList<microsoft::graph::governanceRoleSetting> roleSettings;
    };

    struct privilegedApproval : graph::entity {
        std::chrono::system_clock::duration approvalDuration;
        microsoft::graph::approvalState approvalState;
        QString approvalType;
        QString approverReason;
        QDateTime endDateTime;
        QString requestorReason;
        QString roleId;
        QDateTime startDateTime;
        QString userId;
        std::unique_ptr<microsoft::graph::privilegedRoleAssignmentRequest> request;
        std::unique_ptr<microsoft::graph::privilegedRole> roleInfo;
    };

    struct privilegedRoleAssignmentRequest : graph::entity {
        QString assignmentState;
        QString duration;
        QString reason;
        QDateTime requestedDateTime;
        QString roleId;
        microsoft::graph::governanceSchedule schedule;
        QString status;
        QString ticketNumber;
        QString ticketSystem;
        QString type;
        QString userId;
        std::unique_ptr<microsoft::graph::privilegedRole> roleInfo;
    };

    struct privilegedRole : graph::entity {
        QString name;
        QList<microsoft::graph::privilegedRoleAssignment> assignments;
        std::unique_ptr<microsoft::graph::privilegedRoleSettings> settings;
        std::unique_ptr<microsoft::graph::privilegedRoleSummary> summary;
    };

    struct privilegedRoleAssignment : graph::entity {
        QDateTime expirationDateTime;
        bool isElevated;
        QString resultMessage;
        QString roleId;
        QString userId;
        std::unique_ptr<microsoft::graph::privilegedRole> roleInfo;
    };

    struct print {
        microsoft::graph::printSettings settings;
        QList<microsoft::graph::printConnector> connectors;
        QList<microsoft::graph::printOperation> operations;
        QList<microsoft::graph::printer> printers;
        QList<microsoft::graph::printerShare> printerShares;
        std::unique_ptr<microsoft::graph::reportRoot> reports;
        QList<microsoft::graph::printService> services;
        QList<microsoft::graph::printerShare> shares;
        QList<microsoft::graph::printTaskDefinition> taskDefinitions;
    };

    struct printerBase : graph::entity {
        microsoft::graph::printerCapabilities capabilities;
        microsoft::graph::printerDefaults defaults;
        QString displayName;
        bool isAcceptingJobs;
        microsoft::graph::printerLocation location;
        QString manufacturer;
        QString model;
        QString name;
        microsoft::graph::printerStatus status;
        QList<microsoft::graph::printJob> jobs;
    };

    struct printer : graph::printerBase {
        bool acceptingJobs;
        bool hasPhysicalDevice;
        bool isShared;
        QDateTime lastSeenDateTime;
        QDateTime registeredDateTime;
        QList<microsoft::graph::printConnector> connectors;
        std::unique_ptr<microsoft::graph::printerShare> share;
        QList<microsoft::graph::printerShare> shares;
        QList<microsoft::graph::printTaskTrigger> taskTriggers;
    };

    struct printerShare : graph::printerBase {
        bool allowAllUsers;
        QDateTime createdDateTime;
        QList<microsoft::graph::group> allowedGroups;
        QList<microsoft::graph::user> allowedUsers;
        std::unique_ptr<microsoft::graph::printer> printer;
    };

    struct printTaskDefinition : graph::entity {
        microsoft::graph::appIdentity createdBy;
        QString displayName;
        QList<microsoft::graph::printTask> tasks;
    };

    struct printTaskTrigger : graph::entity {
        microsoft::graph::printEvent event;
        std::unique_ptr<microsoft::graph::printTaskDefinition> definition;
    };

    struct printJob : graph::entity {
        microsoft::graph::printJobConfiguration configuration;
        microsoft::graph::userIdentity createdBy;
        QDateTime createdDateTime;
        bool isFetchable;
        QString redirectedFrom;
        QString redirectedTo;
        microsoft::graph::printJobStatus status;
        QList<microsoft::graph::printDocument> documents;
        QList<microsoft::graph::printTask> tasks;
    };

    struct printerCreateOperation : graph::printOperation {
        QString certificate;
        std::unique_ptr<microsoft::graph::printer> printer;
    };

    struct printTask : graph::entity {
        QString parentUrl;
        microsoft::graph::printTaskStatus status;
        std::unique_ptr<microsoft::graph::printTaskDefinition> definition;
        std::unique_ptr<microsoft::graph::printTaskTrigger> trigger;
    };

    struct activityHistoryItem : graph::entity {
        int activeDurationSeconds;
        QDateTime createdDateTime;
        QDateTime expirationDateTime;
        QDateTime lastActiveDateTime;
        QDateTime lastModifiedDateTime;
        QDateTime startedDateTime;
        microsoft::graph::status status;
        QString userTimezone;
        std::unique_ptr<microsoft::graph::userActivity> activity;
    };

    struct aadUserConversationMember : graph::conversationMember {
        QString email;
        QString tenantId;
        QString userId;
        std::unique_ptr<microsoft::graph::user> user;
    };

} // namespace microsoft::graph

namespace microsoft::graph::ediscovery {
    struct ediscoveryroot : graph::entity {
        QList<microsoft::graph::ediscovery::_case> cases;
    };

    struct addToReviewSetOperation : microsoft::graph::ediscovery::caseOperation {
        std::unique_ptr<microsoft::graph::ediscovery::reviewSet> reviewSet;
        std::unique_ptr<microsoft::graph::ediscovery::sourceCollection> sourceCollection;
    };

    struct sourceCollection : graph::entity {
        QString contentQuery;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        microsoft::graph::ediscovery::dataSourceScopes dataSourceScopes;
        QString description;
        QString displayName;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::ediscovery::dataSource> additionalSources;
        std::unique_ptr<microsoft::graph::ediscovery::addToReviewSetOperation> addToReviewSetOperation;
        QList<microsoft::graph::ediscovery::dataSource> custodianSources;
        std::unique_ptr<microsoft::graph::ediscovery::estimateStatisticsOperation> lastEstimateStatisticsOperation;
        QList<microsoft::graph::ediscovery::noncustodialDataSource> noncustodialSources;
    };

    struct _case : graph::entity {
        microsoft::graph::identitySet closedBy;
        QDateTime closedDateTime;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QString externalId;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        microsoft::graph::ediscovery::caseStatus status;
        QList<microsoft::graph::ediscovery::custodian> custodians;
        QList<microsoft::graph::ediscovery::legalHold> legalHolds;
        QList<microsoft::graph::ediscovery::noncustodialDataSource> noncustodialDataSources;
        QList<microsoft::graph::ediscovery::caseOperation> operations;
        QList<microsoft::graph::ediscovery::reviewSet> reviewSets;
        std::unique_ptr<microsoft::graph::ediscovery::settings> settings;
        QList<microsoft::graph::ediscovery::sourceCollection> sourceCollections;
        QList<microsoft::graph::ediscovery::tag> tags;
    };

    struct custodian : microsoft::graph::ediscovery::dataSourceContainer {
        QDateTime acknowledgedDateTime;
        bool applyHoldToSources;
        QString email;
        QList<microsoft::graph::ediscovery::siteSource> siteSources;
        QList<microsoft::graph::ediscovery::unifiedGroupSource> unifiedGroupSources;
        QList<microsoft::graph::ediscovery::userSource> userSources;
    };

    struct legalHold : graph::entity {
        QString contentQuery;
        microsoft::graph::identitySet createdBy;
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QList<QString> errors;
        bool isEnabled;
        microsoft::graph::identitySet lastModifiedBy;
        QDateTime lastModifiedDateTime;
        microsoft::graph::ediscovery::legalHoldStatus status;
        QList<microsoft::graph::ediscovery::siteSource> siteSources;
        QList<microsoft::graph::ediscovery::unifiedGroupSource> unifiedGroupSources;
        QList<microsoft::graph::ediscovery::userSource> userSources;
    };

    struct siteSource : microsoft::graph::ediscovery::dataSource {
        std::unique_ptr<microsoft::graph::site> site;
    };

    struct unifiedGroupSource : microsoft::graph::ediscovery::dataSource {
        microsoft::graph::ediscovery::sourceType includedSources;
        std::unique_ptr<microsoft::graph::group> group;
    };

    struct estimateStatisticsOperation : microsoft::graph::ediscovery::caseOperation {
        long long indexedItemCount;
        long long indexedItemsSize;
        int mailboxCount;
        int siteCount;
        long long unindexedItemCount;
        long long unindexedItemsSize;
        std::unique_ptr<microsoft::graph::ediscovery::sourceCollection> sourceCollection;
    };

} // namespace microsoft::graph::ediscovery

namespace microsoft::graph::termStore {
    struct store : graph::entity {
        QString defaultLanguageTag;
        QList<QString> languageTags;
        QList<microsoft::graph::termStore::group> groups;
        QList<microsoft::graph::termStore::set> sets;
    };

    struct group : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QString displayName;
        QString parentSiteId;
        microsoft::graph::termStore::termGroupScope scope;
        QList<microsoft::graph::termStore::set> sets;
    };

    struct set : graph::entity {
        QDateTime createdDateTime;
        QString description;
        QList<microsoft::graph::termStore::localizedName> localizedNames;
        QList<microsoft::graph::keyValue> properties;
        QList<microsoft::graph::termStore::term> children;
        std::unique_ptr<microsoft::graph::termStore::group> parentGroup;
        QList<microsoft::graph::termStore::relation> relations;
        QList<microsoft::graph::termStore::term> terms;
    };

    struct relation : graph::entity {
        microsoft::graph::termStore::relationType relationship;
        std::unique_ptr<microsoft::graph::termStore::term> fromTerm;
        std::unique_ptr<microsoft::graph::termStore::set> set;
        std::unique_ptr<microsoft::graph::termStore::term> toTerm;
    };

    struct term : graph::entity {
        QDateTime createdDateTime;
        QList<microsoft::graph::termStore::localizedDescription> descriptions;
        QList<microsoft::graph::termStore::localizedLabel> labels;
        QDateTime lastModifiedDateTime;
        QList<microsoft::graph::keyValue> properties;
        QList<microsoft::graph::termStore::term> children;
        QList<microsoft::graph::termStore::relation> relations;
        std::unique_ptr<microsoft::graph::termStore::set> set;
    };

} // namespace microsoft::graph::termStore

// clang-format on
